
BMI088_24062023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020f8  08009c10  08009c10  00019c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd08  0800bd08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd10  0800bd10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd10  0800bd10  0001bd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd14  0800bd14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bd18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001dc  0800bef4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800bef4  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f0d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  00035119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023db3  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015742  00000000  00000000  0005db6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d891c  00000000  00000000  000732ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bbc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006410  00000000  00000000  0014bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009bf4 	.word	0x08009bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009bf4 	.word	0x08009bf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08_dev *dev)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa98 	bl	80014ce <null_ptr_check>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12a      	bne.n	8001000 <bmi08a_init+0x74>
    {
        dev->accel_chip_id = 0x1e;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	221e      	movs	r2, #30
 8000fae:	701a      	strb	r2, [r3, #0]

        if (dev->intf == BMI08_SPI_INTF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10c      	bne.n	8000fd2 <bmi08a_init+0x46>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08_ENABLE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	739a      	strb	r2, [r3, #14]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000fbe:	f107 010e 	add.w	r1, r7, #14
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 faa1 	bl	800150e <get_regs>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e002      	b.n	8000fd8 <bmi08a_init+0x4c>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08_DISABLE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08_OK)
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10f      	bne.n	8001000 <bmi08a_init+0x74>
        {
            rslt = get_regs(BMI08_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000fe0:	f107 010e 	add.w	r1, r7, #14
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fa90 	bl	800150e <get_regs>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <bmi08a_init+0x74>
            {
                /* Store the chip ID in dev structure */
                //dev->accel_chip_id = chip_id;
            	//I HARDCODED THIS PLS REMOVE IF FOUND PROBLEM
                dev->accel_chip_id = 0x1e;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	221e      	movs	r2, #30
 8000ffe:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <bmi08a_load_config_file>:

/*!
 *  @brief This API uploads the bmi08 config file onto the device.
 */
int8_t bmi08a_load_config_file(struct bmi08_dev *dev)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Config loading disable */
    uint8_t config_load = BMI08_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	72fb      	strb	r3, [r7, #11]

    /* APS disable */
    uint8_t aps_disable = BMI08_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	72bb      	strb	r3, [r7, #10]

    uint16_t index = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	81bb      	strh	r3, [r7, #12]
    uint8_t reg_data = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	727b      	strb	r3, [r7, #9]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fa52 	bl	80014ce <null_ptr_check>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]

    /* Check if config file pointer is not null */
    if ((rslt == BMI08_OK) && (dev->config_file_ptr != NULL))
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d173      	bne.n	800111e <bmi08a_load_config_file+0x112>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d06f      	beq.n	800111e <bmi08a_load_config_file+0x112>
    {
        /* Check whether the read/write length is valid */
        if (dev->read_write_len > 0)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	2b00      	cmp	r3, #0
 8001046:	d067      	beq.n	8001118 <bmi08a_load_config_file+0x10c>
        {
            /* Disable advanced power save mode */
            rslt = bmi08a_set_regs(BMI08_REG_ACCEL_PWR_CONF, &aps_disable, 1, dev);
 8001048:	f107 010a 	add.w	r1, r7, #10
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	207c      	movs	r0, #124	; 0x7c
 8001052:	f000 f89c 	bl	800118e <bmi08a_set_regs>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d110      	bne.n	8001084 <bmi08a_load_config_file+0x78>
            {
                /* Wait until APS disable is set. Refer the data-sheet for more information */
                dev->delay_us(450, dev->intf_ptr_accel);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6852      	ldr	r2, [r2, #4]
 800106a:	4611      	mov	r1, r2
 800106c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001070:	4798      	blx	r3

                /* Disable config loading */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INIT_CTRL, &config_load, 1, dev);
 8001072:	f107 010b 	add.w	r1, r7, #11
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	2059      	movs	r0, #89	; 0x59
 800107c:	f000 f887 	bl	800118e <bmi08a_set_regs>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI08_OK)
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d14b      	bne.n	8001124 <bmi08a_load_config_file+0x118>
            {
                for (index = 0; index < BMI08_CONFIG_STREAM_SIZE;
 800108c:	2300      	movs	r3, #0
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	e011      	b.n	80010b6 <bmi08a_load_config_file+0xaa>
                     index += dev->read_write_len)
                {
                    /* Write the config stream */
                    rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1a      	ldr	r2, [r3, #32]
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	89b9      	ldrh	r1, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fbfd 	bl	800189e <stream_transfer_write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
                     index += dev->read_write_len)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	81bb      	strh	r3, [r7, #12]
                for (index = 0; index < BMI08_CONFIG_STREAM_SIZE;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80010bc:	d3e9      	bcc.n	8001092 <bmi08a_load_config_file+0x86>
                }

                if (rslt == BMI08_OK)
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11e      	bne.n	8001104 <bmi08a_load_config_file+0xf8>
                {
                    /* Enable config loading and FIFO mode */
                    config_load = BMI08_ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	72fb      	strb	r3, [r7, #11]

                    rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INIT_CTRL, &config_load, 1, dev);
 80010ca:	f107 010b 	add.w	r1, r7, #11
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	2059      	movs	r0, #89	; 0x59
 80010d4:	f000 f85b 	bl	800118e <bmi08a_set_regs>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08_OK)
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10f      	bne.n	8001104 <bmi08a_load_config_file+0xf8>
                    {
                        /* Wait till ASIC is initialized. Refer the data-sheet for more information */
                        dev->delay_us(BMI08_MS_TO_US(BMI08_ASIC_INIT_TIME_MS), dev->intf_ptr_accel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <bmi08a_load_config_file+0x128>)
 80010f0:	4798      	blx	r3

                        /* Check for config initialization status (1 = OK) */
                        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_INTERNAL_STAT, &reg_data, 1, dev);
 80010f2:	f107 0109 	add.w	r1, r7, #9
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	202a      	movs	r0, #42	; 0x2a
 80010fc:	f000 f81c 	bl	8001138 <bmi08a_get_regs>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
                    }
                }

                /* Check for initialization status */
                if (rslt == BMI08_OK && reg_data != BMI08_INIT_OK)
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10b      	bne.n	8001124 <bmi08a_load_config_file+0x118>
 800110c:	7a7b      	ldrb	r3, [r7, #9]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d008      	beq.n	8001124 <bmi08a_load_config_file+0x118>
                {
                    rslt = BMI08_E_CONFIG_STREAM_ERROR;
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	73fb      	strb	r3, [r7, #15]
        if (dev->read_write_len > 0)
 8001116:	e005      	b.n	8001124 <bmi08a_load_config_file+0x118>
                }
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001118:	23f9      	movs	r3, #249	; 0xf9
 800111a:	73fb      	strb	r3, [r7, #15]
        if (dev->read_write_len > 0)
 800111c:	e002      	b.n	8001124 <bmi08a_load_config_file+0x118>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800111e:	23ff      	movs	r3, #255	; 0xff
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e000      	b.n	8001126 <bmi08a_load_config_file+0x11a>
        if (dev->read_write_len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	000249f0 	.word	0x000249f0

08001138 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f000 f9c0 	bl	80014ce <null_ptr_check>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001152:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d111      	bne.n	800117e <bmi08a_get_regs+0x46>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001166:	7bf8      	ldrb	r0, [r7, #15]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	f000 f9ce 	bl	800150e <get_regs>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001176:	e004      	b.n	8001182 <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001178:	23f9      	movs	r3, #249	; 0xf9
 800117a:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800117c:	e001      	b.n	8001182 <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f000 f995 	bl	80014ce <null_ptr_check>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 80011a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d12c      	bne.n	800120a <bmi08a_set_regs+0x7c>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d029      	beq.n	800120a <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 80011bc:	7bf8      	ldrb	r0, [r7, #15]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	f000 f9f3 	bl	80015ae <set_regs>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08_ACCEL_PM_SUSPEND)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	7bdb      	ldrb	r3, [r3, #15]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d108      	bne.n	80011e6 <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	6852      	ldr	r2, [r2, #4]
 80011dc:	4611      	mov	r1, r2
 80011de:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80011e2:	4798      	blx	r3
        if (len > 0)
 80011e4:	e013      	b.n	800120e <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08_ACCEL_PM_ACTIVE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7bdb      	ldrb	r3, [r3, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d107      	bne.n	80011fe <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	4611      	mov	r1, r2
 80011f8:	2002      	movs	r0, #2
 80011fa:	4798      	blx	r3
        if (len > 0)
 80011fc:	e007      	b.n	800120e <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08_E_INVALID_INPUT;
 80011fe:	23fb      	movs	r3, #251	; 0xfb
 8001200:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001202:	e004      	b.n	800120e <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001204:	23f9      	movs	r3, #249	; 0xf9
 8001206:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001208:	e001      	b.n	800120e <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800120a:	23ff      	movs	r3, #255	; 0xff
 800120c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800120e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08_dev *dev)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t bw, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	73bb      	strb	r3, [r7, #14]
 8001226:	2300      	movs	r3, #0
 8001228:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f94f 	bl	80014ce <null_ptr_check>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d11d      	bne.n	8001278 <bmi08a_set_meas_conf+0x5e>
    {
        odr = dev->accel_cfg.odr;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7c9b      	ldrb	r3, [r3, #18]
 8001240:	733b      	strb	r3, [r7, #12]
        bw = dev->accel_cfg.bw;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7c5b      	ldrb	r3, [r3, #17]
 8001246:	72fb      	strb	r3, [r7, #11]

        /* Check for valid ODR */
        if ((odr < BMI08_ACCEL_ODR_12_5_HZ) || (odr > BMI08_ACCEL_ODR_1600_HZ))
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d902      	bls.n	8001254 <bmi08a_set_meas_conf+0x3a>
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d901      	bls.n	8001258 <bmi08a_set_meas_conf+0x3e>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001254:	2301      	movs	r3, #1
 8001256:	73bb      	strb	r3, [r7, #14]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08_ACCEL_BW_NORMAL)
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d901      	bls.n	8001262 <bmi08a_set_meas_conf+0x48>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 800125e:	2301      	movs	r3, #1
 8001260:	737b      	strb	r3, [r7, #13]
        }

        /* Invalid configuration present in ODR and BW */
        if ((!is_odr_invalid) && (!is_bw_invalid))
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <bmi08a_set_meas_conf+0x5a>
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <bmi08a_set_meas_conf+0x5a>
        {
            rslt = BMI08_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <bmi08a_set_meas_conf+0x5e>
        }
        else
        {
            /* Invalid configuration present in ODR and BW */
            rslt = BMI08_E_INVALID_CONFIG;
 8001274:	23f8      	movs	r3, #248	; 0xf8
 8001276:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08_dev *dev)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f91c 	bl	80014ce <null_ptr_check>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d143      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7bdb      	ldrb	r3, [r3, #15]
 80012a6:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08_ACCEL_PM_ACTIVE)
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08_ACCEL_PM_ACTIVE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08_ACCEL_POWER_ENABLE;
 80012b2:	2304      	movs	r3, #4
 80012b4:	737b      	strb	r3, [r7, #13]
 80012b6:	e009      	b.n	80012cc <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08_ACCEL_PM_SUSPEND)
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d104      	bne.n	80012c8 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08_ACCEL_PM_SUSPEND;
 80012be:	2303      	movs	r3, #3
 80012c0:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08_ACCEL_POWER_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	737b      	strb	r3, [r7, #13]
 80012c6:	e001      	b.n	80012cc <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08_E_INVALID_INPUT;
 80012c8:	23fb      	movs	r3, #251	; 0xfb
 80012ca:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08_OK)
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d12a      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 80012d4:	f107 010c 	add.w	r1, r7, #12
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	207c      	movs	r0, #124	; 0x7c
 80012de:	f000 f966 	bl	80015ae <set_regs>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11d      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08_MS_TO_US(BMI08_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6852      	ldr	r2, [r2, #4]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012fc:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	207d      	movs	r0, #125	; 0x7d
 800130a:	f000 f950 	bl	80015ae <set_regs>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08_MS_TO_US(BMI08_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6852      	ldr	r2, [r2, #4]
 8001322:	4611      	mov	r1, r2
 8001324:	f241 3088 	movw	r0, #5000	; 0x1388
 8001328:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08_sensor_data *accel, struct bmi08_dev *dev)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f000 f8c4 	bl	80014ce <null_ptr_check>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (accel != NULL))
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d140      	bne.n	80013d4 <bmi08a_get_data+0x9e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03d      	beq.n	80013d4 <bmi08a_get_data+0x9e>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_X_LSB, data, 6, dev);
 8001358:	f107 010c 	add.w	r1, r7, #12
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2206      	movs	r2, #6
 8001360:	2012      	movs	r0, #18
 8001362:	f7ff fee9 	bl	8001138 <bmi08a_get_regs>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d132      	bne.n	80013d8 <bmi08a_get_data+0xa2>
        {
            lsb = data[0];
 8001372:	7b3b      	ldrb	r3, [r7, #12]
 8001374:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 800138a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800139a:	7d7b      	ldrb	r3, [r7, #21]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 80013aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80013b2:	7c3b      	ldrb	r3, [r7, #16]
 80013b4:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80013b6:	7c7b      	ldrb	r3, [r7, #17]
 80013b8:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80013ba:	7d7b      	ldrb	r3, [r7, #21]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80013ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08_OK)
 80013d2:	e001      	b.n	80013d8 <bmi08a_get_data+0xa2>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 80013d4:	23ff      	movs	r3, #255	; 0xff
 80013d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f000 f86d 	bl	80014ce <null_ptr_check>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (int_config != NULL))
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d13a      	bne.n	8001476 <bmi08a_set_int_config+0x92>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d037      	beq.n	8001476 <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d82f      	bhi.n	800146e <bmi08a_set_int_config+0x8a>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <bmi08a_set_int_config+0x30>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001429 	.word	0x08001429
 8001418:	08001437 	.word	0x08001437
 800141c:	08001445 	.word	0x08001445
 8001420:	08001453 	.word	0x08001453
 8001424:	08001461 	.word	0x08001461
        {
            case BMI08_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f97a 	bl	8001724 <set_accel_data_ready_int>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
                break;
 8001434:	e01e      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f9d1 	bl	80017e0 <set_accel_sync_data_ready_int>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
                break;
 8001442:	e017      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa0f 	bl	800186a <set_accel_sync_input>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
                break;
 8001450:	e010      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fa63 	bl	8001920 <set_fifo_wm_int>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
                break;
 800145e:	e009      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 faba 	bl	80019dc <set_fifo_full_int>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
                break;
 800146c:	e002      	b.n	8001474 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08_E_INVALID_CONFIG;
 800146e:	23f8      	movs	r3, #248	; 0xf8
 8001470:	73fb      	strb	r3, [r7, #15]
                break;
 8001472:	bf00      	nop
        switch (int_config->int_type)
 8001474:	e001      	b.n	800147a <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop

08001488 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08_dev *dev)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d010      	beq.n	80014be <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 800149c:	f107 010e 	add.w	r1, r7, #14
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	201d      	movs	r0, #29
 80014a6:	f7ff fe47 	bl	8001138 <bmi08a_get_regs>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08_OK)
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e001      	b.n	80014c2 <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	; 0xff
 80014c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08_dev *dev)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <null_ptr_check+0x26>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <null_ptr_check+0x26>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <null_ptr_check+0x26>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08_E_NULL_PTR;
 80014f4:	23ff      	movs	r3, #255	; 0xff
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b0a7      	sub	sp, #156	; 0x9c
 8001512:	af00      	add	r7, sp, #0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08_MAX_LEN];

    if (dev->intf == BMI08_SPI_INTF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b1b      	ldrb	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d103      	bne.n	8001534 <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08_SPI_RD_MASK;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001532:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	7b9b      	ldrb	r3, [r3, #14]
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	441a      	add	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f107 0114 	add.w	r1, r7, #20
 800154a:	7bf8      	ldrb	r0, [r7, #15]
 800154c:	47a0      	blx	r4
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt == BMI08_INTF_RET_SUCCESS)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11c      	bne.n	800159c <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8001562:	2300      	movs	r3, #0
 8001564:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001568:	e012      	b.n	8001590 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 800156a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	7b92      	ldrb	r2, [r2, #14]
 8001572:	441a      	add	r2, r3
 8001574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	440b      	add	r3, r1
 800157c:	3298      	adds	r2, #152	; 0x98
 800157e:	443a      	add	r2, r7
 8001580:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001584:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8001586:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800158a:	3301      	adds	r3, #1
 800158c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001590:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8e7      	bhi.n	800156a <get_regs+0x5c>
 800159a:	e002      	b.n	80015a2 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08_E_COM_FAIL;
 800159c:	23fe      	movs	r3, #254	; 0xfe
 800159e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 80015a2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	379c      	adds	r7, #156	; 0x9c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}

080015ae <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08_SPI_INTF)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7b1b      	ldrb	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d103      	bne.n	80015d2 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08_SPI_WR_MASK);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	7bf8      	ldrb	r0, [r7, #15]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	47a0      	blx	r4
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08_E_COM_FAIL;
 80015f6:	23fe      	movs	r3, #254	; 0xfe
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}

08001606 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001610:	2300      	movs	r3, #0
 8001612:	73bb      	strb	r3, [r7, #14]
 8001614:	2300      	movs	r3, #0
 8001616:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <set_int_pin_config+0x20>
 8001620:	2b01      	cmp	r3, #1
 8001622:	d003      	beq.n	800162c <set_int_pin_config+0x26>
 8001624:	e005      	b.n	8001632 <set_int_pin_config+0x2c>
    {
        case BMI08_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08_REG_ACCEL_INT1_IO_CONF;
 8001626:	2353      	movs	r3, #83	; 0x53
 8001628:	73bb      	strb	r3, [r7, #14]
            break;
 800162a:	e005      	b.n	8001638 <set_int_pin_config+0x32>

        case BMI08_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08_REG_ACCEL_INT2_IO_CONF;
 800162c:	2354      	movs	r3, #84	; 0x54
 800162e:	73bb      	strb	r3, [r7, #14]
            break;
 8001630:	e002      	b.n	8001638 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001632:	2301      	movs	r3, #1
 8001634:	737b      	strb	r3, [r7, #13]
            break;
 8001636:	bf00      	nop
    }

    if (!is_channel_invalid)
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d16a      	bne.n	8001714 <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 800163e:	f107 010c 	add.w	r1, r7, #12
 8001642:	7bb8      	ldrb	r0, [r7, #14]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff ff61 	bl	800150e <get_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d15f      	bne.n	8001718 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	b25a      	sxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	733b      	strb	r3, [r7, #12]
            data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	b25a      	sxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08_ACCEL_SYNC_INPUT)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d11a      	bne.n	80016d6 <set_int_pin_config+0xd0>
            {
                data = BMI08_SET_BITS_POS_0(data, BMI08_ACCEL_INT_EDGE, BMI08_ENABLE);
 80016a0:	7b3b      	ldrb	r3, [r7, #12]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 80016aa:	7b3b      	ldrb	r3, [r7, #12]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f023 0310 	bic.w	r3, r3, #16
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BIT_VAL_0(data, BMI08_ACCEL_INT_IO);
 80016ca:	7b3b      	ldrb	r3, [r7, #12]
 80016cc:	f023 0308 	bic.w	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	733b      	strb	r3, [r7, #12]
 80016d4:	e014      	b.n	8001700 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f023 0308 	bic.w	r3, r3, #8
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BIT_VAL_0(data, BMI08_ACCEL_INT_IN);
 80016f6:	7b3b      	ldrb	r3, [r7, #12]
 80016f8:	f023 0310 	bic.w	r3, r3, #16
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001700:	f107 010c 	add.w	r1, r7, #12
 8001704:	7bb8      	ldrb	r0, [r7, #14]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	f7ff fd40 	bl	800118e <bmi08a_set_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08_E_INVALID_INPUT;
 8001714:	23fb      	movs	r3, #251	; 0xfb
 8001716:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800172e:	2300      	movs	r3, #0
 8001730:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001732:	f107 010d 	add.w	r1, r7, #13
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	2058      	movs	r0, #88	; 0x58
 800173c:	f7ff fee7 	bl	800150e <get_regs>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d143      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <set_accel_data_ready_int+0x3c>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d010      	beq.n	8001780 <set_accel_data_ready_int+0x5c>
 800175e:	e01f      	b.n	80017a0 <set_accel_data_ready_int+0x7c>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT1_DRDY, conf);
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	b25a      	sxtb	r2, r3
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	737b      	strb	r3, [r7, #13]
                break;
 800177e:	e012      	b.n	80017a6 <set_accel_data_ready_int+0x82>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_DRDY, conf);
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001788:	b25a      	sxtb	r2, r3
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	b25b      	sxtb	r3, r3
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	737b      	strb	r3, [r7, #13]
                break;
 800179e:	e002      	b.n	80017a6 <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 80017a0:	23fb      	movs	r3, #251	; 0xfb
 80017a2:	73fb      	strb	r3, [r7, #15]
                break;
 80017a4:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d112      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff28 	bl	8001606 <set_int_pin_config>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80017c2:	f107 010d 	add.w	r1, r7, #13
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	2058      	movs	r0, #88	; 0x58
 80017cc:	f7ff fcdf 	bl	800118e <bmi08a_set_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <set_accel_sync_data_ready_int>:

/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	f7ff fe6d 	bl	80014ce <null_ptr_check>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12e      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
    {
        data = BMI08_ACCEL_DATA_SYNC_INT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <set_accel_sync_data_ready_int+0x32>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <set_accel_sync_data_ready_int+0x38>
 8001810:	e005      	b.n	800181e <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08_INT_CHANNEL_1:
                reg_addr = BMI08_REG_ACCEL_INT1_MAP;
 8001812:	2356      	movs	r3, #86	; 0x56
 8001814:	73bb      	strb	r3, [r7, #14]
                break;
 8001816:	e005      	b.n	8001824 <set_accel_sync_data_ready_int+0x44>

            case BMI08_INT_CHANNEL_2:
                reg_addr = BMI08_REG_ACCEL_INT2_MAP;
 8001818:	2357      	movs	r3, #87	; 0x57
 800181a:	73bb      	strb	r3, [r7, #14]
                break;
 800181c:	e002      	b.n	8001824 <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 800181e:	23fb      	movs	r3, #251	; 0xfb
 8001820:	73fb      	strb	r3, [r7, #15]
                break;
 8001822:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 8001824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d118      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08_ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	791b      	ldrb	r3, [r3, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08_ACCEL_DATA_SYNC_INT_ENABLE;
 8001834:	2301      	movs	r3, #1
 8001836:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001838:	f107 010d 	add.w	r1, r7, #13
 800183c:	7bb8      	ldrb	r0, [r7, #14]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	f7ff fca4 	bl	800118e <bmi08a_set_regs>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fed6 	bl	8001606 <set_int_pin_config>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f7ff fe2a 	bl	80014ce <null_ptr_check>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08_OK)
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff febc 	bl	8001606 <set_int_pin_config>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <stream_transfer_write>:

/*!
 *  @brief This API writes the config stream data in memory using burst mode.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bmi08_dev *dev)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	460b      	mov	r3, r1
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	817b      	strh	r3, [r7, #10]
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	75bb      	strb	r3, [r7, #22]
    uint8_t asic_lsb = ((index / 2) & 0x0F);
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	757b      	strb	r3, [r7, #21]

    /* Write to feature config register */
    rslt = bmi08a_set_regs(BMI08_REG_ACCEL_RESERVED_5B, &asic_lsb, 1, dev);
 80018ca:	f107 0115 	add.w	r1, r7, #21
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	205b      	movs	r0, #91	; 0x5b
 80018d4:	f7ff fc5b 	bl	800118e <bmi08a_set_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI08_OK)
 80018dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d117      	bne.n	8001914 <stream_transfer_write+0x76>
    {
        /* Write to feature config register */
        rslt = bmi08a_set_regs(BMI08_REG_ACCEL_RESERVED_5C, &asic_msb, 1, dev);
 80018e4:	f107 0116 	add.w	r1, r7, #22
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	205c      	movs	r0, #92	; 0x5c
 80018ee:	f7ff fc4e 	bl	800118e <bmi08a_set_regs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 80018f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <stream_transfer_write+0x76>
        {
            /* Write to feature config registers */
            rslt = bmi08a_set_regs(BMI08_REG_ACCEL_FEATURE_CFG, (uint8_t *)stream_data, dev->read_write_len, dev);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	205e      	movs	r0, #94	; 0x5e
 800190c:	f7ff fc3f 	bl	800118e <bmi08a_set_regs>
 8001910:	4603      	mov	r3, r0
 8001912:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800192a:	2300      	movs	r3, #0
 800192c:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800192e:	f107 010d 	add.w	r1, r7, #13
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	2058      	movs	r0, #88	; 0x58
 8001938:	f7ff fde9 	bl	800150e <get_regs>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d143      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <set_fifo_wm_int+0x3c>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d010      	beq.n	800197c <set_fifo_wm_int+0x5c>
 800195a:	e01f      	b.n	800199c <set_fifo_wm_int+0x7c>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT1_FWM, conf);
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	f023 0302 	bic.w	r3, r3, #2
 8001964:	b25a      	sxtb	r2, r3
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b25b      	sxtb	r3, r3
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	b25b      	sxtb	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b25b      	sxtb	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	737b      	strb	r3, [r7, #13]
                break;
 800197a:	e012      	b.n	80019a2 <set_fifo_wm_int+0x82>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_FWM, conf);
 800197c:	7b7b      	ldrb	r3, [r7, #13]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	f023 0320 	bic.w	r3, r3, #32
 8001984:	b25a      	sxtb	r2, r3
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	b25b      	sxtb	r3, r3
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	b25b      	sxtb	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	b25b      	sxtb	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	737b      	strb	r3, [r7, #13]
                break;
 800199a:	e002      	b.n	80019a2 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 800199c:	23fb      	movs	r3, #251	; 0xfb
 800199e:	73fb      	strb	r3, [r7, #15]
                break;
 80019a0:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d112      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fe2a 	bl	8001606 <set_int_pin_config>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019be:	f107 010d 	add.w	r1, r7, #13
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	2058      	movs	r0, #88	; 0x58
 80019c8:	f7ff fbe1 	bl	800118e <bmi08a_set_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80019e6:	2300      	movs	r3, #0
 80019e8:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019ea:	f107 010d 	add.w	r1, r7, #13
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	2058      	movs	r0, #88	; 0x58
 80019f4:	f7ff fd8b 	bl	800150e <get_regs>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d142      	bne.n	8001a8a <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	791b      	ldrb	r3, [r3, #4]
 8001a08:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <set_fifo_full_int+0x3c>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00f      	beq.n	8001a36 <set_fifo_full_int+0x5a>
 8001a16:	e01e      	b.n	8001a56 <set_fifo_full_int+0x7a>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS_POS_0(data, BMI08_ACCEL_INT1_FFULL, conf);
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	737b      	strb	r3, [r7, #13]
                break;
 8001a34:	e012      	b.n	8001a5c <set_fifo_full_int+0x80>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_FFULL, conf);
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	f023 0310 	bic.w	r3, r3, #16
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	737b      	strb	r3, [r7, #13]
                break;
 8001a54:	e002      	b.n	8001a5c <set_fifo_full_int+0x80>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 8001a56:	23fb      	movs	r3, #251	; 0xfb
 8001a58:	73fb      	strb	r3, [r7, #15]
                break;
 8001a5a:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d112      	bne.n	8001a8a <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fdcd 	bl	8001606 <set_int_pin_config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001a78:	f107 010d 	add.w	r1, r7, #13
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2058      	movs	r0, #88	; 0x58
 8001a82:	f7ff fb84 	bl	800118e <bmi08a_set_regs>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08_dev *dev)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fa23 	bl	8001eee <null_ptr_check>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <bmi08g_init+0x50>
    {
        dev->gyro_chip_id = 0;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]

        /* Read gyro chip id */
        rslt = get_regs(BMI08_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8001aba:	f107 010e 	add.w	r1, r7, #14
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 fa33 	bl	8001f2e <get_regs>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <bmi08g_init+0x50>
        {
            if (chip_id == BMI08_GYRO_CHIP_ID)
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d103      	bne.n	8001ae2 <bmi08g_init+0x4c>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8001ada:	7bba      	ldrb	r2, [r7, #14]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e001      	b.n	8001ae6 <bmi08g_init+0x50>
            }
            else
            {
                rslt = BMI08_E_DEV_NOT_FOUND;
 8001ae2:	23fd      	movs	r3, #253	; 0xfd
 8001ae4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f000 f9f3 	bl	8001eee <null_ptr_check>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <bmi08g_get_regs+0x46>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00e      	beq.n	8001b38 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001b20:	7bf8      	ldrb	r0, [r7, #15]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	f000 fa01 	bl	8001f2e <get_regs>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b30:	e004      	b.n	8001b3c <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001b32:	23f9      	movs	r3, #249	; 0xf9
 8001b34:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b36:	e001      	b.n	8001b3c <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001b38:	23ff      	movs	r3, #255	; 0xff
 8001b3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f000 f9c8 	bl	8001eee <null_ptr_check>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d130      	bne.n	8001bcc <bmi08g_set_regs+0x84>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02d      	beq.n	8001bcc <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d027      	beq.n	8001bc6 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001b76:	7bf8      	ldrb	r0, [r7, #15]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	f000 fa02 	bl	8001f86 <set_regs>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08_GYRO_PM_DEEP_SUSPEND)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7cdb      	ldrb	r3, [r3, #19]
 8001b8a:	2b80      	cmp	r3, #128	; 0x80
 8001b8c:	d003      	beq.n	8001b96 <bmi08g_set_regs+0x4e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7cdb      	ldrb	r3, [r3, #19]
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d108      	bne.n	8001ba8 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	6892      	ldr	r2, [r2, #8]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001ba4:	4798      	blx	r3
        if (len > 0)
 8001ba6:	e013      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08_GYRO_PM_NORMAL)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7cdb      	ldrb	r3, [r3, #19]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6892      	ldr	r2, [r2, #8]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	2002      	movs	r0, #2
 8001bbc:	4798      	blx	r3
        if (len > 0)
 8001bbe:	e007      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08_E_INVALID_INPUT;
 8001bc0:	23fb      	movs	r3, #251	; 0xfb
 8001bc2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001bc4:	e004      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001bc6:	23f9      	movs	r3, #249	; 0xf9
 8001bc8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001bca:	e001      	b.n	8001bd0 <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001bcc:	23ff      	movs	r3, #255	; 0xff
 8001bce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08_dev *dev)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73bb      	strb	r3, [r7, #14]
 8001be8:	2300      	movs	r3, #0
 8001bea:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f97e 	bl	8001eee <null_ptr_check>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d172      	bne.n	8001ce4 <bmi08g_set_meas_conf+0x108>
    {
        odr = dev->gyro_cfg.odr;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7d9b      	ldrb	r3, [r3, #22]
 8001c02:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d1b      	ldrb	r3, [r3, #20]
 8001c08:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08_GYRO_BW_32_ODR_100_HZ)
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	d901      	bls.n	8001c14 <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08_GYRO_RANGE_125_DPS)
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d901      	bls.n	8001c1e <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001c1e:	7b7b      	ldrb	r3, [r7, #13]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d15b      	bne.n	8001cdc <bmi08g_set_meas_conf+0x100>
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d158      	bne.n	8001cdc <bmi08g_set_meas_conf+0x100>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001c2a:	f107 010a 	add.w	r1, r7, #10
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	2010      	movs	r0, #16
 8001c34:	f7ff ff5d 	bl	8001af2 <bmi08g_get_regs>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14e      	bne.n	8001ce2 <bmi08g_set_meas_conf+0x106>
            {
                data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_BW, odr);
 8001c44:	7abb      	ldrb	r3, [r7, #10]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	f023 030f 	bic.w	r3, r3, #15
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001c60:	f107 010a 	add.w	r1, r7, #10
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f7ff ff6d 	bl	8001b48 <bmi08g_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <bmi08g_set_meas_conf+0xb0>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08_REG_GYRO_RANGE, &data, 1, dev);
 8001c7a:	f107 010a 	add.w	r1, r7, #10
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff ff35 	bl	8001af2 <bmi08g_get_regs>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMI08_OK)
 8001c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d116      	bne.n	8001cc2 <bmi08g_set_meas_conf+0xe6>
                {
                    data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_RANGE, range);
 8001c94:	7abb      	ldrb	r3, [r7, #10]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f023 0307 	bic.w	r3, r3, #7
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	72bb      	strb	r3, [r7, #10]

                    /* Write range value to range register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_RANGE, &data, 1, dev);
 8001cb0:	f107 010a 	add.w	r1, r7, #10
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f7ff ff45 	bl	8001b48 <bmi08g_set_regs>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMI08_OK)
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <bmi08g_set_meas_conf+0x106>
                {
                    /* Delay required to set configurations */
                    dev->delay_us(BMI08_GYRO_SET_CONFIG_DELAY * 1000, dev->intf_ptr_gyro);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6892      	ldr	r2, [r2, #8]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cd8:	4798      	blx	r3
            if (rslt == BMI08_OK)
 8001cda:	e002      	b.n	8001ce2 <bmi08g_set_meas_conf+0x106>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08_E_INVALID_CONFIG;
 8001cdc:	23f8      	movs	r3, #248	; 0xf8
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e000      	b.n	8001ce4 <bmi08g_set_meas_conf+0x108>
            if (rslt == BMI08_OK)
 8001ce2:	bf00      	nop
        }
    }

    return rslt;
 8001ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08_dev *dev)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f6 	bl	8001eee <null_ptr_check>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13a      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_LPM1, &data, 1, dev);
 8001d0e:	f107 010c 	add.w	r1, r7, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	2011      	movs	r0, #17
 8001d18:	f7ff feeb 	bl	8001af2 <bmi08g_get_regs>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12d      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7cdb      	ldrb	r3, [r3, #19]
 8001d2c:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08_GYRO_PM_SUSPEND) && (data == BMI08_GYRO_PM_DEEP_SUSPEND))
 8001d2e:	7b7b      	ldrb	r3, [r7, #13]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d104      	bne.n	8001d3e <bmi08g_set_power_mode+0x4e>
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d101      	bne.n	8001d3e <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08_GYRO_PM_DEEP_SUSPEND) && (data == BMI08_GYRO_PM_SUSPEND))
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d104      	bne.n	8001d4e <bmi08g_set_power_mode+0x5e>
 8001d44:	7b3b      	ldrb	r3, [r7, #12]
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d101      	bne.n	8001d4e <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001d54:	f107 010d 	add.w	r1, r7, #13
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2011      	movs	r0, #17
 8001d5e:	f7ff fef3 	bl	8001b48 <bmi08g_set_regs>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08_MS_TO_US(BMI08_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6892      	ldr	r2, [r2, #8]
 8001d76:	4611      	mov	r1, r2
 8001d78:	f247 5030 	movw	r0, #30000	; 0x7530
 8001d7c:	4798      	blx	r3
 8001d7e:	e001      	b.n	8001d84 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08_E_INVALID_INPUT;
 8001d80:	23fb      	movs	r3, #251	; 0xfb
 8001d82:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08_sensor_data *gyro, struct bmi08_dev *dev)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f000 f8a7 	bl	8001eee <null_ptr_check>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (gyro != NULL))
 8001da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d140      	bne.n	8001e2e <bmi08g_get_data+0x9e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03d      	beq.n	8001e2e <bmi08g_get_data+0x9e>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_X_LSB, data, 6, dev);
 8001db2:	f107 010c 	add.w	r1, r7, #12
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2206      	movs	r2, #6
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f7ff fe99 	bl	8001af2 <bmi08g_get_regs>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 8001dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d132      	bne.n	8001e32 <bmi08g_get_data+0xa2>
        {
            lsb = data[0];
 8001dcc:	7b3b      	ldrb	r3, [r7, #12]
 8001dce:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7dbb      	ldrb	r3, [r7, #22]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001de4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001df4:	7d7b      	ldrb	r3, [r7, #21]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	7dbb      	ldrb	r3, [r7, #22]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001e04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001e0c:	7c3b      	ldrb	r3, [r7, #16]
 8001e0e:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001e10:	7c7b      	ldrb	r3, [r7, #17]
 8001e12:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001e14:	7d7b      	ldrb	r3, [r7, #21]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7dbb      	ldrb	r3, [r7, #22]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001e24:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08_OK)
 8001e2c:	e001      	b.n	8001e32 <bmi08g_get_data+0xa2>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001e2e:	23ff      	movs	r3, #255	; 0xff
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f000 f850 	bl	8001eee <null_ptr_check>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (int_config != NULL))
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11e      	bne.n	8001e98 <bmi08g_set_int_config+0x5a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <bmi08g_set_int_config+0x36>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db11      	blt.n	8001e90 <bmi08g_set_int_config+0x52>
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d80e      	bhi.n	8001e90 <bmi08g_set_int_config+0x52>
 8001e72:	e006      	b.n	8001e82 <bmi08g_set_int_config+0x44>
        {
            case BMI08_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8dd 	bl	8002036 <set_gyro_data_ready_int>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
                break;
 8001e80:	e009      	b.n	8001e96 <bmi08g_set_int_config+0x58>
            case BMI08_GYRO_INT_FIFO_WM:
            case BMI08_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f948 	bl	800211a <set_fifo_int>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
                break;
 8001e8e:	e002      	b.n	8001e96 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08_E_INVALID_CONFIG;
 8001e90:	23f8      	movs	r3, #248	; 0xf8
 8001e92:	73fb      	strb	r3, [r7, #15]
                break;
 8001e94:	bf00      	nop
        switch (int_config->int_type)
 8001e96:	e001      	b.n	8001e9c <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001e98:	23ff      	movs	r3, #255	; 0xff
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08_dev *dev)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001ebc:	f107 010e 	add.w	r1, r7, #14
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f7ff fe14 	bl	8001af2 <bmi08g_get_regs>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08_OK)
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001ed6:	7bba      	ldrb	r2, [r7, #14]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e001      	b.n	8001ee2 <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001ede:	23ff      	movs	r3, #255	; 0xff
 8001ee0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08_dev *dev)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <null_ptr_check+0x26>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <null_ptr_check+0x26>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <null_ptr_check+0x26>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08_E_NULL_PTR;
 8001f14:	23ff      	movs	r3, #255	; 0xff
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e001      	b.n	8001f1e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b087      	sub	sp, #28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08_SPI_INTF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d103      	bne.n	8001f52 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08_SPI_RD_MASK);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f50:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	7bf8      	ldrb	r0, [r7, #15]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	47a0      	blx	r4
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08_E_COM_FAIL;
 8001f76:	23fe      	movs	r3, #254	; 0xfe
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}

08001f86 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4603      	mov	r3, r0
 8001f94:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08_SPI_INTF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	7b1b      	ldrb	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d103      	bne.n	8001fae <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08_SPI_WR_MASK);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fac:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d113      	bne.n	8001fdc <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	7bf8      	ldrb	r0, [r7, #15]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	47a0      	blx	r4
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08_E_COM_FAIL;
 8001fd8:	23fe      	movs	r3, #254	; 0xfe
 8001fda:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d923      	bls.n	800202a <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75bb      	strb	r3, [r7, #22]
 8001fe6:	e01c      	b.n	8002022 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001fec:	7dbb      	ldrb	r3, [r7, #22]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	18d1      	adds	r1, r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	7bf8      	ldrb	r0, [r7, #15]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	47a0      	blx	r4
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            reg_addr++;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	3301      	adds	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08_E_COM_FAIL;
 8002016:	23fe      	movs	r3, #254	; 0xfe
 8002018:	75fb      	strb	r3, [r7, #23]
                break;
 800201a:	e006      	b.n	800202a <set_regs+0xa4>
        for (count = 0; count < len; count++)
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	3301      	adds	r3, #1
 8002020:	75bb      	strb	r3, [r7, #22]
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d8de      	bhi.n	8001fe8 <set_regs+0x62>
            }
        }
    }

    return rslt;
 800202a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}

08002036 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8002040:	2300      	movs	r3, #0
 8002042:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	2018      	movs	r0, #24
 800204e:	f7ff ff6e 	bl	8001f2e <get_regs>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d157      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <set_gyro_data_ready_int+0x3c>
 800206c:	2b01      	cmp	r3, #1
 800206e:	d00f      	beq.n	8002090 <set_gyro_data_ready_int+0x5a>
 8002070:	e01b      	b.n	80020aa <set_gyro_data_ready_int+0x74>
        {
            case BMI08_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS_POS_0(data[0], BMI08_GYRO_INT3_MAP, conf);
 8002072:	7b3b      	ldrb	r3, [r7, #12]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	b25a      	sxtb	r2, r3
 800207c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b25b      	sxtb	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b25b      	sxtb	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	733b      	strb	r3, [r7, #12]
                break;
 800208e:	e00f      	b.n	80020b0 <set_gyro_data_ready_int+0x7a>

            case BMI08_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_INT4_MAP, conf);
 8002090:	7b3b      	ldrb	r3, [r7, #12]
 8002092:	b25b      	sxtb	r3, r3
 8002094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002098:	b25a      	sxtb	r2, r3
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	01db      	lsls	r3, r3, #7
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	733b      	strb	r3, [r7, #12]
                break;
 80020a8:	e002      	b.n	80020b0 <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 80020aa:	23fb      	movs	r3, #251	; 0xfb
 80020ac:	73fb      	strb	r3, [r7, #15]
                break;
 80020ae:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12a      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 80020b8:	7b3b      	ldrb	r3, [r7, #12]
 80020ba:	f003 0381 	and.w	r3, r3, #129	; 0x81
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08_GYRO_DRDY_INT_ENABLE_VAL;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	737b      	strb	r3, [r7, #13]
 80020c6:	e001      	b.n	80020cc <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08_GYRO_DRDY_INT_DISABLE_VAL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80020cc:	f107 010c 	add.w	r1, r7, #12
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	2018      	movs	r0, #24
 80020d6:	f7ff fd37 	bl	8001b48 <bmi08g_set_regs>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f88c 	bl	8002206 <set_int_pin_config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	2015      	movs	r0, #21
 8002106:	f7ff fd1f 	bl	8001b48 <bmi08g_set_regs>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8002124:	2300      	movs	r3, #0
 8002126:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002128:	f107 010c 	add.w	r1, r7, #12
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	2018      	movs	r0, #24
 8002132:	f7ff fefc 	bl	8001f2e <get_regs>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d15b      	bne.n	80021fa <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	791b      	ldrb	r3, [r3, #4]
 8002146:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <set_fifo_int+0x3c>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d010      	beq.n	8002176 <set_fifo_int+0x5c>
 8002154:	e01f      	b.n	8002196 <set_fifo_int+0x7c>
        {
            case BMI08_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_FIFO_INT3, conf);
 8002156:	7b3b      	ldrb	r3, [r7, #12]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	b25a      	sxtb	r2, r3
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	b25b      	sxtb	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b25b      	sxtb	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	733b      	strb	r3, [r7, #12]
                break;
 8002174:	e012      	b.n	800219c <set_fifo_int+0x82>

            case BMI08_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_FIFO_INT4, conf);
 8002176:	7b3b      	ldrb	r3, [r7, #12]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	f023 0320 	bic.w	r3, r3, #32
 800217e:	b25a      	sxtb	r2, r3
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	b25b      	sxtb	r3, r3
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	733b      	strb	r3, [r7, #12]
                break;
 8002194:	e002      	b.n	800219c <set_fifo_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 8002196:	23fb      	movs	r3, #251	; 0xfb
 8002198:	73fb      	strb	r3, [r7, #15]
                break;
 800219a:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12a      	bne.n	80021fa <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08_GYRO_FIFO_INT_ENABLE_VAL;
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	737b      	strb	r3, [r7, #13]
 80021b2:	e001      	b.n	80021b8 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08_GYRO_FIFO_INT_DISABLE_VAL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80021b8:	f107 010c 	add.w	r1, r7, #12
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	2018      	movs	r0, #24
 80021c2:	f7ff fcc1 	bl	8001b48 <bmi08g_set_regs>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f816 	bl	8002206 <set_int_pin_config>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	2015      	movs	r0, #21
 80021f2:	f7ff fca9 	bl	8001b48 <bmi08g_set_regs>
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002210:	f107 010e 	add.w	r1, r7, #14
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	2016      	movs	r0, #22
 800221a:	f7ff fe88 	bl	8001f2e <get_regs>
 800221e:	4603      	mov	r3, r0
 8002220:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d150      	bne.n	80022cc <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <set_int_pin_config+0x32>
 8002232:	2b01      	cmp	r3, #1
 8002234:	d020      	beq.n	8002278 <set_int_pin_config+0x72>
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 8002236:	e040      	b.n	80022ba <set_int_pin_config+0xb4>
                data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	b25b      	sxtb	r3, r3
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	b25a      	sxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73bb      	strb	r3, [r7, #14]
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 8002256:	7bbb      	ldrb	r3, [r7, #14]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	b25a      	sxtb	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	b25b      	sxtb	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b25b      	sxtb	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	73bb      	strb	r3, [r7, #14]
                break;
 8002276:	e020      	b.n	80022ba <set_int_pin_config+0xb4>
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	b25b      	sxtb	r3, r3
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	b25a      	sxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	789b      	ldrb	r3, [r3, #2]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	b25b      	sxtb	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	73bb      	strb	r3, [r7, #14]
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	f023 0308 	bic.w	r3, r3, #8
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	73bb      	strb	r3, [r7, #14]
                break;
 80022b8:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 80022ba:	f107 010e 	add.w	r1, r7, #14
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	2016      	movs	r0, #22
 80022c4:	f7ff fc40 	bl	8001b48 <bmi08g_set_regs>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <bmi08xa_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08xa_init(struct bmi08_dev *dev)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bmi08a_init(dev);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7fe fe53 	bl	8000f8c <bmi08a_init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <bmi08xa_init+0x46>
    {
        /* Check for chip id validity */
        if (((dev->variant == BMI085_VARIANT) && (dev->accel_chip_id == BMI085_ACCEL_CHIP_ID)) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7b5b      	ldrb	r3, [r3, #13]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <bmi08xa_init+0x2a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b1f      	cmp	r3, #31
 8002300:	d007      	beq.n	8002312 <bmi08xa_init+0x3a>
            ((dev->variant == BMI088_VARIANT) && (dev->accel_chip_id == BMI088_ACCEL_CHIP_ID)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b5b      	ldrb	r3, [r3, #13]
        if (((dev->variant == BMI085_VARIANT) && (dev->accel_chip_id == BMI085_ACCEL_CHIP_ID)) ||
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <bmi08xa_init+0x42>
            ((dev->variant == BMI088_VARIANT) && (dev->accel_chip_id == BMI088_ACCEL_CHIP_ID)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b1e      	cmp	r3, #30
 8002310:	d103      	bne.n	800231a <bmi08xa_init+0x42>
        {
            /* Assign stream file */
            dev->config_file_ptr = bmi08x_config_file;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <bmi08xa_init+0x54>)
 8002316:	621a      	str	r2, [r3, #32]
 8002318:	e001      	b.n	800231e <bmi08xa_init+0x46>
        }
        else
        {
            rslt = BMI08_E_DEV_NOT_FOUND;
 800231a:	23fd      	movs	r3, #253	; 0xfd
 800231c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	0800a0e4 	.word	0x0800a0e4

08002330 <bmi08xa_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08xa_set_meas_conf(struct bmi08_dev *dev)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8002338:	2300      	movs	r3, #0
 800233a:	813b      	strh	r3, [r7, #8]
    uint8_t range, bw, odr;
    uint8_t is_range_invalid = FALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	73bb      	strb	r3, [r7, #14]

    /* Check validity of ODR and BW */
    rslt = bmi08a_set_meas_conf(dev);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe ff6a 	bl	800121a <bmi08a_set_meas_conf>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]

    /* Proceed if ODR and BW are valid */
    if (rslt == BMI08_OK)
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d16a      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
    {
        odr = dev->accel_cfg.odr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7c9b      	ldrb	r3, [r3, #18]
 8002356:	737b      	strb	r3, [r7, #13]
        bw = dev->accel_cfg.bw;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7c5b      	ldrb	r3, [r3, #17]
 800235c:	733b      	strb	r3, [r7, #12]
        range = dev->accel_cfg.range;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7c1b      	ldrb	r3, [r3, #16]
 8002362:	72fb      	strb	r3, [r7, #11]

        if (dev->variant == BMI085_VARIANT)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b5b      	ldrb	r3, [r3, #13]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <bmi08xa_set_meas_conf+0x46>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d901      	bls.n	8002376 <bmi08xa_set_meas_conf+0x46>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	73bb      	strb	r3, [r7, #14]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7b5b      	ldrb	r3, [r3, #13]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d104      	bne.n	8002388 <bmi08xa_set_meas_conf+0x58>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d901      	bls.n	8002388 <bmi08xa_set_meas_conf+0x58>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8002384:	2301      	movs	r3, #1
 8002386:	73bb      	strb	r3, [r7, #14]
            }
        }

        /* If Range is valid, write it to accel config registers */
        if (!is_range_invalid)
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14a      	bne.n	8002424 <bmi08xa_set_meas_conf+0xf4>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08_REG_ACCEL_CONF, data, 2, dev);
 800238e:	f107 0108 	add.w	r1, r7, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	2040      	movs	r0, #64	; 0x40
 8002398:	f7fe fece 	bl	8001138 <bmi08a_get_regs>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08_OK)
 80023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d13f      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08_SET_BITS_POS_0(data[0], BMI08_ACCEL_ODR, odr);
 80023a8:	7a3b      	ldrb	r3, [r7, #8]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	b25a      	sxtb	r2, r3
 80023b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	723b      	strb	r3, [r7, #8]
                data[0] = BMI08_SET_BITS(data[0], BMI08_ACCEL_BW, bw);
 80023c4:	7a3b      	ldrb	r3, [r7, #8]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	7b3b      	ldrb	r3, [r7, #12]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	723b      	strb	r3, [r7, #8]

                /* Update data with current range values */
                data[1] = BMI08_SET_BITS_POS_0(data[1], BMI08_ACCEL_RANGE, range);
 80023dc:	7a7b      	ldrb	r3, [r7, #9]
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f023 0303 	bic.w	r3, r3, #3
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	727b      	strb	r3, [r7, #9]

                /* write to range register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_CONF, data, 2, dev);
 80023f8:	f107 0108 	add.w	r1, r7, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	2040      	movs	r0, #64	; 0x40
 8002402:	f7fe fec4 	bl	800118e <bmi08a_set_regs>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
                {
                    /* Delay required to set accel configurations */
                    dev->delay_us(BMI08_SET_ACCEL_CONF_DELAY * 1000, dev->intf_ptr_accel);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6852      	ldr	r2, [r2, #4]
 800241a:	4611      	mov	r1, r2
 800241c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002420:	4798      	blx	r3
 8002422:	e001      	b.n	8002428 <bmi08xa_set_meas_conf+0xf8>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08_E_INVALID_CONFIG;
 8002424:	23f8      	movs	r3, #248	; 0xf8
 8002426:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <bmi08_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI08_INTF_RET_TYPE bmi08_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af04      	add	r7, sp, #16
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, len, reg_data, len, HAL_MAX_DELAY);
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	b299      	uxth	r1, r3
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	b298      	uxth	r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f04f 34ff 	mov.w	r4, #4294967295
 800245e:	9402      	str	r4, [sp, #8]
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <bmi08_i2c_read+0x44>)
 800246a:	f001 fddb 	bl	8004024 <HAL_I2C_Mem_Read>

    //HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &reg_addr, len, HAL_MAX_DELAY); //Tell BMI088 to read sensor data and store in register
    //HAL_I2C_Master_Receive(&hi2c1, dev_addr, &received_data, len, HAL_MAX_DELAY); //Read from BMI088 registers
    return 0;
 800246e:	2300      	movs	r3, #0
    //return coines_read_i2c(COINES_I2C_BUS_0, dev_addr, reg_addr, reg_data, (uint16_t)len);
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	200001fc 	.word	0x200001fc

0800247c <bmi08_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI08_INTF_RET_TYPE bmi08_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b08b      	sub	sp, #44	; 0x2c
 8002480:	af04      	add	r7, sp, #16
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_addr = *(uint8_t*)intf_ptr;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, len, reg_data, len, HAL_MAX_DELAY);
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	b299      	uxth	r1, r3
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	b29a      	uxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	b298      	uxth	r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f04f 34ff 	mov.w	r4, #4294967295
 80024a6:	9402      	str	r4, [sp, #8]
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4603      	mov	r3, r0
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <bmi08_i2c_write+0x44>)
 80024b2:	f001 fcbd 	bl	8003e30 <HAL_I2C_Mem_Write>
    return 0;
 80024b6:	2300      	movs	r3, #0
    //return coines_write_i2c(COINES_I2C_BUS_0, dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	200001fc 	.word	0x200001fc

080024c4 <bmi08_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi08_delay_us(uint32_t period, void *intf_ptr)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <bmi08_delay_us+0x2c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1));
 80024d6:	bf00      	nop
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <bmi08_delay_us+0x2c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1fa      	bne.n	80024d8 <bmi08_delay_us+0x14>
	(void)intf_ptr;
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	20000250 	.word	0x20000250

080024f4 <bmi08_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08_interface_init(struct bmi08_dev *bmi08, uint8_t intf, uint8_t variant)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
 8002500:	4613      	mov	r3, r2
 8002502:	70bb      	strb	r3, [r7, #2]
    int8_t rslt = BMI08_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
//                    "This application will not support this sensor \n");
//            }
//        }
//
//        (void)coines_set_shuttleboard_vdd_vddio_config(0, 0);
        HAL_Delay(10);
 8002508:	200a      	movs	r0, #10
 800250a:	f001 f895 	bl	8003638 <HAL_Delay>

        /* Bus configuration : I2C */
        if (intf == BMI08_I2C_INTF)
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d114      	bne.n	800253e <bmi08_interface_init+0x4a>
        {
            printf("I2C Interface \n");
 8002514:	4816      	ldr	r0, [pc, #88]	; (8002570 <bmi08_interface_init+0x7c>)
 8002516:	f004 fb9f 	bl	8006c58 <puts>

            /* To initialize the user I2C function */
            acc_dev_add = BMI08_ACCEL_I2C_ADDR_PRIMARY;
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <bmi08_interface_init+0x80>)
 800251c:	2218      	movs	r2, #24
 800251e:	701a      	strb	r2, [r3, #0]
            gyro_dev_add = BMI08_GYRO_I2C_ADDR_PRIMARY;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <bmi08_interface_init+0x84>)
 8002522:	2268      	movs	r2, #104	; 0x68
 8002524:	701a      	strb	r2, [r3, #0]
            bmi08->intf = BMI08_I2C_INTF;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	731a      	strb	r2, [r3, #12]
            bmi08->read = bmi08_i2c_read;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <bmi08_interface_init+0x88>)
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
            bmi08->write = bmi08_i2c_write;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <bmi08_interface_init+0x8c>)
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
            //(void)coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);

            //(void)coines_config_i2c_bus(COINES_I2C_BUS_0, COINES_I2C_STANDARD_MODE);
            HAL_Delay(10);
 8002538:	200a      	movs	r0, #10
 800253a:	f001 f87d 	bl	8003638 <HAL_Delay>
//            coines_delay_msec(10);
//            (void)coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
//        }

        /* Selection of bmi085 or bmi088 sensor variant */
        bmi08->variant = (enum bmi08_variant)variant;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	78ba      	ldrb	r2, [r7, #2]
 8002542:	735a      	strb	r2, [r3, #13]

        /* Assign accel device address to accel interface pointer */
        bmi08->intf_ptr_accel = &acc_dev_add;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <bmi08_interface_init+0x80>)
 8002548:	605a      	str	r2, [r3, #4]

        /* Assign gyro device address to gyro interface pointer */
        bmi08->intf_ptr_gyro = &gyro_dev_add;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <bmi08_interface_init+0x84>)
 800254e:	609a      	str	r2, [r3, #8]
        //bmi08->accel_chip_id = 0x1E;

        //bmi08->gyro_chip_id = 0x0F;

        /* Configure delay in microseconds */
        bmi08->delay_us = bmi08_delay_us;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <bmi08_interface_init+0x90>)
 8002554:	631a      	str	r2, [r3, #48]	; 0x30

        /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
        bmi08->read_write_len = BMI08_READ_WRITE_LEN;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	222e      	movs	r2, #46	; 0x2e
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        HAL_Delay(10);
 800255e:	200a      	movs	r0, #10
 8002560:	f001 f86a 	bl	8003638 <HAL_Delay>
//    else
//    {
//        rslt = BMI08_E_NULL_PTR;
//    }

    return rslt;
 8002564:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	08009c10 	.word	0x08009c10
 8002574:	200001f8 	.word	0x200001f8
 8002578:	200001f9 	.word	0x200001f9
 800257c:	08002435 	.word	0x08002435
 8002580:	0800247d 	.word	0x0800247d
 8002584:	080024c5 	.word	0x080024c5

08002588 <bmi08_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMI08_OK)
 8002594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8081 	beq.w	80026a0 <bmi08_error_codes_print_result+0x118>
    {
        printf("%s\t", api_name);
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4841      	ldr	r0, [pc, #260]	; (80026a8 <bmi08_error_codes_print_result+0x120>)
 80025a2:	f004 fad3 	bl	8006b4c <iprintf>
        if (rslt == BMI08_E_NULL_PTR)
 80025a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d106      	bne.n	80025be <bmi08_error_codes_print_result+0x36>
        {
            printf("Error [%d] : Null pointer\r\n", rslt);
 80025b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b4:	4619      	mov	r1, r3
 80025b6:	483d      	ldr	r0, [pc, #244]	; (80026ac <bmi08_error_codes_print_result+0x124>)
 80025b8:	f004 fac8 	bl	8006b4c <iprintf>
        else
        {
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 80025bc:	e070      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_COM_FAIL)
 80025be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c2:	f113 0f02 	cmn.w	r3, #2
 80025c6:	d106      	bne.n	80025d6 <bmi08_error_codes_print_result+0x4e>
            printf("Error [%d] : Communication failure\r\n", rslt);
 80025c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4838      	ldr	r0, [pc, #224]	; (80026b0 <bmi08_error_codes_print_result+0x128>)
 80025d0:	f004 fabc 	bl	8006b4c <iprintf>
}
 80025d4:	e064      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_DEV_NOT_FOUND)
 80025d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025da:	f113 0f03 	cmn.w	r3, #3
 80025de:	d106      	bne.n	80025ee <bmi08_error_codes_print_result+0x66>
            printf("Error [%d] : Device not found\r\n", rslt);
 80025e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4833      	ldr	r0, [pc, #204]	; (80026b4 <bmi08_error_codes_print_result+0x12c>)
 80025e8:	f004 fab0 	bl	8006b4c <iprintf>
}
 80025ec:	e058      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_OUT_OF_RANGE)
 80025ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f2:	f113 0f04 	cmn.w	r3, #4
 80025f6:	d106      	bne.n	8002606 <bmi08_error_codes_print_result+0x7e>
            printf("Error [%d] : Out of Range\r\n", rslt);
 80025f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fc:	4619      	mov	r1, r3
 80025fe:	482e      	ldr	r0, [pc, #184]	; (80026b8 <bmi08_error_codes_print_result+0x130>)
 8002600:	f004 faa4 	bl	8006b4c <iprintf>
}
 8002604:	e04c      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_INVALID_INPUT)
 8002606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260a:	f113 0f05 	cmn.w	r3, #5
 800260e:	d106      	bne.n	800261e <bmi08_error_codes_print_result+0x96>
            printf("Error [%d] : Invalid input\r\n", rslt);
 8002610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002614:	4619      	mov	r1, r3
 8002616:	4829      	ldr	r0, [pc, #164]	; (80026bc <bmi08_error_codes_print_result+0x134>)
 8002618:	f004 fa98 	bl	8006b4c <iprintf>
}
 800261c:	e040      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_CONFIG_STREAM_ERROR)
 800261e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002622:	f113 0f06 	cmn.w	r3, #6
 8002626:	d106      	bne.n	8002636 <bmi08_error_codes_print_result+0xae>
            printf("Error [%d] : Config stream error\r\n", rslt);
 8002628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262c:	4619      	mov	r1, r3
 800262e:	4824      	ldr	r0, [pc, #144]	; (80026c0 <bmi08_error_codes_print_result+0x138>)
 8002630:	f004 fa8c 	bl	8006b4c <iprintf>
}
 8002634:	e034      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_RD_WR_LENGTH_INVALID)
 8002636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263a:	f113 0f07 	cmn.w	r3, #7
 800263e:	d106      	bne.n	800264e <bmi08_error_codes_print_result+0xc6>
            printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	4619      	mov	r1, r3
 8002646:	481f      	ldr	r0, [pc, #124]	; (80026c4 <bmi08_error_codes_print_result+0x13c>)
 8002648:	f004 fa80 	bl	8006b4c <iprintf>
}
 800264c:	e028      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_INVALID_CONFIG)
 800264e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002652:	f113 0f08 	cmn.w	r3, #8
 8002656:	d106      	bne.n	8002666 <bmi08_error_codes_print_result+0xde>
            printf("Error [%d] : Invalid config\r\n", rslt);
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	4619      	mov	r1, r3
 800265e:	481a      	ldr	r0, [pc, #104]	; (80026c8 <bmi08_error_codes_print_result+0x140>)
 8002660:	f004 fa74 	bl	8006b4c <iprintf>
}
 8002664:	e01c      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_FEATURE_NOT_SUPPORTED)
 8002666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266a:	f113 0f09 	cmn.w	r3, #9
 800266e:	d106      	bne.n	800267e <bmi08_error_codes_print_result+0xf6>
            printf("Error [%d] : Feature not supported\r\n", rslt);
 8002670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002674:	4619      	mov	r1, r3
 8002676:	4815      	ldr	r0, [pc, #84]	; (80026cc <bmi08_error_codes_print_result+0x144>)
 8002678:	f004 fa68 	bl	8006b4c <iprintf>
}
 800267c:	e010      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_W_FIFO_EMPTY)
 800267e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d106      	bne.n	8002694 <bmi08_error_codes_print_result+0x10c>
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 8002686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268a:	4619      	mov	r1, r3
 800268c:	4810      	ldr	r0, [pc, #64]	; (80026d0 <bmi08_error_codes_print_result+0x148>)
 800268e:	f004 fa5d 	bl	8006b4c <iprintf>
}
 8002692:	e005      	b.n	80026a0 <bmi08_error_codes_print_result+0x118>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	4619      	mov	r1, r3
 800269a:	480e      	ldr	r0, [pc, #56]	; (80026d4 <bmi08_error_codes_print_result+0x14c>)
 800269c:	f004 fa56 	bl	8006b4c <iprintf>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	08009c20 	.word	0x08009c20
 80026ac:	08009c24 	.word	0x08009c24
 80026b0:	08009c40 	.word	0x08009c40
 80026b4:	08009c68 	.word	0x08009c68
 80026b8:	08009c88 	.word	0x08009c88
 80026bc:	08009ca4 	.word	0x08009ca4
 80026c0:	08009cc4 	.word	0x08009cc4
 80026c4:	08009ce8 	.word	0x08009ce8
 80026c8:	08009d14 	.word	0x08009d14
 80026cc:	08009d34 	.word	0x08009d34
 80026d0:	08009d5c 	.word	0x08009d5c
 80026d4:	08009d78 	.word	0x08009d78

080026d8 <bmi08_coines_deinit>:
 *  @brief Deinitializes coines platform
 *
 *  @return void.
 */
void bmi08_coines_deinit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
//    /* Coines interface reset */
//    coines_soft_reset();
//    coines_delay_msec(100);
//
//    (void)coines_close_comm_intf(COINES_COMM_INTF_USB, NULL);
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026f2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80026fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002702:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002706:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800270e:	e000      	b.n	8002712 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002710:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002712:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f9      	beq.n	8002710 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800271c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <init_bmi08>:
 *
 *  @return void
 *
 */
static int8_t init_bmi08(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
    int8_t rslt;

    rslt = bmi08xa_init(&bmi08dev);
 800273a:	4843      	ldr	r0, [pc, #268]	; (8002848 <init_bmi08+0x114>)
 800273c:	f7ff fdcc 	bl	80022d8 <bmi08xa_init>
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08xa_init", rslt);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4619      	mov	r1, r3
 800274a:	4840      	ldr	r0, [pc, #256]	; (800284c <init_bmi08+0x118>)
 800274c:	f7ff ff1c 	bl	8002588 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <init_bmi08+0x3a>
    {
        rslt = bmi08g_init(&bmi08dev);
 8002758:	483b      	ldr	r0, [pc, #236]	; (8002848 <init_bmi08+0x114>)
 800275a:	f7ff f99c 	bl	8001a96 <bmi08g_init>
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_init", rslt);
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	4619      	mov	r1, r3
 8002768:	4839      	ldr	r0, [pc, #228]	; (8002850 <init_bmi08+0x11c>)
 800276a:	f7ff ff0d 	bl	8002588 <bmi08_error_codes_print_result>
    }

    if (rslt == BMI08_OK)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <init_bmi08+0x5e>
    {
        printf("Uploading config file !\n");
 8002776:	4837      	ldr	r0, [pc, #220]	; (8002854 <init_bmi08+0x120>)
 8002778:	f004 fa6e 	bl	8006c58 <puts>
        rslt = bmi08a_load_config_file(&bmi08dev);
 800277c:	4832      	ldr	r0, [pc, #200]	; (8002848 <init_bmi08+0x114>)
 800277e:	f7fe fc45 	bl	800100c <bmi08a_load_config_file>
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08a_load_config_file", rslt);
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	4619      	mov	r1, r3
 800278c:	4832      	ldr	r0, [pc, #200]	; (8002858 <init_bmi08+0x124>)
 800278e:	f7ff fefb 	bl	8002588 <bmi08_error_codes_print_result>
    }

    if (rslt == BMI08_OK)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d14f      	bne.n	800283a <init_bmi08+0x106>
    {
        bmi08dev.accel_cfg.odr = BMI08_ACCEL_ODR_1600_HZ;
 800279a:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <init_bmi08+0x114>)
 800279c:	220c      	movs	r2, #12
 800279e:	749a      	strb	r2, [r3, #18]

        if (bmi08dev.variant == BMI085_VARIANT)
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <init_bmi08+0x114>)
 80027a2:	7b5b      	ldrb	r3, [r3, #13]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <init_bmi08+0x7c>
        {
            bmi08dev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <init_bmi08+0x114>)
 80027aa:	2203      	movs	r2, #3
 80027ac:	741a      	strb	r2, [r3, #16]
 80027ae:	e006      	b.n	80027be <init_bmi08+0x8a>
        }
        else if (bmi08dev.variant == BMI088_VARIANT)
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <init_bmi08+0x114>)
 80027b2:	7b5b      	ldrb	r3, [r3, #13]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <init_bmi08+0x8a>
        {
            bmi08dev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <init_bmi08+0x114>)
 80027ba:	2203      	movs	r2, #3
 80027bc:	741a      	strb	r2, [r3, #16]
        }

        bmi08dev.accel_cfg.power = BMI08_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <init_bmi08+0x114>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	73da      	strb	r2, [r3, #15]
        bmi08dev.accel_cfg.bw = BMI08_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <init_bmi08+0x114>)
 80027c6:	220a      	movs	r2, #10
 80027c8:	745a      	strb	r2, [r3, #17]

        rslt = bmi08a_set_power_mode(&bmi08dev);
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <init_bmi08+0x114>)
 80027cc:	f7fe fd5a 	bl	8001284 <bmi08a_set_power_mode>
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08a_set_power_mode", rslt);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4619      	mov	r1, r3
 80027da:	4820      	ldr	r0, [pc, #128]	; (800285c <init_bmi08+0x128>)
 80027dc:	f7ff fed4 	bl	8002588 <bmi08_error_codes_print_result>

        rslt = bmi08xa_set_meas_conf(&bmi08dev);
 80027e0:	4819      	ldr	r0, [pc, #100]	; (8002848 <init_bmi08+0x114>)
 80027e2:	f7ff fda5 	bl	8002330 <bmi08xa_set_meas_conf>
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08xa_set_meas_conf", rslt);
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	4619      	mov	r1, r3
 80027f0:	481b      	ldr	r0, [pc, #108]	; (8002860 <init_bmi08+0x12c>)
 80027f2:	f7ff fec9 	bl	8002588 <bmi08_error_codes_print_result>

        bmi08dev.gyro_cfg.odr = BMI08_GYRO_BW_230_ODR_2000_HZ;
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <init_bmi08+0x114>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	759a      	strb	r2, [r3, #22]
        bmi08dev.gyro_cfg.range = BMI08_GYRO_RANGE_250_DPS;
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <init_bmi08+0x114>)
 80027fe:	2203      	movs	r2, #3
 8002800:	751a      	strb	r2, [r3, #20]
        bmi08dev.gyro_cfg.bw = BMI08_GYRO_BW_230_ODR_2000_HZ;
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <init_bmi08+0x114>)
 8002804:	2201      	movs	r2, #1
 8002806:	755a      	strb	r2, [r3, #21]
        bmi08dev.gyro_cfg.power = BMI08_GYRO_PM_NORMAL;
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <init_bmi08+0x114>)
 800280a:	2200      	movs	r2, #0
 800280c:	74da      	strb	r2, [r3, #19]

        rslt = bmi08g_set_power_mode(&bmi08dev);
 800280e:	480e      	ldr	r0, [pc, #56]	; (8002848 <init_bmi08+0x114>)
 8002810:	f7ff fa6e 	bl	8001cf0 <bmi08g_set_power_mode>
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_power_mode", rslt);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4619      	mov	r1, r3
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <init_bmi08+0x130>)
 8002820:	f7ff feb2 	bl	8002588 <bmi08_error_codes_print_result>

        rslt = bmi08g_set_meas_conf(&bmi08dev);
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <init_bmi08+0x114>)
 8002826:	f7ff f9d9 	bl	8001bdc <bmi08g_set_meas_conf>
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <init_bmi08+0x134>)
 8002836:	f7ff fea7 	bl	8002588 <bmi08_error_codes_print_result>
    }

    return rslt;
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200002dc 	.word	0x200002dc
 800284c:	08009d9c 	.word	0x08009d9c
 8002850:	08009dac 	.word	0x08009dac
 8002854:	08009db8 	.word	0x08009db8
 8002858:	08009dd0 	.word	0x08009dd0
 800285c:	08009de8 	.word	0x08009de8
 8002860:	08009e00 	.word	0x08009e00
 8002864:	08009e18 	.word	0x08009e18
 8002868:	08009e30 	.word	0x08009e30

0800286c <enable_bmi08_interrupt>:
 *
 *  @return void
 *
 */
static int8_t enable_bmi08_interrupt()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
    int8_t rslt;
    uint8_t data = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	71bb      	strb	r3, [r7, #6]

    /* Set accel interrupt pin configuration */
    accel_int_config.int_channel = BMI08_INT_CHANNEL_1;
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
    accel_int_config.int_type = BMI08_ACCEL_INT_DATA_RDY;
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 800287e:	2200      	movs	r2, #0
 8002880:	705a      	strb	r2, [r3, #1]
    accel_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 8002884:	2200      	movs	r2, #0
 8002886:	70da      	strb	r2, [r3, #3]
    accel_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 800288a:	2201      	movs	r2, #1
 800288c:	709a      	strb	r2, [r3, #2]
    accel_int_config.int_pin_cfg.enable_int_pin = BMI08_ENABLE;
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 8002890:	2201      	movs	r2, #1
 8002892:	711a      	strb	r2, [r3, #4]

    /* Enable accel data ready interrupt channel */
    rslt = bmi08a_set_int_config((const struct bmi08_accel_int_channel_cfg*)&accel_int_config, &bmi08dev);
 8002894:	4920      	ldr	r1, [pc, #128]	; (8002918 <enable_bmi08_interrupt+0xac>)
 8002896:	481f      	ldr	r0, [pc, #124]	; (8002914 <enable_bmi08_interrupt+0xa8>)
 8002898:	f7fe fda4 	bl	80013e4 <bmi08a_set_int_config>
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08a_set_int_config", rslt);
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4619      	mov	r1, r3
 80028a6:	481d      	ldr	r0, [pc, #116]	; (800291c <enable_bmi08_interrupt+0xb0>)
 80028a8:	f7ff fe6e 	bl	8002588 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d128      	bne.n	8002906 <enable_bmi08_interrupt+0x9a>
    {
        /* Set gyro interrupt pin configuration */
        gyro_int_config.int_channel = BMI08_INT_CHANNEL_3;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
        gyro_int_config.int_type = BMI08_GYRO_INT_DATA_RDY;
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	705a      	strb	r2, [r3, #1]
        gyro_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	70da      	strb	r2, [r3, #3]
        gyro_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	709a      	strb	r2, [r3, #2]
        gyro_int_config.int_pin_cfg.enable_int_pin = BMI08_ENABLE;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	711a      	strb	r2, [r3, #4]

        /* Enable gyro data ready interrupt channel */
        rslt = bmi08g_set_int_config((const struct bmi08_gyro_int_channel_cfg *)&gyro_int_config, &bmi08dev);
 80028d2:	4911      	ldr	r1, [pc, #68]	; (8002918 <enable_bmi08_interrupt+0xac>)
 80028d4:	4812      	ldr	r0, [pc, #72]	; (8002920 <enable_bmi08_interrupt+0xb4>)
 80028d6:	f7ff fab2 	bl	8001e3e <bmi08g_set_int_config>
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_int_config", rslt);
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	4619      	mov	r1, r3
 80028e4:	480f      	ldr	r0, [pc, #60]	; (8002924 <enable_bmi08_interrupt+0xb8>)
 80028e6:	f7ff fe4f 	bl	8002588 <bmi08_error_codes_print_result>

        rslt = bmi08g_get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data, 1, &bmi08dev);
 80028ea:	1db9      	adds	r1, r7, #6
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <enable_bmi08_interrupt+0xac>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	2018      	movs	r0, #24
 80028f2:	f7ff f8fe 	bl	8001af2 <bmi08g_get_regs>
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_get_regs", rslt);
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	4619      	mov	r1, r3
 8002900:	4809      	ldr	r0, [pc, #36]	; (8002928 <enable_bmi08_interrupt+0xbc>)
 8002902:	f7ff fe41 	bl	8002588 <bmi08_error_codes_print_result>
    }

    return rslt;
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000324 	.word	0x20000324
 8002918:	200002dc 	.word	0x200002dc
 800291c:	08009e48 	.word	0x08009e48
 8002920:	2000032c 	.word	0x2000032c
 8002924:	08009e60 	.word	0x08009e60
 8002928:	08009e78 	.word	0x08009e78

0800292c <disable_bmi08_interrupt>:
 *
 *  @return void
 *
 */
static int8_t disable_bmi08_interrupt()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
    int8_t rslt;

    /* Set accel interrupt pin configuration */
    accel_int_config.int_channel = BMI08_INT_CHANNEL_1;
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    accel_int_config.int_type = BMI08_ACCEL_INT_DATA_RDY;
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 800293a:	2200      	movs	r2, #0
 800293c:	705a      	strb	r2, [r3, #1]
    accel_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 8002940:	2200      	movs	r2, #0
 8002942:	70da      	strb	r2, [r3, #3]
    accel_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 8002946:	2201      	movs	r2, #1
 8002948:	709a      	strb	r2, [r3, #2]
    accel_int_config.int_pin_cfg.enable_int_pin = BMI08_DISABLE;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 800294c:	2200      	movs	r2, #0
 800294e:	711a      	strb	r2, [r3, #4]

    /* Disable accel data ready interrupt channel */
    rslt = bmi08a_set_int_config((const struct bmi08_accel_int_channel_cfg*)&accel_int_config, &bmi08dev);
 8002950:	4919      	ldr	r1, [pc, #100]	; (80029b8 <disable_bmi08_interrupt+0x8c>)
 8002952:	4818      	ldr	r0, [pc, #96]	; (80029b4 <disable_bmi08_interrupt+0x88>)
 8002954:	f7fe fd46 	bl	80013e4 <bmi08a_set_int_config>
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08a_set_int_config", rslt);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4619      	mov	r1, r3
 8002962:	4816      	ldr	r0, [pc, #88]	; (80029bc <disable_bmi08_interrupt+0x90>)
 8002964:	f7ff fe10 	bl	8002588 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11a      	bne.n	80029a6 <disable_bmi08_interrupt+0x7a>
    {
        /* Set gyro interrupt pin configuration */
        gyro_int_config.int_channel = BMI08_INT_CHANNEL_3;
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
        gyro_int_config.int_type = BMI08_GYRO_INT_DATA_RDY;
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 8002978:	2200      	movs	r2, #0
 800297a:	705a      	strb	r2, [r3, #1]
        gyro_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 800297e:	2200      	movs	r2, #0
 8002980:	70da      	strb	r2, [r3, #3]
        gyro_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 8002984:	2201      	movs	r2, #1
 8002986:	709a      	strb	r2, [r3, #2]
        gyro_int_config.int_pin_cfg.enable_int_pin = BMI08_DISABLE;
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 800298a:	2200      	movs	r2, #0
 800298c:	711a      	strb	r2, [r3, #4]

        /* Disable gyro data ready interrupt channel */
        rslt = bmi08g_set_int_config((const struct bmi08_gyro_int_channel_cfg *)&gyro_int_config, &bmi08dev);
 800298e:	490a      	ldr	r1, [pc, #40]	; (80029b8 <disable_bmi08_interrupt+0x8c>)
 8002990:	480b      	ldr	r0, [pc, #44]	; (80029c0 <disable_bmi08_interrupt+0x94>)
 8002992:	f7ff fa54 	bl	8001e3e <bmi08g_set_int_config>
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_int_config", rslt);
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	4619      	mov	r1, r3
 80029a0:	4808      	ldr	r0, [pc, #32]	; (80029c4 <disable_bmi08_interrupt+0x98>)
 80029a2:	f7ff fdf1 	bl	8002588 <bmi08_error_codes_print_result>
    }

    return rslt;
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000324 	.word	0x20000324
 80029b8:	200002dc 	.word	0x200002dc
 80029bc:	08009e48 	.word	0x08009e48
 80029c0:	2000032c 	.word	0x2000032c
 80029c4:	08009e60 	.word	0x08009e60

080029c8 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
 80029d2:	460b      	mov	r3, r1
 80029d4:	717b      	strb	r3, [r7, #5]
 80029d6:	4613      	mov	r3, r2
 80029d8:	713b      	strb	r3, [r7, #4]
    double power = 2;
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80029e6:	793b      	ldrb	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fdab 	bl	8000544 <__aeabi_ui2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	ec43 2b11 	vmov	d1, r2, r3
 80029f6:	ed97 0b04 	vldr	d0, [r7, #16]
 80029fa:	f006 f9df 	bl	8008dbc <pow>
 80029fe:	ec51 0b10 	vmov	r0, r1, d0
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a0a:	f7fd ff3f 	bl	800088c <__aeabi_ddiv>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f8e7 	bl	8000be8 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a58 <lsb_to_mps2+0x90>
 8002a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	411ce80a 	.word	0x411ce80a

08002a5c <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	ed87 0a00 	vstr	s0, [r7]
 8002a68:	460a      	mov	r2, r1
 8002a6a:	80fb      	strh	r3, [r7, #6]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a78:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002a7c:	797b      	ldrb	r3, [r7, #5]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd60 	bl	8000544 <__aeabi_ui2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	ec43 2b11 	vmov	d1, r2, r3
 8002a8c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002a90:	f006 f994 	bl	8008dbc <pow>
 8002a94:	ec51 0b10 	vmov	r0, r1, d0
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aa0:	f7fd fef4 	bl	800088c <__aeabi_ddiv>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f89c 	bl	8000be8 <__aeabi_d2f>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002ab4:	edd7 6a00 	vldr	s13, [r7]
 8002ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae0:	b091      	sub	sp, #68	; 0x44
 8002ae2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae4:	f000 fd36 	bl	8003554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae8:	f000 f9a6 	bl	8002e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aec:	f000 fab8 	bl	8003060 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002af0:	f000 fa8c 	bl	800300c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002af4:	f000 fa0c 	bl	8002f10 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002af8:	f000 fa38 	bl	8002f6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int8_t rslt;

    uint8_t times_to_read = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77bb      	strb	r3, [r7, #30]
    float x = 0.0, y = 0.0, z = 0.0;
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
    uint8_t status = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
     *           For SPI : BMI08_SPI_INTF
     * Sensor variant given as parameter
     *          For BMI085 : BMI085_VARIANT
     *          For BMI088 : BMI088_VARIANT
     */
    rslt = bmi08_interface_init(&bmi08dev, BMI08_I2C_INTF, BMI088_VARIANT);
 8002b16:	2201      	movs	r2, #1
 8002b18:	2100      	movs	r1, #0
 8002b1a:	48b2      	ldr	r0, [pc, #712]	; (8002de4 <main+0x308>)
 8002b1c:	f7ff fcea 	bl	80024f4 <bmi08_interface_init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	77fb      	strb	r3, [r7, #31]
    bmi08_error_codes_print_result("bmi08_interface_init", rslt);
 8002b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	48af      	ldr	r0, [pc, #700]	; (8002de8 <main+0x30c>)
 8002b2c:	f7ff fd2c 	bl	8002588 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 814b 	bne.w	8002dd0 <main+0x2f4>
    {
        rslt = init_bmi08();
 8002b3a:	f7ff fdfb 	bl	8002734 <init_bmi08>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("init_bmi08", rslt);
 8002b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b46:	4619      	mov	r1, r3
 8002b48:	48a8      	ldr	r0, [pc, #672]	; (8002dec <main+0x310>)
 8002b4a:	f7ff fd1d 	bl	8002588 <bmi08_error_codes_print_result>

        /* Enable data ready interrupts */
        rslt = enable_bmi08_interrupt();
 8002b4e:	f7ff fe8d 	bl	800286c <enable_bmi08_interrupt>
 8002b52:	4603      	mov	r3, r0
 8002b54:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("enable_bmi08_interrupt", rslt);
 8002b56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	48a4      	ldr	r0, [pc, #656]	; (8002df0 <main+0x314>)
 8002b5e:	f7ff fd13 	bl	8002588 <bmi08_error_codes_print_result>

        if (rslt == BMI08_OK)
 8002b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8128 	bne.w	8002dbc <main+0x2e0>
        {
            if (bmi08dev.accel_cfg.power == BMI08_ACCEL_PM_ACTIVE)
 8002b6c:	4b9d      	ldr	r3, [pc, #628]	; (8002de4 <main+0x308>)
 8002b6e:	7bdb      	ldrb	r3, [r3, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 80a1 	bne.w	8002cb8 <main+0x1dc>
            {
                printf("\nACCEL DATA\n");
 8002b76:	489f      	ldr	r0, [pc, #636]	; (8002df4 <main+0x318>)
 8002b78:	f004 f86e 	bl	8006c58 <puts>
                printf("Accel data in LSB units and Gravity data in m/s^2\n");
 8002b7c:	489e      	ldr	r0, [pc, #632]	; (8002df8 <main+0x31c>)
 8002b7e:	f004 f86b 	bl	8006c58 <puts>
                printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n");
 8002b82:	489e      	ldr	r0, [pc, #632]	; (8002dfc <main+0x320>)
 8002b84:	f004 f868 	bl	8006c58 <puts>

                printf("Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n");
 8002b88:	489d      	ldr	r0, [pc, #628]	; (8002e00 <main+0x324>)
 8002b8a:	f004 f865 	bl	8006c58 <puts>

                while (times_to_read < 10)
 8002b8e:	e08f      	b.n	8002cb0 <main+0x1d4>
                {
                    rslt = bmi08a_get_data_int_status(&status, &bmi08dev);
 8002b90:	f107 030f 	add.w	r3, r7, #15
 8002b94:	4993      	ldr	r1, [pc, #588]	; (8002de4 <main+0x308>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fc76 	bl	8001488 <bmi08a_get_data_int_status>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	77fb      	strb	r3, [r7, #31]
                    bmi08_error_codes_print_result("bmi08a_get_data_int_status", rslt);
 8002ba0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4897      	ldr	r0, [pc, #604]	; (8002e04 <main+0x328>)
 8002ba8:	f7ff fcee 	bl	8002588 <bmi08_error_codes_print_result>

                    if (status & BMI08_ACCEL_DATA_READY_INT)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da7d      	bge.n	8002cb0 <main+0x1d4>
                    {
                        rslt = bmi08a_get_data(&bmi08_accel, &bmi08dev);
 8002bb4:	498b      	ldr	r1, [pc, #556]	; (8002de4 <main+0x308>)
 8002bb6:	4894      	ldr	r0, [pc, #592]	; (8002e08 <main+0x32c>)
 8002bb8:	f7fe fbbd 	bl	8001336 <bmi08a_get_data>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	77fb      	strb	r3, [r7, #31]
                        bmi08_error_codes_print_result("bmi08a_get_data", rslt);
 8002bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4891      	ldr	r0, [pc, #580]	; (8002e0c <main+0x330>)
 8002bc8:	f7ff fcde 	bl	8002588 <bmi08_error_codes_print_result>

                        if (bmi08dev.variant == BMI085_VARIANT)
 8002bcc:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <main+0x308>)
 8002bce:	7b5b      	ldrb	r3, [r3, #13]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11e      	bne.n	8002c12 <main+0x136>
                        {
                            /* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
                            x = lsb_to_mps2(bmi08_accel.x, 16, 16);
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <main+0x32c>)
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	2110      	movs	r1, #16
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fef2 	bl	80029c8 <lsb_to_mps2>
 8002be4:	ed87 0a06 	vstr	s0, [r7, #24]
                            y = lsb_to_mps2(bmi08_accel.y, 16, 16);
 8002be8:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <main+0x32c>)
 8002bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fee8 	bl	80029c8 <lsb_to_mps2>
 8002bf8:	ed87 0a05 	vstr	s0, [r7, #20]
                            z = lsb_to_mps2(bmi08_accel.z, 16, 16);
 8002bfc:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <main+0x32c>)
 8002bfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c02:	2210      	movs	r2, #16
 8002c04:	2110      	movs	r1, #16
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fede 	bl	80029c8 <lsb_to_mps2>
 8002c0c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c10:	e021      	b.n	8002c56 <main+0x17a>
                        }
                        else if (bmi08dev.variant == BMI088_VARIANT)
 8002c12:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <main+0x308>)
 8002c14:	7b5b      	ldrb	r3, [r3, #13]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d11d      	bne.n	8002c56 <main+0x17a>
                        {
                            /* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
                            x = lsb_to_mps2(bmi08_accel.x, 24, 16);
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <main+0x32c>)
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	2210      	movs	r2, #16
 8002c22:	2118      	movs	r1, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fecf 	bl	80029c8 <lsb_to_mps2>
 8002c2a:	ed87 0a06 	vstr	s0, [r7, #24]
                            y = lsb_to_mps2(bmi08_accel.y, 24, 16);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <main+0x32c>)
 8002c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c34:	2210      	movs	r2, #16
 8002c36:	2118      	movs	r1, #24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fec5 	bl	80029c8 <lsb_to_mps2>
 8002c3e:	ed87 0a05 	vstr	s0, [r7, #20]
                            z = lsb_to_mps2(bmi08_accel.z, 24, 16);
 8002c42:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <main+0x32c>)
 8002c44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	2118      	movs	r1, #24
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff febb 	bl	80029c8 <lsb_to_mps2>
 8002c52:	ed87 0a04 	vstr	s0, [r7, #16]
                        }

                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002c56:	7fbe      	ldrb	r6, [r7, #30]
                               times_to_read,
                               bmi08_accel.x,
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <main+0x32c>)
 8002c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002c5e:	469a      	mov	sl, r3
                               bmi08_accel.y,
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <main+0x32c>)
 8002c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002c66:	469b      	mov	fp, r3
                               bmi08_accel.z,
 8002c68:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <main+0x32c>)
 8002c6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	69b8      	ldr	r0, [r7, #24]
 8002c72:	f7fd fc89 	bl	8000588 <__aeabi_f2d>
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7fd fc84 	bl	8000588 <__aeabi_f2d>
 8002c80:	4680      	mov	r8, r0
 8002c82:	4689      	mov	r9, r1
 8002c84:	6938      	ldr	r0, [r7, #16]
 8002c86:	f7fd fc7f 	bl	8000588 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c92:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002c96:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	465b      	mov	r3, fp
 8002ca0:	4652      	mov	r2, sl
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	485a      	ldr	r0, [pc, #360]	; (8002e10 <main+0x334>)
 8002ca6:	f003 ff51 	bl	8006b4c <iprintf>
                               x,
                               y,
                               z);

                        times_to_read = times_to_read + 1;
 8002caa:	7fbb      	ldrb	r3, [r7, #30]
 8002cac:	3301      	adds	r3, #1
 8002cae:	77bb      	strb	r3, [r7, #30]
                while (times_to_read < 10)
 8002cb0:	7fbb      	ldrb	r3, [r7, #30]
 8002cb2:	2b09      	cmp	r3, #9
 8002cb4:	f67f af6c 	bls.w	8002b90 <main+0xb4>
                    }
                }
            }

            if (bmi08dev.gyro_cfg.power == BMI08_GYRO_PM_NORMAL)
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <main+0x308>)
 8002cba:	7cdb      	ldrb	r3, [r3, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d17d      	bne.n	8002dbc <main+0x2e0>
            {
                times_to_read = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77bb      	strb	r3, [r7, #30]

                printf("\n\nGYRO DATA\n");
 8002cc4:	4853      	ldr	r0, [pc, #332]	; (8002e14 <main+0x338>)
 8002cc6:	f003 ffc7 	bl	8006c58 <puts>
                printf("Gyro data in LSB units and degrees per second\n");
 8002cca:	4853      	ldr	r0, [pc, #332]	; (8002e18 <main+0x33c>)
 8002ccc:	f003 ffc4 	bl	8006c58 <puts>
                printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n");
 8002cd0:	4852      	ldr	r0, [pc, #328]	; (8002e1c <main+0x340>)
 8002cd2:	f003 ffc1 	bl	8006c58 <puts>

                printf("Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n");
 8002cd6:	4852      	ldr	r0, [pc, #328]	; (8002e20 <main+0x344>)
 8002cd8:	f003 ffbe 	bl	8006c58 <puts>

                while (times_to_read < 10)
 8002cdc:	e06b      	b.n	8002db6 <main+0x2da>
                {
                    rslt = bmi08g_get_data_int_status(&status, &bmi08dev);
 8002cde:	f107 030f 	add.w	r3, r7, #15
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <main+0x308>)
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f8df 	bl	8001ea8 <bmi08g_get_data_int_status>
 8002cea:	4603      	mov	r3, r0
 8002cec:	77fb      	strb	r3, [r7, #31]
                    bmi08_error_codes_print_result("bmi08g_get_data_int_status", rslt);
 8002cee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	484b      	ldr	r0, [pc, #300]	; (8002e24 <main+0x348>)
 8002cf6:	f7ff fc47 	bl	8002588 <bmi08_error_codes_print_result>

                    if (status & BMI08_GYRO_DATA_READY_INT)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da59      	bge.n	8002db6 <main+0x2da>
                    {
                        rslt = bmi08g_get_data(&bmi08_gyro, &bmi08dev);
 8002d02:	4938      	ldr	r1, [pc, #224]	; (8002de4 <main+0x308>)
 8002d04:	4848      	ldr	r0, [pc, #288]	; (8002e28 <main+0x34c>)
 8002d06:	f7ff f843 	bl	8001d90 <bmi08g_get_data>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	77fb      	strb	r3, [r7, #31]
                        bmi08_error_codes_print_result("bmi08g_get_data", rslt);
 8002d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4845      	ldr	r0, [pc, #276]	; (8002e2c <main+0x350>)
 8002d16:	f7ff fc37 	bl	8002588 <bmi08_error_codes_print_result>

                        /* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
                        x = lsb_to_dps(bmi08_gyro.x, (float)250, 16);
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <main+0x34c>)
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	2110      	movs	r1, #16
 8002d22:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002e30 <main+0x354>
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fe98 	bl	8002a5c <lsb_to_dps>
 8002d2c:	ed87 0a06 	vstr	s0, [r7, #24]
                        y = lsb_to_dps(bmi08_gyro.y, (float)250, 16);
 8002d30:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <main+0x34c>)
 8002d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d36:	2110      	movs	r1, #16
 8002d38:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002e30 <main+0x354>
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fe8d 	bl	8002a5c <lsb_to_dps>
 8002d42:	ed87 0a05 	vstr	s0, [r7, #20]
                        z = lsb_to_dps(bmi08_gyro.z, (float)250, 16);
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <main+0x34c>)
 8002d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002e30 <main+0x354>
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe82 	bl	8002a5c <lsb_to_dps>
 8002d58:	ed87 0a04 	vstr	s0, [r7, #16]

                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002d5c:	7fbe      	ldrb	r6, [r7, #30]
                               times_to_read,
                               bmi08_gyro.x,
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <main+0x34c>)
 8002d60:	f9b3 3000 	ldrsh.w	r3, [r3]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002d64:	469a      	mov	sl, r3
                               bmi08_gyro.y,
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <main+0x34c>)
 8002d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002d6c:	469b      	mov	fp, r3
                               bmi08_gyro.z,
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <main+0x34c>)
 8002d70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	69b8      	ldr	r0, [r7, #24]
 8002d78:	f7fd fc06 	bl	8000588 <__aeabi_f2d>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	460d      	mov	r5, r1
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7fd fc01 	bl	8000588 <__aeabi_f2d>
 8002d86:	4680      	mov	r8, r0
 8002d88:	4689      	mov	r9, r1
 8002d8a:	6938      	ldr	r0, [r7, #16]
 8002d8c:	f7fd fbfc 	bl	8000588 <__aeabi_f2d>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d98:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002d9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	465b      	mov	r3, fp
 8002da6:	4652      	mov	r2, sl
 8002da8:	4631      	mov	r1, r6
 8002daa:	4819      	ldr	r0, [pc, #100]	; (8002e10 <main+0x334>)
 8002dac:	f003 fece 	bl	8006b4c <iprintf>
                               x,
                               y,
                               z);

                        times_to_read = times_to_read + 1;
 8002db0:	7fbb      	ldrb	r3, [r7, #30]
 8002db2:	3301      	adds	r3, #1
 8002db4:	77bb      	strb	r3, [r7, #30]
                while (times_to_read < 10)
 8002db6:	7fbb      	ldrb	r3, [r7, #30]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d990      	bls.n	8002cde <main+0x202>
                }
            }
        }

        /* Disable data ready interrupts */
        rslt = disable_bmi08_interrupt();
 8002dbc:	f7ff fdb6 	bl	800292c <disable_bmi08_interrupt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("disable_bmi08_interrupt", rslt);
 8002dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	481a      	ldr	r0, [pc, #104]	; (8002e34 <main+0x358>)
 8002dcc:	f7ff fbdc 	bl	8002588 <bmi08_error_codes_print_result>
    }

    bmi08_coines_deinit();
 8002dd0:	f7ff fc82 	bl	80026d8 <bmi08_coines_deinit>

    return rslt;
 8002dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3724      	adds	r7, #36	; 0x24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de2:	bf00      	nop
 8002de4:	200002dc 	.word	0x200002dc
 8002de8:	08009e88 	.word	0x08009e88
 8002dec:	08009ea0 	.word	0x08009ea0
 8002df0:	08009eac 	.word	0x08009eac
 8002df4:	08009ec4 	.word	0x08009ec4
 8002df8:	08009ed0 	.word	0x08009ed0
 8002dfc:	08009f04 	.word	0x08009f04
 8002e00:	08009f3c 	.word	0x08009f3c
 8002e04:	08009f8c 	.word	0x08009f8c
 8002e08:	20000314 	.word	0x20000314
 8002e0c:	08009fa8 	.word	0x08009fa8
 8002e10:	08009fb8 	.word	0x08009fb8
 8002e14:	08009fe0 	.word	0x08009fe0
 8002e18:	08009fec 	.word	0x08009fec
 8002e1c:	0800a01c 	.word	0x0800a01c
 8002e20:	0800a050 	.word	0x0800a050
 8002e24:	0800a0a0 	.word	0x0800a0a0
 8002e28:	2000031c 	.word	0x2000031c
 8002e2c:	0800a0bc 	.word	0x0800a0bc
 8002e30:	437a0000 	.word	0x437a0000
 8002e34:	0800a0cc 	.word	0x0800a0cc

08002e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b094      	sub	sp, #80	; 0x50
 8002e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	2234      	movs	r2, #52	; 0x34
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fa0e 	bl	8006268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <SystemClock_Config+0xd0>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <SystemClock_Config+0xd0>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <SystemClock_Config+0xd0>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <SystemClock_Config+0xd4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e84:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <SystemClock_Config+0xd4>)
 8002e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <SystemClock_Config+0xd4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002eac:	2308      	movs	r3, #8
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002eb0:	2360      	movs	r3, #96	; 0x60
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 f979 	bl	80051bc <HAL_RCC_OscConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ed0:	f000 f950 	bl	8003174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fe19 	bl	8004b28 <HAL_RCC_ClockConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002efc:	f000 f93a 	bl	8003174 <Error_Handler>
  }
}
 8002f00:	bf00      	nop
 8002f02:	3750      	adds	r7, #80	; 0x50
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000

08002f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <MX_I2C1_Init+0x54>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <MX_I2C1_Init+0x58>)
 8002f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f4c:	4804      	ldr	r0, [pc, #16]	; (8002f60 <MX_I2C1_Init+0x50>)
 8002f4e:	f000 fe2b 	bl	8003ba8 <HAL_I2C_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f58:	f000 f90c 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200001fc 	.word	0x200001fc
 8002f64:	40005400 	.word	0x40005400
 8002f68:	000186a0 	.word	0x000186a0

08002f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f80:	463b      	mov	r3, r7
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <MX_TIM1_Init+0x98>)
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <MX_TIM1_Init+0x9c>)
 8002f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <MX_TIM1_Init+0x98>)
 8002f90:	222f      	movs	r2, #47	; 0x2f
 8002f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <MX_TIM1_Init+0x98>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfffe;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_TIM1_Init+0x98>)
 8002f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <MX_TIM1_Init+0x98>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_TIM1_Init+0x98>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_TIM1_Init+0x98>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fb4:	4813      	ldr	r0, [pc, #76]	; (8003004 <MX_TIM1_Init+0x98>)
 8002fb6:	f002 fb9f 	bl	80056f8 <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fc0:	f000 f8d8 	bl	8003174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <MX_TIM1_Init+0x98>)
 8002fd2:	f002 fbe0 	bl	8005796 <HAL_TIM_ConfigClockSource>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fdc:	f000 f8ca 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe8:	463b      	mov	r3, r7
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <MX_TIM1_Init+0x98>)
 8002fee:	f002 fdd3 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ff8:	f000 f8bc 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000250 	.word	0x20000250
 8003008:	40010000 	.word	0x40010000

0800300c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <MX_USART2_UART_Init+0x50>)
 8003014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800301c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003032:	220c      	movs	r2, #12
 8003034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_USART2_UART_Init+0x4c>)
 8003044:	f002 fe24 	bl	8005c90 <HAL_UART_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800304e:	f000 f891 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000298 	.word	0x20000298
 800305c:	40004400 	.word	0x40004400

08003060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <MX_GPIO_Init+0xd0>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <MX_GPIO_Init+0xd0>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <MX_GPIO_Init+0xd0>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <MX_GPIO_Init+0xd0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a25      	ldr	r2, [pc, #148]	; (8003130 <MX_GPIO_Init+0xd0>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_GPIO_Init+0xd0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2120      	movs	r1, #32
 80030ea:	4812      	ldr	r0, [pc, #72]	; (8003134 <MX_GPIO_Init+0xd4>)
 80030ec:	f000 fd42 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	480c      	ldr	r0, [pc, #48]	; (8003138 <MX_GPIO_Init+0xd8>)
 8003108:	f000 fba0 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800310c:	2320      	movs	r3, #32
 800310e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <MX_GPIO_Init+0xd4>)
 8003124:	f000 fb92 	bl	800384c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020800 	.word	0x40020800

0800313c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e009      	b.n	8003162 <_write+0x26>
		ITM_SendChar(*ptr++);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	60ba      	str	r2, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fac5 	bl	80026e6 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	dbf1      	blt.n	800314e <_write+0x12>
	}
	return len;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800317c:	e7fe      	b.n	800317c <Error_Handler+0x8>
	...

08003180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_MspInit+0x4c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <HAL_MspInit+0x4c>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_MspInit+0x4c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_MspInit+0x4c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_MspInit+0x4c>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_MspInit+0x4c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <HAL_I2C_MspInit+0x84>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d12b      	bne.n	800324a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_I2C_MspInit+0x88>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_I2C_MspInit+0x88>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_I2C_MspInit+0x88>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003212:	2312      	movs	r3, #18
 8003214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321a:	2303      	movs	r3, #3
 800321c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800321e:	2304      	movs	r3, #4
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	480c      	ldr	r0, [pc, #48]	; (800325c <HAL_I2C_MspInit+0x8c>)
 800322a:	f000 fb0f 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_I2C_MspInit+0x88>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_I2C_MspInit+0x88>)
 8003238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_I2C_MspInit+0x88>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40005400 	.word	0x40005400
 8003258:	40023800 	.word	0x40023800
 800325c:	40020400 	.word	0x40020400

08003260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_TIM_Base_MspInit+0x3c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10d      	bne.n	800328e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_TIM_Base_MspInit+0x40>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_TIM_Base_MspInit+0x40>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_TIM_Base_MspInit+0x40>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_UART_MspInit+0x84>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d12b      	bne.n	800331e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_UART_MspInit+0x88>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_UART_MspInit+0x88>)
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_UART_MspInit+0x88>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_UART_MspInit+0x88>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_UART_MspInit+0x88>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_UART_MspInit+0x88>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032fe:	230c      	movs	r3, #12
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800330e:	2307      	movs	r3, #7
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <HAL_UART_MspInit+0x8c>)
 800331a:	f000 fa97 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40004400 	.word	0x40004400
 800332c:	40023800 	.word	0x40023800
 8003330:	40020000 	.word	0x40020000

08003334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <NMI_Handler+0x4>

0800333a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <HardFault_Handler+0x4>

08003340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <MemManage_Handler+0x4>

08003346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <BusFault_Handler+0x4>

0800334c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <UsageFault_Handler+0x4>

08003352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003380:	f000 f93a 	bl	80035f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}

08003388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return 1;
 800338c:	2301      	movs	r3, #1
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_kill>:

int _kill(int pid, int sig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033a2:	f002 ff37 	bl	8006214 <__errno>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2216      	movs	r2, #22
 80033aa:	601a      	str	r2, [r3, #0]
  return -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_exit>:

void _exit (int status)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffe7 	bl	8003398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ca:	e7fe      	b.n	80033ca <_exit+0x12>

080033cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00a      	b.n	80033f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033de:	f3af 8000 	nop.w
 80033e2:	4601      	mov	r1, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60ba      	str	r2, [r7, #8]
 80033ea:	b2ca      	uxtb	r2, r1
 80033ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf0      	blt.n	80033de <_read+0x12>
  }

  return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
  return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f002 feb8 	bl	8006214 <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20020000 	.word	0x20020000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	20000334 	.word	0x20000334
 80034d8:	20000350 	.word	0x20000350

080034dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003506:	490e      	ldr	r1, [pc, #56]	; (8003540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800351c:	4c0b      	ldr	r4, [pc, #44]	; (800354c <LoopFillZerobss+0x26>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800352a:	f7ff ffd7 	bl	80034dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352e:	f002 fe77 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003532:	f7ff fad3 	bl	8002adc <main>
  bx  lr    
 8003536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003544:	0800bd18 	.word	0x0800bd18
  ldr r2, =_sbss
 8003548:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800354c:	2000034c 	.word	0x2000034c

08003550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC_IRQHandler>
	...

08003554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_Init+0x40>)
 800355e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_Init+0x40>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_Init+0x40>)
 800356a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_Init+0x40>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_Init+0x40>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800357c:	2003      	movs	r0, #3
 800357e:	f000 f931 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003582:	2000      	movs	r0, #0
 8003584:	f000 f808 	bl	8003598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003588:	f7ff fdfa 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00

08003598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x54>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_InitTick+0x58>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f93b 	bl	8003832 <HAL_SYSTICK_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00e      	b.n	80035e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0f      	cmp	r3, #15
 80035ca:	d80a      	bhi.n	80035e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035cc:	2200      	movs	r2, #0
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f000 f911 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <HAL_InitTick+0x5c>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000008 	.word	0x20000008
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x20>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_IncTick+0x24>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4413      	add	r3, r2
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_IncTick+0x24>)
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008
 800361c:	20000338 	.word	0x20000338

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000338 	.word	0x20000338

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ffee 	bl	8003620 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d005      	beq.n	800365e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_Delay+0x44>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365e:	bf00      	nop
 8003660:	f7ff ffde 	bl	8003620 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d8f7      	bhi.n	8003660 <HAL_Delay+0x28>
  {
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000008 	.word	0x20000008

08003680 <__NVIC_SetPriorityGrouping>:
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_GetPriorityGrouping>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0307 	and.w	r3, r3, #7
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_SetPriority>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff47 	bl	8003680 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff5c 	bl	80036c8 <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff8e 	bl	8003738 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5d 	bl	80036e4 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffb0 	bl	80037a0 <SysTick_Config>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e165      	b.n	8003b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8154 	bne.w	8003b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80ae 	beq.w	8003b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <HAL_GPIO_Init+0x300>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a5c      	ldr	r2, [pc, #368]	; (8003b4c <HAL_GPIO_Init+0x300>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <HAL_GPIO_Init+0x300>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_GPIO_Init+0x304>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	; (8003b54 <HAL_GPIO_Init+0x308>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <HAL_GPIO_Init+0x30c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_Init+0x216>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4d      	ldr	r2, [pc, #308]	; (8003b5c <HAL_GPIO_Init+0x310>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x212>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4c      	ldr	r2, [pc, #304]	; (8003b60 <HAL_GPIO_Init+0x314>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_GPIO_Init+0x318>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x20a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_GPIO_Init+0x31c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x206>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <HAL_GPIO_Init+0x320>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x202>
 8003a4a:	2306      	movs	r3, #6
 8003a4c:	e00c      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e00a      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a52:	2305      	movs	r3, #5
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f ae96 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b90:	e003      	b.n	8003b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	041a      	lsls	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e12b      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fafe 	bl	80031d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f001 f87e 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a81      	ldr	r2, [pc, #516]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d807      	bhi.n	8003c2c <HAL_I2C_Init+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_I2C_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e006      	b.n	8003c3a <HAL_I2C_Init+0x92>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_I2C_Init+0x27c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a78      	ldr	r2, [pc, #480]	; (8003e28 <HAL_I2C_Init+0x280>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9b      	lsrs	r3, r3, #18
 8003c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d802      	bhi.n	8003c7c <HAL_I2C_Init+0xd4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e009      	b.n	8003c90 <HAL_I2C_Init+0xe8>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a69      	ldr	r2, [pc, #420]	; (8003e2c <HAL_I2C_Init+0x284>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	3301      	adds	r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495c      	ldr	r1, [pc, #368]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d819      	bhi.n	8003ce4 <HAL_I2C_Init+0x13c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e59      	subs	r1, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_I2C_Init+0x138>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	e051      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e04f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <HAL_I2C_Init+0x168>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e012      	b.n	8003d36 <HAL_I2C_Init+0x18e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x196>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_I2C_Init+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e58      	subs	r0, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	e00f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	000186a0 	.word	0x000186a0
 8003e20:	001e847f 	.word	0x001e847f
 8003e24:	003d08ff 	.word	0x003d08ff
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	10624dd3 	.word	0x10624dd3

08003e30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	460b      	mov	r3, r1
 8003e44:	813b      	strh	r3, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4a:	f7ff fbe9 	bl	8003620 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	f040 80d9 	bne.w	8004010 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2319      	movs	r3, #25
 8003e64:	2201      	movs	r2, #1
 8003e66:	496d      	ldr	r1, [pc, #436]	; (800401c <HAL_I2C_Mem_Write+0x1ec>)
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fc7f 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0cc      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Mem_Write+0x56>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0c5      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d007      	beq.n	8003eac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_I2C_Mem_Write+0x1f0>)
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eee:	88f8      	ldrh	r0, [r7, #6]
 8003ef0:	893a      	ldrh	r2, [r7, #8]
 8003ef2:	8979      	ldrh	r1, [r7, #10]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fab6 	bl	8004470 <I2C_RequestMemoryWrite>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d052      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e081      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fd00 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06b      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11b      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x180>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1aa      	bne.n	8003f0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fcec 	bl	800499a <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e016      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000

08004024 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
 8004036:	460b      	mov	r3, r1
 8004038:	813b      	strh	r3, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403e:	f7ff faef 	bl	8003620 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b20      	cmp	r3, #32
 800404e:	f040 8208 	bne.w	8004462 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	2319      	movs	r3, #25
 8004058:	2201      	movs	r2, #1
 800405a:	497b      	ldr	r1, [pc, #492]	; (8004248 <HAL_I2C_Mem_Read+0x224>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fb85 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
 800406a:	e1fb      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2C_Mem_Read+0x56>
 8004076:	2302      	movs	r3, #2
 8004078:	e1f4      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d007      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2222      	movs	r2, #34	; 0x22
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_I2C_Mem_Read+0x228>)
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e2:	88f8      	ldrh	r0, [r7, #6]
 80040e4:	893a      	ldrh	r2, [r7, #8]
 80040e6:	8979      	ldrh	r1, [r7, #10]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4603      	mov	r3, r0
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa52 	bl	800459c <I2C_RequestMemoryRead>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1b0      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d113      	bne.n	8004132 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e184      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11b      	bne.n	8004172 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e164      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	2b02      	cmp	r3, #2
 8004178:	d11b      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	e144      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c8:	e138      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	f200 80f1 	bhi.w	80043b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d123      	bne.n	8004224 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fc1b 	bl	8004a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e139      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004222:	e10b      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b02      	cmp	r3, #2
 800422a:	d14e      	bne.n	80042ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	2200      	movs	r2, #0
 8004234:	4906      	ldr	r1, [pc, #24]	; (8004250 <HAL_I2C_Mem_Read+0x22c>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fa98 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e10e      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
 8004246:	bf00      	nop
 8004248:	00100002 	.word	0x00100002
 800424c:	ffff0000 	.word	0xffff0000
 8004250:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c8:	e0b8      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2200      	movs	r2, #0
 80042d2:	4966      	ldr	r1, [pc, #408]	; (800446c <HAL_I2C_Mem_Read+0x448>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fa49 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0bf      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2200      	movs	r2, #0
 800432e:	494f      	ldr	r1, [pc, #316]	; (800446c <HAL_I2C_Mem_Read+0x448>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fa1b 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e091      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b4:	e042      	b.n	800443c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb2e 	bl	8004a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e04c      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d118      	bne.n	800443c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f aec2 	bne.w	80041ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	00010004 	.word	0x00010004

08004470 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	4603      	mov	r3, r0
 8004480:	817b      	strh	r3, [r7, #10]
 8004482:	460b      	mov	r3, r1
 8004484:	813b      	strh	r3, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f960 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d103      	bne.n	80044ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e05f      	b.n	800458e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	492d      	ldr	r1, [pc, #180]	; (8004598 <I2C_RequestMemoryWrite+0x128>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f998 	bl	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e04c      	b.n	800458e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	6a39      	ldr	r1, [r7, #32]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fa02 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b04      	cmp	r3, #4
 8004520:	d107      	bne.n	8004532 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02b      	b.n	800458e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	e021      	b.n	800458c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f9dc 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e005      	b.n	800458e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	00010002 	.word	0x00010002

0800459c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2200      	movs	r2, #0
 80045de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8c2 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d103      	bne.n	8004606 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0aa      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	4952      	ldr	r1, [pc, #328]	; (8004768 <I2C_RequestMemoryRead+0x1cc>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f8fa 	bl	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e097      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f964 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b04      	cmp	r3, #4
 800465c:	d107      	bne.n	800466e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e076      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004678:	893b      	ldrh	r3, [r7, #8]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	611a      	str	r2, [r3, #16]
 8004682:	e021      	b.n	80046c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004684:	893b      	ldrh	r3, [r7, #8]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	b29b      	uxth	r3, r3
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f93e 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d107      	bne.n	80046ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e050      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046be:	893b      	ldrh	r3, [r7, #8]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ca:	6a39      	ldr	r1, [r7, #32]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f923 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d107      	bne.n	80046f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e035      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	2200      	movs	r2, #0
 800470c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f82b 	bl	800476c <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d103      	bne.n	8004734 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e013      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	6a3a      	ldr	r2, [r7, #32]
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <I2C_RequestMemoryRead+0x1cc>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f863 	bl	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	00010002 	.word	0x00010002

0800476c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800477c:	e025      	b.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d021      	beq.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fe ff4b 	bl	8003620 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e023      	b.n	8004812 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10d      	bne.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	43da      	mvns	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	e00c      	b.n	800480a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	43da      	mvns	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d0b6      	beq.n	800477e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004828:	e051      	b.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	d123      	bne.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004848:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004852:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e046      	b.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d021      	beq.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fe fec9 	bl	8003620 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e020      	b.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d10c      	bne.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e00b      	b.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d18d      	bne.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004924:	e02d      	b.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f8ce 	bl	8004ac8 <I2C_IsAcknowledgeFailed>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e02d      	b.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d021      	beq.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe fe6f 	bl	8003620 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d116      	bne.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d1ca      	bne.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a6:	e02d      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f88d 	bl	8004ac8 <I2C_IsAcknowledgeFailed>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e02d      	b.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d021      	beq.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fe fe2e 	bl	8003620 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d1ca      	bne.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a28:	e042      	b.n	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d119      	bne.n	8004a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e029      	b.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fe fdd8 	bl	8003620 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d1b5      	bne.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ade:	d11b      	bne.n	8004b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0cc      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d90c      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b8      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b7c:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a58      	ldr	r2, [pc, #352]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4a52      	ldr	r2, [pc, #328]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	494d      	ldr	r1, [pc, #308]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d044      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d119      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e07f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e06f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e067      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f023 0203 	bic.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4934      	ldr	r1, [pc, #208]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c18:	f7fe fd02 	bl	8003620 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fe fcfe 	bl	8003620 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e04f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 020c 	and.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d1eb      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d20c      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e032      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4916      	ldr	r1, [pc, #88]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cae:	f000 f855 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	490a      	ldr	r1, [pc, #40]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	5ccb      	ldrb	r3, [r1, r3]
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fc62 	bl	8003598 <HAL_InitTick>

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023c00 	.word	0x40023c00
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800b8e4 	.word	0x0800b8e4
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	20000004 	.word	0x20000004

08004cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000

08004d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d10:	f7ff fff0 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	0a9b      	lsrs	r3, r3, #10
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	0800b8f4 	.word	0x0800b8f4

08004d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d38:	f7ff ffdc 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0b5b      	lsrs	r3, r3, #13
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	0800b8f4 	.word	0x0800b8f4

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b0ae      	sub	sp, #184	; 0xb8
 8004d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d82:	4bcb      	ldr	r3, [pc, #812]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	f200 8206 	bhi.w	800519c <HAL_RCC_GetSysClockFreq+0x440>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dcd 	.word	0x08004dcd
 8004d9c:	0800519d 	.word	0x0800519d
 8004da0:	0800519d 	.word	0x0800519d
 8004da4:	0800519d 	.word	0x0800519d
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	0800519d 	.word	0x0800519d
 8004db0:	0800519d 	.word	0x0800519d
 8004db4:	0800519d 	.word	0x0800519d
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	0800519d 	.word	0x0800519d
 8004dc0:	0800519d 	.word	0x0800519d
 8004dc4:	0800519d 	.word	0x0800519d
 8004dc8:	08004fcd 	.word	0x08004fcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4bb9      	ldr	r3, [pc, #740]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004dd2:	e1e7      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd4:	4bb8      	ldr	r3, [pc, #736]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dda:	e1e3      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ddc:	4bb4      	ldr	r3, [pc, #720]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de8:	4bb1      	ldr	r3, [pc, #708]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d071      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df4:	4bae      	ldr	r3, [pc, #696]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	f04f 0000 	mov.w	r0, #0
 8004e22:	f04f 0100 	mov.w	r1, #0
 8004e26:	0159      	lsls	r1, r3, #5
 8004e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e2c:	0150      	lsls	r0, r2, #5
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4621      	mov	r1, r4
 8004e34:	1a51      	subs	r1, r2, r1
 8004e36:	6439      	str	r1, [r7, #64]	; 0x40
 8004e38:	4629      	mov	r1, r5
 8004e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	018b      	lsls	r3, r1, #6
 8004e50:	4641      	mov	r1, r8
 8004e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e56:	4641      	mov	r1, r8
 8004e58:	018a      	lsls	r2, r1, #6
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1a51      	subs	r1, r2, r1
 8004e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e60:	4649      	mov	r1, r9
 8004e62:	eb63 0301 	sbc.w	r3, r3, r1
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004e74:	4649      	mov	r1, r9
 8004e76:	00cb      	lsls	r3, r1, #3
 8004e78:	4641      	mov	r1, r8
 8004e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7e:	4641      	mov	r1, r8
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	4622      	mov	r2, r4
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	462b      	mov	r3, r5
 8004e90:	460a      	mov	r2, r1
 8004e92:	eb42 0303 	adc.w	r3, r2, r3
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	024b      	lsls	r3, r1, #9
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eae:	4621      	mov	r1, r4
 8004eb0:	024a      	lsls	r2, r1, #9
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ec4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ec8:	f7fb fede 	bl	8000c88 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed6:	e067      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed8:	4b75      	ldr	r3, [pc, #468]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	099b      	lsrs	r3, r3, #6
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ee4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ef6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	f04f 0000 	mov.w	r0, #0
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0c:	0150      	lsls	r0, r2, #5
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4621      	mov	r1, r4
 8004f14:	1a51      	subs	r1, r2, r1
 8004f16:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	018b      	lsls	r3, r1, #6
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f36:	4641      	mov	r1, r8
 8004f38:	018a      	lsls	r2, r1, #6
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f40:	4649      	mov	r1, r9
 8004f42:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f5a:	4692      	mov	sl, r2
 8004f5c:	469b      	mov	fp, r3
 8004f5e:	4623      	mov	r3, r4
 8004f60:	eb1a 0303 	adds.w	r3, sl, r3
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	462b      	mov	r3, r5
 8004f68:	eb4b 0303 	adc.w	r3, fp, r3
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f90:	2200      	movs	r2, #0
 8004f92:	673b      	str	r3, [r7, #112]	; 0x70
 8004f94:	677a      	str	r2, [r7, #116]	; 0x74
 8004f96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004f9a:	f7fb fe75 	bl	8000c88 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fca:	e0eb      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fcc:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d06b      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe4:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	2200      	movs	r2, #0
 8004fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005000:	4622      	mov	r2, r4
 8005002:	462b      	mov	r3, r5
 8005004:	f04f 0000 	mov.w	r0, #0
 8005008:	f04f 0100 	mov.w	r1, #0
 800500c:	0159      	lsls	r1, r3, #5
 800500e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005012:	0150      	lsls	r0, r2, #5
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4621      	mov	r1, r4
 800501a:	1a51      	subs	r1, r2, r1
 800501c:	61b9      	str	r1, [r7, #24]
 800501e:	4629      	mov	r1, r5
 8005020:	eb63 0301 	sbc.w	r3, r3, r1
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005032:	4659      	mov	r1, fp
 8005034:	018b      	lsls	r3, r1, #6
 8005036:	4651      	mov	r1, sl
 8005038:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503c:	4651      	mov	r1, sl
 800503e:	018a      	lsls	r2, r1, #6
 8005040:	4651      	mov	r1, sl
 8005042:	ebb2 0801 	subs.w	r8, r2, r1
 8005046:	4659      	mov	r1, fp
 8005048:	eb63 0901 	sbc.w	r9, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005060:	4690      	mov	r8, r2
 8005062:	4699      	mov	r9, r3
 8005064:	4623      	mov	r3, r4
 8005066:	eb18 0303 	adds.w	r3, r8, r3
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	462b      	mov	r3, r5
 800506e:	eb49 0303 	adc.w	r3, r9, r3
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005080:	4629      	mov	r1, r5
 8005082:	024b      	lsls	r3, r1, #9
 8005084:	4621      	mov	r1, r4
 8005086:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800508a:	4621      	mov	r1, r4
 800508c:	024a      	lsls	r2, r1, #9
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005096:	2200      	movs	r2, #0
 8005098:	65bb      	str	r3, [r7, #88]	; 0x58
 800509a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800509c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050a0:	f7fb fdf2 	bl	8000c88 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4613      	mov	r3, r2
 80050aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ae:	e065      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x420>
 80050b0:	40023800 	.word	0x40023800
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050bc:	4b3d      	ldr	r3, [pc, #244]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	2200      	movs	r2, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	4611      	mov	r1, r2
 80050c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050cc:	653b      	str	r3, [r7, #80]	; 0x50
 80050ce:	2300      	movs	r3, #0
 80050d0:	657b      	str	r3, [r7, #84]	; 0x54
 80050d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80050d6:	4642      	mov	r2, r8
 80050d8:	464b      	mov	r3, r9
 80050da:	f04f 0000 	mov.w	r0, #0
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	0159      	lsls	r1, r3, #5
 80050e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e8:	0150      	lsls	r0, r2, #5
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4641      	mov	r1, r8
 80050f0:	1a51      	subs	r1, r2, r1
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	4649      	mov	r1, r9
 80050f6:	eb63 0301 	sbc.w	r3, r3, r1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005108:	4659      	mov	r1, fp
 800510a:	018b      	lsls	r3, r1, #6
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005112:	4651      	mov	r1, sl
 8005114:	018a      	lsls	r2, r1, #6
 8005116:	4651      	mov	r1, sl
 8005118:	1a54      	subs	r4, r2, r1
 800511a:	4659      	mov	r1, fp
 800511c:	eb63 0501 	sbc.w	r5, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	464b      	mov	r3, r9
 800513c:	eb45 0303 	adc.w	r3, r5, r3
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800514e:	4629      	mov	r1, r5
 8005150:	028b      	lsls	r3, r1, #10
 8005152:	4621      	mov	r1, r4
 8005154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005158:	4621      	mov	r1, r4
 800515a:	028a      	lsls	r2, r1, #10
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005164:	2200      	movs	r2, #0
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48
 8005168:	64fa      	str	r2, [r7, #76]	; 0x4c
 800516a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800516e:	f7fb fd8b 	bl	8000c88 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4613      	mov	r3, r2
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0f1b      	lsrs	r3, r3, #28
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800518a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800518e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800519a:	e003      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800519e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	37b8      	adds	r7, #184	; 0xb8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400

080051bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e28d      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8083 	beq.w	80052e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051dc:	4b94      	ldr	r3, [pc, #592]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d019      	beq.n	800521c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051e8:	4b91      	ldr	r3, [pc, #580]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051f4:	4b8e      	ldr	r3, [pc, #568]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005200:	d00c      	beq.n	800521c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d112      	bne.n	8005234 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520e:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521a:	d10b      	bne.n	8005234 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	4b84      	ldr	r3, [pc, #528]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05b      	beq.n	80052e0 <HAL_RCC_OscConfig+0x124>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d157      	bne.n	80052e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e25a      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x90>
 800523e:	4b7c      	ldr	r3, [pc, #496]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a7b      	ldr	r2, [pc, #492]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xcc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0xb4>
 8005256:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a75      	ldr	r2, [pc, #468]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b73      	ldr	r3, [pc, #460]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a72      	ldr	r2, [pc, #456]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xcc>
 8005270:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6e      	ldr	r2, [pc, #440]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b6c      	ldr	r3, [pc, #432]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6b      	ldr	r2, [pc, #428]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fe f9c6 	bl	8003620 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005298:	f7fe f9c2 	bl	8003620 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e21f      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xdc>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fe f9b2 	bl	8003620 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fe f9ae 	bl	8003620 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e20b      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	4b57      	ldr	r3, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x104>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06f      	beq.n	80053ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052ee:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052fa:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005302:	2b08      	cmp	r3, #8
 8005304:	d105      	bne.n	8005312 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005306:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d11c      	bne.n	8005358 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b44      	ldr	r3, [pc, #272]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d116      	bne.n	8005358 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532a:	4b41      	ldr	r3, [pc, #260]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_RCC_OscConfig+0x186>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e1d3      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005342:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4937      	ldr	r1, [pc, #220]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005356:	e03a      	b.n	80053ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <HAL_RCC_OscConfig+0x278>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005366:	f7fe f95b 	bl	8003620 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800536e:	f7fe f957 	bl	8003620 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e1b4      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538c:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4925      	ldr	r1, [pc, #148]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 800539c:	4313      	orrs	r3, r2
 800539e:	600b      	str	r3, [r1, #0]
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x278>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fe f93a 	bl	8003620 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b0:	f7fe f936 	bl	8003620 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e193      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d036      	beq.n	8005448 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fe f91a 	bl	8003620 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fe f916 	bl	8003620 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e173      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x234>
 800540e:	e01b      	b.n	8005448 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCC_OscConfig+0x27c>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fe f903 	bl	8003620 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800541c:	e00e      	b.n	800543c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800541e:	f7fe f8ff 	bl	8003620 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d907      	bls.n	800543c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e15c      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
 8005430:	40023800 	.word	0x40023800
 8005434:	42470000 	.word	0x42470000
 8005438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	4b8a      	ldr	r3, [pc, #552]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ea      	bne.n	800541e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8097 	beq.w	8005584 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b83      	ldr	r3, [pc, #524]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	4b7f      	ldr	r3, [pc, #508]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a7e      	ldr	r2, [pc, #504]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b7c      	ldr	r3, [pc, #496]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005486:	4b79      	ldr	r3, [pc, #484]	; (800566c <HAL_RCC_OscConfig+0x4b0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d118      	bne.n	80054c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005492:	4b76      	ldr	r3, [pc, #472]	; (800566c <HAL_RCC_OscConfig+0x4b0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a75      	ldr	r2, [pc, #468]	; (800566c <HAL_RCC_OscConfig+0x4b0>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549e:	f7fe f8bf 	bl	8003620 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fe f8bb 	bl	8003620 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e118      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	4b6c      	ldr	r3, [pc, #432]	; (800566c <HAL_RCC_OscConfig+0x4b0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x31e>
 80054cc:	4b66      	ldr	r3, [pc, #408]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a65      	ldr	r2, [pc, #404]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	e01c      	b.n	8005514 <HAL_RCC_OscConfig+0x358>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0x340>
 80054e2:	4b61      	ldr	r3, [pc, #388]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a60      	ldr	r2, [pc, #384]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	6713      	str	r3, [r2, #112]	; 0x70
 80054ee:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0x358>
 80054fc:	4b5a      	ldr	r3, [pc, #360]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6713      	str	r3, [r2, #112]	; 0x70
 8005508:	4b57      	ldr	r3, [pc, #348]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a56      	ldr	r2, [pc, #344]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800550e:	f023 0304 	bic.w	r3, r3, #4
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fe f880 	bl	8003620 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005522:	e00a      	b.n	800553a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fe f87c 	bl	8003620 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0d7      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RCC_OscConfig+0x368>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fe f86a 	bl	8003620 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fe f866 	bl	8003620 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0c1      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005566:	4b40      	ldr	r3, [pc, #256]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ee      	bne.n	8005550 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005578:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	4a3a      	ldr	r2, [pc, #232]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 800557e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80ad 	beq.w	80056e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558e:	4b36      	ldr	r3, [pc, #216]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b08      	cmp	r3, #8
 8005598:	d060      	beq.n	800565c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d145      	bne.n	800562e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b33      	ldr	r3, [pc, #204]	; (8005670 <HAL_RCC_OscConfig+0x4b4>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe f83a 	bl	8003620 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fe f836 	bl	8003620 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e093      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	061b      	lsls	r3, r3, #24
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	491b      	ldr	r1, [pc, #108]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_RCC_OscConfig+0x4b4>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fe f80b 	bl	8003620 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560e:	f7fe f807 	bl	8003620 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e064      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x452>
 800562c:	e05c      	b.n	80056e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <HAL_RCC_OscConfig+0x4b4>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd fff4 	bl	8003620 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563c:	f7fd fff0 	bl	8003620 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e04d      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_RCC_OscConfig+0x4ac>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x480>
 800565a:	e045      	b.n	80056e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d107      	bne.n	8005674 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e040      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
 8005668:	40023800 	.word	0x40023800
 800566c:	40007000 	.word	0x40007000
 8005670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005674:	4b1f      	ldr	r3, [pc, #124]	; (80056f4 <HAL_RCC_OscConfig+0x538>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d030      	beq.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d129      	bne.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d122      	bne.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056a4:	4013      	ands	r3, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d119      	bne.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d10f      	bne.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800

080056f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e041      	b.n	800578e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd fd9e 	bl	8003260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 f8f4 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_ConfigClockSource+0x1c>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0b4      	b.n	800591c <HAL_TIM_ConfigClockSource+0x186>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ea:	d03e      	beq.n	800586a <HAL_TIM_ConfigClockSource+0xd4>
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f0:	f200 8087 	bhi.w	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	f000 8086 	beq.w	8005908 <HAL_TIM_ConfigClockSource+0x172>
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	d87f      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 8005802:	2b70      	cmp	r3, #112	; 0x70
 8005804:	d01a      	beq.n	800583c <HAL_TIM_ConfigClockSource+0xa6>
 8005806:	2b70      	cmp	r3, #112	; 0x70
 8005808:	d87b      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 800580a:	2b60      	cmp	r3, #96	; 0x60
 800580c:	d050      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x11a>
 800580e:	2b60      	cmp	r3, #96	; 0x60
 8005810:	d877      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 8005812:	2b50      	cmp	r3, #80	; 0x50
 8005814:	d03c      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0xfa>
 8005816:	2b50      	cmp	r3, #80	; 0x50
 8005818:	d873      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d058      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x13a>
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d86f      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 8005822:	2b30      	cmp	r3, #48	; 0x30
 8005824:	d064      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x15a>
 8005826:	2b30      	cmp	r3, #48	; 0x30
 8005828:	d86b      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 800582a:	2b20      	cmp	r3, #32
 800582c:	d060      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x15a>
 800582e:	2b20      	cmp	r3, #32
 8005830:	d867      	bhi.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d05c      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x15a>
 8005836:	2b10      	cmp	r3, #16
 8005838:	d05a      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x15a>
 800583a:	e062      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6899      	ldr	r1, [r3, #8]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f000 f984 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800585e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
      break;
 8005868:	e04f      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6899      	ldr	r1, [r3, #8]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f000 f96d 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588c:	609a      	str	r2, [r3, #8]
      break;
 800588e:	e03c      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	461a      	mov	r2, r3
 800589e:	f000 f8e1 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2150      	movs	r1, #80	; 0x50
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f93a 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e02c      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	461a      	mov	r2, r3
 80058be:	f000 f900 	bl	8005ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2160      	movs	r1, #96	; 0x60
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f92a 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80058ce:	e01c      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	461a      	mov	r2, r3
 80058de:	f000 f8c1 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2140      	movs	r1, #64	; 0x40
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 f91a 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80058ee:	e00c      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 f911 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 8005900:	e003      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
      break;
 8005906:	e000      	b.n	800590a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3b      	ldr	r2, [pc, #236]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d02b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d027      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d023      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2b      	ldr	r2, [pc, #172]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_Base_SetConfig+0x128>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <TIM_Base_SetConfig+0x12c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <TIM_Base_SetConfig+0x130>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <TIM_Base_SetConfig+0x134>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <TIM_Base_SetConfig+0x138>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <TIM_Base_SetConfig+0x13c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0xf8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d103      	bne.n	8005a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	615a      	str	r2, [r3, #20]
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	40001800 	.word	0x40001800
 8005a5c:	40001c00 	.word	0x40001c00
 8005a60:	40002000 	.word	0x40002000

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0210 	bic.w	r2, r3, #16
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f043 0307 	orr.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e05a      	b.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d022      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfc:	d01d      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d018      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10c      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40001800 	.word	0x40001800

08005c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e03f      	b.n	8005d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fd faf4 	bl	80032a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f829 	bl	8005d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d30:	b0c0      	sub	sp, #256	; 0x100
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	ea40 0301 	orr.w	r3, r0, r1
 8005d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d84:	f021 010c 	bic.w	r1, r1, #12
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d92:	430b      	orrs	r3, r1
 8005d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	6999      	ldr	r1, [r3, #24]
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	ea40 0301 	orr.w	r3, r0, r1
 8005db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b8f      	ldr	r3, [pc, #572]	; (8005ff8 <UART_SetConfig+0x2cc>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d005      	beq.n	8005dcc <UART_SetConfig+0xa0>
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b8d      	ldr	r3, [pc, #564]	; (8005ffc <UART_SetConfig+0x2d0>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d104      	bne.n	8005dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dcc:	f7fe ffb2 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8005dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005dd4:	e003      	b.n	8005dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd6:	f7fe ff99 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8005dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	f040 810c 	bne.w	8006004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	1891      	adds	r1, r2, r2
 8005e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e06:	415b      	adcs	r3, r3
 8005e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e0e:	4621      	mov	r1, r4
 8005e10:	eb12 0801 	adds.w	r8, r2, r1
 8005e14:	4629      	mov	r1, r5
 8005e16:	eb43 0901 	adc.w	r9, r3, r1
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e2e:	4690      	mov	r8, r2
 8005e30:	4699      	mov	r9, r3
 8005e32:	4623      	mov	r3, r4
 8005e34:	eb18 0303 	adds.w	r3, r8, r3
 8005e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	eb49 0303 	adc.w	r3, r9, r3
 8005e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	18db      	adds	r3, r3, r3
 8005e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e60:	4613      	mov	r3, r2
 8005e62:	eb42 0303 	adc.w	r3, r2, r3
 8005e66:	657b      	str	r3, [r7, #84]	; 0x54
 8005e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e70:	f7fa ff0a 	bl	8000c88 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <UART_SetConfig+0x2d4>)
 8005e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	011c      	lsls	r4, r3, #4
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e94:	4642      	mov	r2, r8
 8005e96:	464b      	mov	r3, r9
 8005e98:	1891      	adds	r1, r2, r2
 8005e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e9c:	415b      	adcs	r3, r3
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eaa:	4649      	mov	r1, r9
 8005eac:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec4:	4692      	mov	sl, r2
 8005ec6:	469b      	mov	fp, r3
 8005ec8:	4643      	mov	r3, r8
 8005eca:	eb1a 0303 	adds.w	r3, sl, r3
 8005ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	18db      	adds	r3, r3, r3
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	647b      	str	r3, [r7, #68]	; 0x44
 8005efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f06:	f7fa febf 	bl	8000c88 <__aeabi_uldivmod>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4b3b      	ldr	r3, [pc, #236]	; (8006000 <UART_SetConfig+0x2d4>)
 8005f12:	fba3 2301 	umull	r2, r3, r3, r1
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2264      	movs	r2, #100	; 0x64
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	1acb      	subs	r3, r1, r3
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f26:	4b36      	ldr	r3, [pc, #216]	; (8006000 <UART_SetConfig+0x2d4>)
 8005f28:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f34:	441c      	add	r4, r3
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f50:	415b      	adcs	r3, r3
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f58:	4641      	mov	r1, r8
 8005f5a:	1851      	adds	r1, r2, r1
 8005f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8005f5e:	4649      	mov	r1, r9
 8005f60:	414b      	adcs	r3, r1
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f70:	4659      	mov	r1, fp
 8005f72:	00cb      	lsls	r3, r1, #3
 8005f74:	4651      	mov	r1, sl
 8005f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	00ca      	lsls	r2, r1, #3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	4642      	mov	r2, r8
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	460a      	mov	r2, r1
 8005f90:	eb42 0303 	adc.w	r3, r2, r3
 8005f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fac:	460b      	mov	r3, r1
 8005fae:	18db      	adds	r3, r3, r3
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fc2:	f7fa fe61 	bl	8000c88 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <UART_SetConfig+0x2d4>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	; 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3332      	adds	r3, #50	; 0x32
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <UART_SetConfig+0x2d4>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f003 0207 	and.w	r2, r3, #7
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4422      	add	r2, r4
 8005ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff4:	e105      	b.n	8006202 <UART_SetConfig+0x4d6>
 8005ff6:	bf00      	nop
 8005ff8:	40011000 	.word	0x40011000
 8005ffc:	40011400 	.word	0x40011400
 8006000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006008:	2200      	movs	r2, #0
 800600a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800600e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006016:	4642      	mov	r2, r8
 8006018:	464b      	mov	r3, r9
 800601a:	1891      	adds	r1, r2, r2
 800601c:	6239      	str	r1, [r7, #32]
 800601e:	415b      	adcs	r3, r3
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
 8006022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006026:	4641      	mov	r1, r8
 8006028:	1854      	adds	r4, r2, r1
 800602a:	4649      	mov	r1, r9
 800602c:	eb43 0501 	adc.w	r5, r3, r1
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	00eb      	lsls	r3, r5, #3
 800603a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800603e:	00e2      	lsls	r2, r4, #3
 8006040:	4614      	mov	r4, r2
 8006042:	461d      	mov	r5, r3
 8006044:	4643      	mov	r3, r8
 8006046:	18e3      	adds	r3, r4, r3
 8006048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800604c:	464b      	mov	r3, r9
 800604e:	eb45 0303 	adc.w	r3, r5, r3
 8006052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006072:	4629      	mov	r1, r5
 8006074:	008b      	lsls	r3, r1, #2
 8006076:	4621      	mov	r1, r4
 8006078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800607c:	4621      	mov	r1, r4
 800607e:	008a      	lsls	r2, r1, #2
 8006080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006084:	f7fa fe00 	bl	8000c88 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4b60      	ldr	r3, [pc, #384]	; (8006210 <UART_SetConfig+0x4e4>)
 800608e:	fba3 2302 	umull	r2, r3, r3, r2
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	011c      	lsls	r4, r3, #4
 8006096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609a:	2200      	movs	r2, #0
 800609c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060a8:	4642      	mov	r2, r8
 80060aa:	464b      	mov	r3, r9
 80060ac:	1891      	adds	r1, r2, r2
 80060ae:	61b9      	str	r1, [r7, #24]
 80060b0:	415b      	adcs	r3, r3
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b8:	4641      	mov	r1, r8
 80060ba:	1851      	adds	r1, r2, r1
 80060bc:	6139      	str	r1, [r7, #16]
 80060be:	4649      	mov	r1, r9
 80060c0:	414b      	adcs	r3, r1
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d0:	4659      	mov	r1, fp
 80060d2:	00cb      	lsls	r3, r1, #3
 80060d4:	4651      	mov	r1, sl
 80060d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060da:	4651      	mov	r1, sl
 80060dc:	00ca      	lsls	r2, r1, #3
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	4642      	mov	r2, r8
 80060e6:	189b      	adds	r3, r3, r2
 80060e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ec:	464b      	mov	r3, r9
 80060ee:	460a      	mov	r2, r1
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	67bb      	str	r3, [r7, #120]	; 0x78
 8006102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006110:	4649      	mov	r1, r9
 8006112:	008b      	lsls	r3, r1, #2
 8006114:	4641      	mov	r1, r8
 8006116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611a:	4641      	mov	r1, r8
 800611c:	008a      	lsls	r2, r1, #2
 800611e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006122:	f7fa fdb1 	bl	8000c88 <__aeabi_uldivmod>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4b39      	ldr	r3, [pc, #228]	; (8006210 <UART_SetConfig+0x4e4>)
 800612c:	fba3 1302 	umull	r1, r3, r3, r2
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	2164      	movs	r1, #100	; 0x64
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	3332      	adds	r3, #50	; 0x32
 800613e:	4a34      	ldr	r2, [pc, #208]	; (8006210 <UART_SetConfig+0x4e4>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800614a:	441c      	add	r4, r3
 800614c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006150:	2200      	movs	r2, #0
 8006152:	673b      	str	r3, [r7, #112]	; 0x70
 8006154:	677a      	str	r2, [r7, #116]	; 0x74
 8006156:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800615a:	4642      	mov	r2, r8
 800615c:	464b      	mov	r3, r9
 800615e:	1891      	adds	r1, r2, r2
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	415b      	adcs	r3, r3
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800616a:	4641      	mov	r1, r8
 800616c:	1851      	adds	r1, r2, r1
 800616e:	6039      	str	r1, [r7, #0]
 8006170:	4649      	mov	r1, r9
 8006172:	414b      	adcs	r3, r1
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006182:	4659      	mov	r1, fp
 8006184:	00cb      	lsls	r3, r1, #3
 8006186:	4651      	mov	r1, sl
 8006188:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618c:	4651      	mov	r1, sl
 800618e:	00ca      	lsls	r2, r1, #3
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	4603      	mov	r3, r0
 8006196:	4642      	mov	r2, r8
 8006198:	189b      	adds	r3, r3, r2
 800619a:	66bb      	str	r3, [r7, #104]	; 0x68
 800619c:	464b      	mov	r3, r9
 800619e:	460a      	mov	r2, r1
 80061a0:	eb42 0303 	adc.w	r3, r2, r3
 80061a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	663b      	str	r3, [r7, #96]	; 0x60
 80061b0:	667a      	str	r2, [r7, #100]	; 0x64
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061be:	4649      	mov	r1, r9
 80061c0:	008b      	lsls	r3, r1, #2
 80061c2:	4641      	mov	r1, r8
 80061c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c8:	4641      	mov	r1, r8
 80061ca:	008a      	lsls	r2, r1, #2
 80061cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061d0:	f7fa fd5a 	bl	8000c88 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <UART_SetConfig+0x4e4>)
 80061da:	fba3 1302 	umull	r1, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2164      	movs	r1, #100	; 0x64
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	3332      	adds	r3, #50	; 0x32
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <UART_SetConfig+0x4e4>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4422      	add	r2, r4
 8006200:	609a      	str	r2, [r3, #8]
}
 8006202:	bf00      	nop
 8006204:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620e:	bf00      	nop
 8006210:	51eb851f 	.word	0x51eb851f

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	; (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000000c 	.word	0x2000000c

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4d0d      	ldr	r5, [pc, #52]	; (8006258 <__libc_init_array+0x38>)
 8006224:	4c0d      	ldr	r4, [pc, #52]	; (800625c <__libc_init_array+0x3c>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	2600      	movs	r6, #0
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	4d0b      	ldr	r5, [pc, #44]	; (8006260 <__libc_init_array+0x40>)
 8006232:	4c0c      	ldr	r4, [pc, #48]	; (8006264 <__libc_init_array+0x44>)
 8006234:	f003 fcde 	bl	8009bf4 <_init>
 8006238:	1b64      	subs	r4, r4, r5
 800623a:	10a4      	asrs	r4, r4, #2
 800623c:	2600      	movs	r6, #0
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	0800bd10 	.word	0x0800bd10
 800625c:	0800bd10 	.word	0x0800bd10
 8006260:	0800bd10 	.word	0x0800bd10
 8006264:	0800bd14 	.word	0x0800bd14

08006268 <memset>:
 8006268:	4402      	add	r2, r0
 800626a:	4603      	mov	r3, r0
 800626c:	4293      	cmp	r3, r2
 800626e:	d100      	bne.n	8006272 <memset+0xa>
 8006270:	4770      	bx	lr
 8006272:	f803 1b01 	strb.w	r1, [r3], #1
 8006276:	e7f9      	b.n	800626c <memset+0x4>

08006278 <__cvt>:
 8006278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	ec55 4b10 	vmov	r4, r5, d0
 8006280:	2d00      	cmp	r5, #0
 8006282:	460e      	mov	r6, r1
 8006284:	4619      	mov	r1, r3
 8006286:	462b      	mov	r3, r5
 8006288:	bfbb      	ittet	lt
 800628a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800628e:	461d      	movlt	r5, r3
 8006290:	2300      	movge	r3, #0
 8006292:	232d      	movlt	r3, #45	; 0x2d
 8006294:	700b      	strb	r3, [r1, #0]
 8006296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800629c:	4691      	mov	r9, r2
 800629e:	f023 0820 	bic.w	r8, r3, #32
 80062a2:	bfbc      	itt	lt
 80062a4:	4622      	movlt	r2, r4
 80062a6:	4614      	movlt	r4, r2
 80062a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ac:	d005      	beq.n	80062ba <__cvt+0x42>
 80062ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062b2:	d100      	bne.n	80062b6 <__cvt+0x3e>
 80062b4:	3601      	adds	r6, #1
 80062b6:	2102      	movs	r1, #2
 80062b8:	e000      	b.n	80062bc <__cvt+0x44>
 80062ba:	2103      	movs	r1, #3
 80062bc:	ab03      	add	r3, sp, #12
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	ab02      	add	r3, sp, #8
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	ec45 4b10 	vmov	d0, r4, r5
 80062c8:	4653      	mov	r3, sl
 80062ca:	4632      	mov	r2, r6
 80062cc:	f000 fe18 	bl	8006f00 <_dtoa_r>
 80062d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062d4:	4607      	mov	r7, r0
 80062d6:	d102      	bne.n	80062de <__cvt+0x66>
 80062d8:	f019 0f01 	tst.w	r9, #1
 80062dc:	d022      	beq.n	8006324 <__cvt+0xac>
 80062de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e2:	eb07 0906 	add.w	r9, r7, r6
 80062e6:	d110      	bne.n	800630a <__cvt+0x92>
 80062e8:	783b      	ldrb	r3, [r7, #0]
 80062ea:	2b30      	cmp	r3, #48	; 0x30
 80062ec:	d10a      	bne.n	8006304 <__cvt+0x8c>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7fa fc07 	bl	8000b08 <__aeabi_dcmpeq>
 80062fa:	b918      	cbnz	r0, 8006304 <__cvt+0x8c>
 80062fc:	f1c6 0601 	rsb	r6, r6, #1
 8006300:	f8ca 6000 	str.w	r6, [sl]
 8006304:	f8da 3000 	ldr.w	r3, [sl]
 8006308:	4499      	add	r9, r3
 800630a:	2200      	movs	r2, #0
 800630c:	2300      	movs	r3, #0
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7fa fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 8006316:	b108      	cbz	r0, 800631c <__cvt+0xa4>
 8006318:	f8cd 900c 	str.w	r9, [sp, #12]
 800631c:	2230      	movs	r2, #48	; 0x30
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	454b      	cmp	r3, r9
 8006322:	d307      	bcc.n	8006334 <__cvt+0xbc>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006328:	1bdb      	subs	r3, r3, r7
 800632a:	4638      	mov	r0, r7
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	b004      	add	sp, #16
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	9103      	str	r1, [sp, #12]
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e7f0      	b.n	800631e <__cvt+0xa6>

0800633c <__exponent>:
 800633c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633e:	4603      	mov	r3, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	bfb8      	it	lt
 8006344:	4249      	neglt	r1, r1
 8006346:	f803 2b02 	strb.w	r2, [r3], #2
 800634a:	bfb4      	ite	lt
 800634c:	222d      	movlt	r2, #45	; 0x2d
 800634e:	222b      	movge	r2, #43	; 0x2b
 8006350:	2909      	cmp	r1, #9
 8006352:	7042      	strb	r2, [r0, #1]
 8006354:	dd2a      	ble.n	80063ac <__exponent+0x70>
 8006356:	f10d 0407 	add.w	r4, sp, #7
 800635a:	46a4      	mov	ip, r4
 800635c:	270a      	movs	r7, #10
 800635e:	46a6      	mov	lr, r4
 8006360:	460a      	mov	r2, r1
 8006362:	fb91 f6f7 	sdiv	r6, r1, r7
 8006366:	fb07 1516 	mls	r5, r7, r6, r1
 800636a:	3530      	adds	r5, #48	; 0x30
 800636c:	2a63      	cmp	r2, #99	; 0x63
 800636e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006376:	4631      	mov	r1, r6
 8006378:	dcf1      	bgt.n	800635e <__exponent+0x22>
 800637a:	3130      	adds	r1, #48	; 0x30
 800637c:	f1ae 0502 	sub.w	r5, lr, #2
 8006380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006384:	1c44      	adds	r4, r0, #1
 8006386:	4629      	mov	r1, r5
 8006388:	4561      	cmp	r1, ip
 800638a:	d30a      	bcc.n	80063a2 <__exponent+0x66>
 800638c:	f10d 0209 	add.w	r2, sp, #9
 8006390:	eba2 020e 	sub.w	r2, r2, lr
 8006394:	4565      	cmp	r5, ip
 8006396:	bf88      	it	hi
 8006398:	2200      	movhi	r2, #0
 800639a:	4413      	add	r3, r2
 800639c:	1a18      	subs	r0, r3, r0
 800639e:	b003      	add	sp, #12
 80063a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063aa:	e7ed      	b.n	8006388 <__exponent+0x4c>
 80063ac:	2330      	movs	r3, #48	; 0x30
 80063ae:	3130      	adds	r1, #48	; 0x30
 80063b0:	7083      	strb	r3, [r0, #2]
 80063b2:	70c1      	strb	r1, [r0, #3]
 80063b4:	1d03      	adds	r3, r0, #4
 80063b6:	e7f1      	b.n	800639c <__exponent+0x60>

080063b8 <_printf_float>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	ed2d 8b02 	vpush	{d8}
 80063c0:	b08d      	sub	sp, #52	; 0x34
 80063c2:	460c      	mov	r4, r1
 80063c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063c8:	4616      	mov	r6, r2
 80063ca:	461f      	mov	r7, r3
 80063cc:	4605      	mov	r5, r0
 80063ce:	f001 fd3d 	bl	8007e4c <_localeconv_r>
 80063d2:	f8d0 a000 	ldr.w	sl, [r0]
 80063d6:	4650      	mov	r0, sl
 80063d8:	f7f9 ff1a 	bl	8000210 <strlen>
 80063dc:	2300      	movs	r3, #0
 80063de:	930a      	str	r3, [sp, #40]	; 0x28
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	f8d8 3000 	ldr.w	r3, [r8]
 80063e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	f103 0208 	add.w	r2, r3, #8
 80063f6:	f8c8 2000 	str.w	r2, [r8]
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006410:	ee08 0a10 	vmov	s16, r0
 8006414:	4b9f      	ldr	r3, [pc, #636]	; (8006694 <_printf_float+0x2dc>)
 8006416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641a:	f04f 32ff 	mov.w	r2, #4294967295
 800641e:	f7fa fba5 	bl	8000b6c <__aeabi_dcmpun>
 8006422:	bb88      	cbnz	r0, 8006488 <_printf_float+0xd0>
 8006424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006428:	4b9a      	ldr	r3, [pc, #616]	; (8006694 <_printf_float+0x2dc>)
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	f7fa fb7f 	bl	8000b30 <__aeabi_dcmple>
 8006432:	bb48      	cbnz	r0, 8006488 <_printf_float+0xd0>
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa fb6e 	bl	8000b1c <__aeabi_dcmplt>
 8006440:	b110      	cbz	r0, 8006448 <_printf_float+0x90>
 8006442:	232d      	movs	r3, #45	; 0x2d
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006448:	4b93      	ldr	r3, [pc, #588]	; (8006698 <_printf_float+0x2e0>)
 800644a:	4894      	ldr	r0, [pc, #592]	; (800669c <_printf_float+0x2e4>)
 800644c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006450:	bf94      	ite	ls
 8006452:	4698      	movls	r8, r3
 8006454:	4680      	movhi	r8, r0
 8006456:	2303      	movs	r3, #3
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	f023 0204 	bic.w	r2, r3, #4
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	9700      	str	r7, [sp, #0]
 8006468:	4633      	mov	r3, r6
 800646a:	aa0b      	add	r2, sp, #44	; 0x2c
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f9d8 	bl	8006824 <_printf_common>
 8006474:	3001      	adds	r0, #1
 8006476:	f040 8090 	bne.w	800659a <_printf_float+0x1e2>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	b00d      	add	sp, #52	; 0x34
 8006480:	ecbd 8b02 	vpop	{d8}
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb6c 	bl	8000b6c <__aeabi_dcmpun>
 8006494:	b140      	cbz	r0, 80064a8 <_printf_float+0xf0>
 8006496:	464b      	mov	r3, r9
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfbc      	itt	lt
 800649c:	232d      	movlt	r3, #45	; 0x2d
 800649e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064a2:	487f      	ldr	r0, [pc, #508]	; (80066a0 <_printf_float+0x2e8>)
 80064a4:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <_printf_float+0x2ec>)
 80064a6:	e7d1      	b.n	800644c <_printf_float+0x94>
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064ae:	9206      	str	r2, [sp, #24]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	d13f      	bne.n	8006534 <_printf_float+0x17c>
 80064b4:	2306      	movs	r3, #6
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	9b05      	ldr	r3, [sp, #20]
 80064ba:	6861      	ldr	r1, [r4, #4]
 80064bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064c0:	2300      	movs	r3, #0
 80064c2:	9303      	str	r3, [sp, #12]
 80064c4:	ab0a      	add	r3, sp, #40	; 0x28
 80064c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064ca:	ab09      	add	r3, sp, #36	; 0x24
 80064cc:	ec49 8b10 	vmov	d0, r8, r9
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff fecd 	bl	8006278 <__cvt>
 80064de:	9b06      	ldr	r3, [sp, #24]
 80064e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064e2:	2b47      	cmp	r3, #71	; 0x47
 80064e4:	4680      	mov	r8, r0
 80064e6:	d108      	bne.n	80064fa <_printf_float+0x142>
 80064e8:	1cc8      	adds	r0, r1, #3
 80064ea:	db02      	blt.n	80064f2 <_printf_float+0x13a>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	4299      	cmp	r1, r3
 80064f0:	dd41      	ble.n	8006576 <_printf_float+0x1be>
 80064f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80064f6:	fa5f fb8b 	uxtb.w	fp, fp
 80064fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064fe:	d820      	bhi.n	8006542 <_printf_float+0x18a>
 8006500:	3901      	subs	r1, #1
 8006502:	465a      	mov	r2, fp
 8006504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006508:	9109      	str	r1, [sp, #36]	; 0x24
 800650a:	f7ff ff17 	bl	800633c <__exponent>
 800650e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006510:	1813      	adds	r3, r2, r0
 8006512:	2a01      	cmp	r2, #1
 8006514:	4681      	mov	r9, r0
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	dc02      	bgt.n	8006520 <_printf_float+0x168>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	07d2      	lsls	r2, r2, #31
 800651e:	d501      	bpl.n	8006524 <_printf_float+0x16c>
 8006520:	3301      	adds	r3, #1
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006528:	2b00      	cmp	r3, #0
 800652a:	d09c      	beq.n	8006466 <_printf_float+0xae>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006532:	e798      	b.n	8006466 <_printf_float+0xae>
 8006534:	9a06      	ldr	r2, [sp, #24]
 8006536:	2a47      	cmp	r2, #71	; 0x47
 8006538:	d1be      	bne.n	80064b8 <_printf_float+0x100>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1bc      	bne.n	80064b8 <_printf_float+0x100>
 800653e:	2301      	movs	r3, #1
 8006540:	e7b9      	b.n	80064b6 <_printf_float+0xfe>
 8006542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006546:	d118      	bne.n	800657a <_printf_float+0x1c2>
 8006548:	2900      	cmp	r1, #0
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	dd0b      	ble.n	8006566 <_printf_float+0x1ae>
 800654e:	6121      	str	r1, [r4, #16]
 8006550:	b913      	cbnz	r3, 8006558 <_printf_float+0x1a0>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	07d0      	lsls	r0, r2, #31
 8006556:	d502      	bpl.n	800655e <_printf_float+0x1a6>
 8006558:	3301      	adds	r3, #1
 800655a:	440b      	add	r3, r1
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006560:	f04f 0900 	mov.w	r9, #0
 8006564:	e7de      	b.n	8006524 <_printf_float+0x16c>
 8006566:	b913      	cbnz	r3, 800656e <_printf_float+0x1b6>
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	07d2      	lsls	r2, r2, #31
 800656c:	d501      	bpl.n	8006572 <_printf_float+0x1ba>
 800656e:	3302      	adds	r3, #2
 8006570:	e7f4      	b.n	800655c <_printf_float+0x1a4>
 8006572:	2301      	movs	r3, #1
 8006574:	e7f2      	b.n	800655c <_printf_float+0x1a4>
 8006576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800657a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657c:	4299      	cmp	r1, r3
 800657e:	db05      	blt.n	800658c <_printf_float+0x1d4>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	6121      	str	r1, [r4, #16]
 8006584:	07d8      	lsls	r0, r3, #31
 8006586:	d5ea      	bpl.n	800655e <_printf_float+0x1a6>
 8006588:	1c4b      	adds	r3, r1, #1
 800658a:	e7e7      	b.n	800655c <_printf_float+0x1a4>
 800658c:	2900      	cmp	r1, #0
 800658e:	bfd4      	ite	le
 8006590:	f1c1 0202 	rsble	r2, r1, #2
 8006594:	2201      	movgt	r2, #1
 8006596:	4413      	add	r3, r2
 8006598:	e7e0      	b.n	800655c <_printf_float+0x1a4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	055a      	lsls	r2, r3, #21
 800659e:	d407      	bmi.n	80065b0 <_printf_float+0x1f8>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	4642      	mov	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	d12c      	bne.n	8006608 <_printf_float+0x250>
 80065ae:	e764      	b.n	800647a <_printf_float+0xc2>
 80065b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065b4:	f240 80e0 	bls.w	8006778 <_printf_float+0x3c0>
 80065b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	f7fa faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d034      	beq.n	8006632 <_printf_float+0x27a>
 80065c8:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <_printf_float+0x2f0>)
 80065ca:	2301      	movs	r3, #1
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f af51 	beq.w	800647a <_printf_float+0xc2>
 80065d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065dc:	429a      	cmp	r2, r3
 80065de:	db02      	blt.n	80065e6 <_printf_float+0x22e>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	07d8      	lsls	r0, r3, #31
 80065e4:	d510      	bpl.n	8006608 <_printf_float+0x250>
 80065e6:	ee18 3a10 	vmov	r3, s16
 80065ea:	4652      	mov	r2, sl
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af41 	beq.w	800647a <_printf_float+0xc2>
 80065f8:	f04f 0800 	mov.w	r8, #0
 80065fc:	f104 091a 	add.w	r9, r4, #26
 8006600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	4543      	cmp	r3, r8
 8006606:	dc09      	bgt.n	800661c <_printf_float+0x264>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	f100 8105 	bmi.w	800681a <_printf_float+0x462>
 8006610:	68e0      	ldr	r0, [r4, #12]
 8006612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006614:	4298      	cmp	r0, r3
 8006616:	bfb8      	it	lt
 8006618:	4618      	movlt	r0, r3
 800661a:	e730      	b.n	800647e <_printf_float+0xc6>
 800661c:	2301      	movs	r3, #1
 800661e:	464a      	mov	r2, r9
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af27 	beq.w	800647a <_printf_float+0xc2>
 800662c:	f108 0801 	add.w	r8, r8, #1
 8006630:	e7e6      	b.n	8006600 <_printf_float+0x248>
 8006632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc39      	bgt.n	80066ac <_printf_float+0x2f4>
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <_printf_float+0x2f0>)
 800663a:	2301      	movs	r3, #1
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f af19 	beq.w	800647a <_printf_float+0xc2>
 8006648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664c:	4313      	orrs	r3, r2
 800664e:	d102      	bne.n	8006656 <_printf_float+0x29e>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07d9      	lsls	r1, r3, #31
 8006654:	d5d8      	bpl.n	8006608 <_printf_float+0x250>
 8006656:	ee18 3a10 	vmov	r3, s16
 800665a:	4652      	mov	r2, sl
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af09 	beq.w	800647a <_printf_float+0xc2>
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	f104 0a1a 	add.w	sl, r4, #26
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	425b      	negs	r3, r3
 8006674:	454b      	cmp	r3, r9
 8006676:	dc01      	bgt.n	800667c <_printf_float+0x2c4>
 8006678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667a:	e792      	b.n	80065a2 <_printf_float+0x1ea>
 800667c:	2301      	movs	r3, #1
 800667e:	4652      	mov	r2, sl
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f aef7 	beq.w	800647a <_printf_float+0xc2>
 800668c:	f109 0901 	add.w	r9, r9, #1
 8006690:	e7ee      	b.n	8006670 <_printf_float+0x2b8>
 8006692:	bf00      	nop
 8006694:	7fefffff 	.word	0x7fefffff
 8006698:	0800b900 	.word	0x0800b900
 800669c:	0800b904 	.word	0x0800b904
 80066a0:	0800b90c 	.word	0x0800b90c
 80066a4:	0800b908 	.word	0x0800b908
 80066a8:	0800b910 	.word	0x0800b910
 80066ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b0:	429a      	cmp	r2, r3
 80066b2:	bfa8      	it	ge
 80066b4:	461a      	movge	r2, r3
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	4691      	mov	r9, r2
 80066ba:	dc37      	bgt.n	800672c <_printf_float+0x374>
 80066bc:	f04f 0b00 	mov.w	fp, #0
 80066c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066c4:	f104 021a 	add.w	r2, r4, #26
 80066c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	eba3 0309 	sub.w	r3, r3, r9
 80066d0:	455b      	cmp	r3, fp
 80066d2:	dc33      	bgt.n	800673c <_printf_float+0x384>
 80066d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	db3b      	blt.n	8006754 <_printf_float+0x39c>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	07da      	lsls	r2, r3, #31
 80066e0:	d438      	bmi.n	8006754 <_printf_float+0x39c>
 80066e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e4:	9a05      	ldr	r2, [sp, #20]
 80066e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e8:	1a9a      	subs	r2, r3, r2
 80066ea:	eba3 0901 	sub.w	r9, r3, r1
 80066ee:	4591      	cmp	r9, r2
 80066f0:	bfa8      	it	ge
 80066f2:	4691      	movge	r9, r2
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	dc35      	bgt.n	8006766 <_printf_float+0x3ae>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006702:	f104 0a1a 	add.w	sl, r4, #26
 8006706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	eba3 0309 	sub.w	r3, r3, r9
 8006710:	4543      	cmp	r3, r8
 8006712:	f77f af79 	ble.w	8006608 <_printf_float+0x250>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f aeaa 	beq.w	800647a <_printf_float+0xc2>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	e7ec      	b.n	8006706 <_printf_float+0x34e>
 800672c:	4613      	mov	r3, r2
 800672e:	4631      	mov	r1, r6
 8006730:	4642      	mov	r2, r8
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d1c0      	bne.n	80066bc <_printf_float+0x304>
 800673a:	e69e      	b.n	800647a <_printf_float+0xc2>
 800673c:	2301      	movs	r3, #1
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	9205      	str	r2, [sp, #20]
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae97 	beq.w	800647a <_printf_float+0xc2>
 800674c:	9a05      	ldr	r2, [sp, #20]
 800674e:	f10b 0b01 	add.w	fp, fp, #1
 8006752:	e7b9      	b.n	80066c8 <_printf_float+0x310>
 8006754:	ee18 3a10 	vmov	r3, s16
 8006758:	4652      	mov	r2, sl
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d1be      	bne.n	80066e2 <_printf_float+0x32a>
 8006764:	e689      	b.n	800647a <_printf_float+0xc2>
 8006766:	9a05      	ldr	r2, [sp, #20]
 8006768:	464b      	mov	r3, r9
 800676a:	4442      	add	r2, r8
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	d1c1      	bne.n	80066fa <_printf_float+0x342>
 8006776:	e680      	b.n	800647a <_printf_float+0xc2>
 8006778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677a:	2a01      	cmp	r2, #1
 800677c:	dc01      	bgt.n	8006782 <_printf_float+0x3ca>
 800677e:	07db      	lsls	r3, r3, #31
 8006780:	d538      	bpl.n	80067f4 <_printf_float+0x43c>
 8006782:	2301      	movs	r3, #1
 8006784:	4642      	mov	r2, r8
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f ae74 	beq.w	800647a <_printf_float+0xc2>
 8006792:	ee18 3a10 	vmov	r3, s16
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f ae6b 	beq.w	800647a <_printf_float+0xc2>
 80067a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	f7fa f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80067b0:	b9d8      	cbnz	r0, 80067ea <_printf_float+0x432>
 80067b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b4:	f108 0201 	add.w	r2, r8, #1
 80067b8:	3b01      	subs	r3, #1
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	d10e      	bne.n	80067e2 <_printf_float+0x42a>
 80067c4:	e659      	b.n	800647a <_printf_float+0xc2>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae52 	beq.w	800647a <_printf_float+0xc2>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067dc:	3b01      	subs	r3, #1
 80067de:	4543      	cmp	r3, r8
 80067e0:	dcf1      	bgt.n	80067c6 <_printf_float+0x40e>
 80067e2:	464b      	mov	r3, r9
 80067e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067e8:	e6dc      	b.n	80065a4 <_printf_float+0x1ec>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	f104 0a1a 	add.w	sl, r4, #26
 80067f2:	e7f2      	b.n	80067da <_printf_float+0x422>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4642      	mov	r2, r8
 80067f8:	e7df      	b.n	80067ba <_printf_float+0x402>
 80067fa:	2301      	movs	r3, #1
 80067fc:	464a      	mov	r2, r9
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	f43f ae38 	beq.w	800647a <_printf_float+0xc2>
 800680a:	f108 0801 	add.w	r8, r8, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	4543      	cmp	r3, r8
 8006816:	dcf0      	bgt.n	80067fa <_printf_float+0x442>
 8006818:	e6fa      	b.n	8006610 <_printf_float+0x258>
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	f104 0919 	add.w	r9, r4, #25
 8006822:	e7f4      	b.n	800680e <_printf_float+0x456>

08006824 <_printf_common>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	4616      	mov	r6, r2
 800682a:	4699      	mov	r9, r3
 800682c:	688a      	ldr	r2, [r1, #8]
 800682e:	690b      	ldr	r3, [r1, #16]
 8006830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006834:	4293      	cmp	r3, r2
 8006836:	bfb8      	it	lt
 8006838:	4613      	movlt	r3, r2
 800683a:	6033      	str	r3, [r6, #0]
 800683c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006840:	4607      	mov	r7, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b10a      	cbz	r2, 800684a <_printf_common+0x26>
 8006846:	3301      	adds	r3, #1
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	6833      	ldrmi	r3, [r6, #0]
 8006852:	3302      	addmi	r3, #2
 8006854:	6033      	strmi	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d106      	bne.n	800686c <_printf_common+0x48>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	42ab      	cmp	r3, r5
 800686a:	dc26      	bgt.n	80068ba <_printf_common+0x96>
 800686c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006870:	1e13      	subs	r3, r2, #0
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	bf18      	it	ne
 8006876:	2301      	movne	r3, #1
 8006878:	0692      	lsls	r2, r2, #26
 800687a:	d42b      	bmi.n	80068d4 <_printf_common+0xb0>
 800687c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d01e      	beq.n	80068c8 <_printf_common+0xa4>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	68e5      	ldr	r5, [r4, #12]
 800688e:	6832      	ldr	r2, [r6, #0]
 8006890:	f003 0306 	and.w	r3, r3, #6
 8006894:	2b04      	cmp	r3, #4
 8006896:	bf08      	it	eq
 8006898:	1aad      	subeq	r5, r5, r2
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	6922      	ldr	r2, [r4, #16]
 800689e:	bf0c      	ite	eq
 80068a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a4:	2500      	movne	r5, #0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfc4      	itt	gt
 80068aa:	1a9b      	subgt	r3, r3, r2
 80068ac:	18ed      	addgt	r5, r5, r3
 80068ae:	2600      	movs	r6, #0
 80068b0:	341a      	adds	r4, #26
 80068b2:	42b5      	cmp	r5, r6
 80068b4:	d11a      	bne.n	80068ec <_printf_common+0xc8>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e008      	b.n	80068cc <_printf_common+0xa8>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4649      	mov	r1, r9
 80068c0:	4638      	mov	r0, r7
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d103      	bne.n	80068d0 <_printf_common+0xac>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7c6      	b.n	8006862 <_printf_common+0x3e>
 80068d4:	18e1      	adds	r1, r4, r3
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	2030      	movs	r0, #48	; 0x30
 80068da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068de:	4422      	add	r2, r4
 80068e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e8:	3302      	adds	r3, #2
 80068ea:	e7c7      	b.n	800687c <_printf_common+0x58>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4622      	mov	r2, r4
 80068f0:	4649      	mov	r1, r9
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c0      	blx	r8
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa4>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d9      	b.n	80068b2 <_printf_common+0x8e>
	...

08006900 <_printf_i>:
 8006900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	7e0f      	ldrb	r7, [r1, #24]
 8006906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006908:	2f78      	cmp	r7, #120	; 0x78
 800690a:	4691      	mov	r9, r2
 800690c:	4680      	mov	r8, r0
 800690e:	460c      	mov	r4, r1
 8006910:	469a      	mov	sl, r3
 8006912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006916:	d807      	bhi.n	8006928 <_printf_i+0x28>
 8006918:	2f62      	cmp	r7, #98	; 0x62
 800691a:	d80a      	bhi.n	8006932 <_printf_i+0x32>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f000 80d8 	beq.w	8006ad2 <_printf_i+0x1d2>
 8006922:	2f58      	cmp	r7, #88	; 0x58
 8006924:	f000 80a3 	beq.w	8006a6e <_printf_i+0x16e>
 8006928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800692c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006930:	e03a      	b.n	80069a8 <_printf_i+0xa8>
 8006932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006936:	2b15      	cmp	r3, #21
 8006938:	d8f6      	bhi.n	8006928 <_printf_i+0x28>
 800693a:	a101      	add	r1, pc, #4	; (adr r1, 8006940 <_printf_i+0x40>)
 800693c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006940:	08006999 	.word	0x08006999
 8006944:	080069ad 	.word	0x080069ad
 8006948:	08006929 	.word	0x08006929
 800694c:	08006929 	.word	0x08006929
 8006950:	08006929 	.word	0x08006929
 8006954:	08006929 	.word	0x08006929
 8006958:	080069ad 	.word	0x080069ad
 800695c:	08006929 	.word	0x08006929
 8006960:	08006929 	.word	0x08006929
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006ab9 	.word	0x08006ab9
 8006970:	080069dd 	.word	0x080069dd
 8006974:	08006a9b 	.word	0x08006a9b
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006adb 	.word	0x08006adb
 8006984:	08006929 	.word	0x08006929
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006aa3 	.word	0x08006aa3
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	602a      	str	r2, [r5, #0]
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0a3      	b.n	8006af4 <_printf_i+0x1f4>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	6829      	ldr	r1, [r5, #0]
 80069b0:	0606      	lsls	r6, r0, #24
 80069b2:	f101 0304 	add.w	r3, r1, #4
 80069b6:	d50a      	bpl.n	80069ce <_printf_i+0xce>
 80069b8:	680e      	ldr	r6, [r1, #0]
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	2e00      	cmp	r6, #0
 80069be:	da03      	bge.n	80069c8 <_printf_i+0xc8>
 80069c0:	232d      	movs	r3, #45	; 0x2d
 80069c2:	4276      	negs	r6, r6
 80069c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c8:	485e      	ldr	r0, [pc, #376]	; (8006b44 <_printf_i+0x244>)
 80069ca:	230a      	movs	r3, #10
 80069cc:	e019      	b.n	8006a02 <_printf_i+0x102>
 80069ce:	680e      	ldr	r6, [r1, #0]
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069d6:	bf18      	it	ne
 80069d8:	b236      	sxthne	r6, r6
 80069da:	e7ef      	b.n	80069bc <_printf_i+0xbc>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	6029      	str	r1, [r5, #0]
 80069e4:	0601      	lsls	r1, r0, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xec>
 80069e8:	681e      	ldr	r6, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0xf2>
 80069ec:	0646      	lsls	r6, r0, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xe8>
 80069f0:	881e      	ldrh	r6, [r3, #0]
 80069f2:	4854      	ldr	r0, [pc, #336]	; (8006b44 <_printf_i+0x244>)
 80069f4:	2f6f      	cmp	r7, #111	; 0x6f
 80069f6:	bf0c      	ite	eq
 80069f8:	2308      	moveq	r3, #8
 80069fa:	230a      	movne	r3, #10
 80069fc:	2100      	movs	r1, #0
 80069fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a02:	6865      	ldr	r5, [r4, #4]
 8006a04:	60a5      	str	r5, [r4, #8]
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	bfa2      	ittt	ge
 8006a0a:	6821      	ldrge	r1, [r4, #0]
 8006a0c:	f021 0104 	bicge.w	r1, r1, #4
 8006a10:	6021      	strge	r1, [r4, #0]
 8006a12:	b90e      	cbnz	r6, 8006a18 <_printf_i+0x118>
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d04d      	beq.n	8006ab4 <_printf_i+0x1b4>
 8006a18:	4615      	mov	r5, r2
 8006a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a22:	5dc7      	ldrb	r7, [r0, r7]
 8006a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a28:	4637      	mov	r7, r6
 8006a2a:	42bb      	cmp	r3, r7
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	d9f4      	bls.n	8006a1a <_printf_i+0x11a>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d10b      	bne.n	8006a4c <_printf_i+0x14c>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	07de      	lsls	r6, r3, #31
 8006a38:	d508      	bpl.n	8006a4c <_printf_i+0x14c>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	bfde      	ittt	le
 8006a42:	2330      	movle	r3, #48	; 0x30
 8006a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a4c:	1b52      	subs	r2, r2, r5
 8006a4e:	6122      	str	r2, [r4, #16]
 8006a50:	f8cd a000 	str.w	sl, [sp]
 8006a54:	464b      	mov	r3, r9
 8006a56:	aa03      	add	r2, sp, #12
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff fee2 	bl	8006824 <_printf_common>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d14c      	bne.n	8006afe <_printf_i+0x1fe>
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	b004      	add	sp, #16
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	4835      	ldr	r0, [pc, #212]	; (8006b44 <_printf_i+0x244>)
 8006a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a74:	6829      	ldr	r1, [r5, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a7c:	6029      	str	r1, [r5, #0]
 8006a7e:	061d      	lsls	r5, r3, #24
 8006a80:	d514      	bpl.n	8006aac <_printf_i+0x1ac>
 8006a82:	07df      	lsls	r7, r3, #31
 8006a84:	bf44      	itt	mi
 8006a86:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8a:	6023      	strmi	r3, [r4, #0]
 8006a8c:	b91e      	cbnz	r6, 8006a96 <_printf_i+0x196>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f023 0320 	bic.w	r3, r3, #32
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	2310      	movs	r3, #16
 8006a98:	e7b0      	b.n	80069fc <_printf_i+0xfc>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f043 0320 	orr.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	2378      	movs	r3, #120	; 0x78
 8006aa4:	4828      	ldr	r0, [pc, #160]	; (8006b48 <_printf_i+0x248>)
 8006aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aaa:	e7e3      	b.n	8006a74 <_printf_i+0x174>
 8006aac:	0659      	lsls	r1, r3, #25
 8006aae:	bf48      	it	mi
 8006ab0:	b2b6      	uxthmi	r6, r6
 8006ab2:	e7e6      	b.n	8006a82 <_printf_i+0x182>
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	e7bb      	b.n	8006a30 <_printf_i+0x130>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	6826      	ldr	r6, [r4, #0]
 8006abc:	6961      	ldr	r1, [r4, #20]
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	6028      	str	r0, [r5, #0]
 8006ac2:	0635      	lsls	r5, r6, #24
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0x1cc>
 8006ac8:	6019      	str	r1, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <_printf_i+0x1d2>
 8006acc:	0670      	lsls	r0, r6, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0x1c8>
 8006ad0:	8019      	strh	r1, [r3, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	4615      	mov	r5, r2
 8006ad8:	e7ba      	b.n	8006a50 <_printf_i+0x150>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	602a      	str	r2, [r5, #0]
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7f9 fb9a 	bl	8000220 <memchr>
 8006aec:	b108      	cbz	r0, 8006af2 <_printf_i+0x1f2>
 8006aee:	1b40      	subs	r0, r0, r5
 8006af0:	6060      	str	r0, [r4, #4]
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afc:	e7a8      	b.n	8006a50 <_printf_i+0x150>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	462a      	mov	r2, r5
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	47d0      	blx	sl
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d0ab      	beq.n	8006a64 <_printf_i+0x164>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	079b      	lsls	r3, r3, #30
 8006b10:	d413      	bmi.n	8006b3a <_printf_i+0x23a>
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bfb8      	it	lt
 8006b1a:	4618      	movlt	r0, r3
 8006b1c:	e7a4      	b.n	8006a68 <_printf_i+0x168>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4632      	mov	r2, r6
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d09b      	beq.n	8006a64 <_printf_i+0x164>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9903      	ldr	r1, [sp, #12]
 8006b32:	1a5b      	subs	r3, r3, r1
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dcf2      	bgt.n	8006b1e <_printf_i+0x21e>
 8006b38:	e7eb      	b.n	8006b12 <_printf_i+0x212>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	f104 0619 	add.w	r6, r4, #25
 8006b40:	e7f5      	b.n	8006b2e <_printf_i+0x22e>
 8006b42:	bf00      	nop
 8006b44:	0800b912 	.word	0x0800b912
 8006b48:	0800b923 	.word	0x0800b923

08006b4c <iprintf>:
 8006b4c:	b40f      	push	{r0, r1, r2, r3}
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <iprintf+0x2c>)
 8006b50:	b513      	push	{r0, r1, r4, lr}
 8006b52:	681c      	ldr	r4, [r3, #0]
 8006b54:	b124      	cbz	r4, 8006b60 <iprintf+0x14>
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	b913      	cbnz	r3, 8006b60 <iprintf+0x14>
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f001 f8d8 	bl	8007d10 <__sinit>
 8006b60:	ab05      	add	r3, sp, #20
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	68a1      	ldr	r1, [r4, #8]
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f001 fe95 	bl	8008898 <_vfiprintf_r>
 8006b6e:	b002      	add	sp, #8
 8006b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <_puts_r>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	4605      	mov	r5, r0
 8006b82:	b118      	cbz	r0, 8006b8c <_puts_r+0x10>
 8006b84:	6983      	ldr	r3, [r0, #24]
 8006b86:	b90b      	cbnz	r3, 8006b8c <_puts_r+0x10>
 8006b88:	f001 f8c2 	bl	8007d10 <__sinit>
 8006b8c:	69ab      	ldr	r3, [r5, #24]
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	b913      	cbnz	r3, 8006b98 <_puts_r+0x1c>
 8006b92:	4628      	mov	r0, r5
 8006b94:	f001 f8bc 	bl	8007d10 <__sinit>
 8006b98:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <_puts_r+0xd0>)
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	d120      	bne.n	8006be0 <_puts_r+0x64>
 8006b9e:	686c      	ldr	r4, [r5, #4]
 8006ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba2:	07db      	lsls	r3, r3, #31
 8006ba4:	d405      	bmi.n	8006bb2 <_puts_r+0x36>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_puts_r+0x36>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f001 f952 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	0719      	lsls	r1, r3, #28
 8006bb6:	d51d      	bpl.n	8006bf4 <_puts_r+0x78>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	b1db      	cbz	r3, 8006bf4 <_puts_r+0x78>
 8006bbc:	3e01      	subs	r6, #1
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	bb39      	cbnz	r1, 8006c1a <_puts_r+0x9e>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da38      	bge.n	8006c40 <_puts_r+0xc4>
 8006bce:	4622      	mov	r2, r4
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f848 	bl	8006c68 <__swbuf_r>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d011      	beq.n	8006c00 <_puts_r+0x84>
 8006bdc:	250a      	movs	r5, #10
 8006bde:	e011      	b.n	8006c04 <_puts_r+0x88>
 8006be0:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <_puts_r+0xd4>)
 8006be2:	429c      	cmp	r4, r3
 8006be4:	d101      	bne.n	8006bea <_puts_r+0x6e>
 8006be6:	68ac      	ldr	r4, [r5, #8]
 8006be8:	e7da      	b.n	8006ba0 <_puts_r+0x24>
 8006bea:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <_puts_r+0xd8>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	bf08      	it	eq
 8006bf0:	68ec      	ldreq	r4, [r5, #12]
 8006bf2:	e7d5      	b.n	8006ba0 <_puts_r+0x24>
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f888 	bl	8006d0c <__swsetup_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d0dd      	beq.n	8006bbc <_puts_r+0x40>
 8006c00:	f04f 35ff 	mov.w	r5, #4294967295
 8006c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_puts_r+0x9a>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	059b      	lsls	r3, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_puts_r+0x9a>
 8006c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c12:	f001 f921 	bl	8007e58 <__retarget_lock_release_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da04      	bge.n	8006c28 <_puts_r+0xac>
 8006c1e:	69a2      	ldr	r2, [r4, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	dc06      	bgt.n	8006c32 <_puts_r+0xb6>
 8006c24:	290a      	cmp	r1, #10
 8006c26:	d004      	beq.n	8006c32 <_puts_r+0xb6>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	6022      	str	r2, [r4, #0]
 8006c2e:	7019      	strb	r1, [r3, #0]
 8006c30:	e7c5      	b.n	8006bbe <_puts_r+0x42>
 8006c32:	4622      	mov	r2, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f817 	bl	8006c68 <__swbuf_r>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d1bf      	bne.n	8006bbe <_puts_r+0x42>
 8006c3e:	e7df      	b.n	8006c00 <_puts_r+0x84>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	250a      	movs	r5, #10
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	701d      	strb	r5, [r3, #0]
 8006c4a:	e7db      	b.n	8006c04 <_puts_r+0x88>
 8006c4c:	0800b9e4 	.word	0x0800b9e4
 8006c50:	0800ba04 	.word	0x0800ba04
 8006c54:	0800b9c4 	.word	0x0800b9c4

08006c58 <puts>:
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <puts+0xc>)
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	f7ff bf8d 	b.w	8006b7c <_puts_r>
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c

08006c68 <__swbuf_r>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	460e      	mov	r6, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	4605      	mov	r5, r0
 8006c70:	b118      	cbz	r0, 8006c7a <__swbuf_r+0x12>
 8006c72:	6983      	ldr	r3, [r0, #24]
 8006c74:	b90b      	cbnz	r3, 8006c7a <__swbuf_r+0x12>
 8006c76:	f001 f84b 	bl	8007d10 <__sinit>
 8006c7a:	4b21      	ldr	r3, [pc, #132]	; (8006d00 <__swbuf_r+0x98>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d12b      	bne.n	8006cd8 <__swbuf_r+0x70>
 8006c80:	686c      	ldr	r4, [r5, #4]
 8006c82:	69a3      	ldr	r3, [r4, #24]
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	071a      	lsls	r2, r3, #28
 8006c8a:	d52f      	bpl.n	8006cec <__swbuf_r+0x84>
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	b36b      	cbz	r3, 8006cec <__swbuf_r+0x84>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	6820      	ldr	r0, [r4, #0]
 8006c94:	1ac0      	subs	r0, r0, r3
 8006c96:	6963      	ldr	r3, [r4, #20]
 8006c98:	b2f6      	uxtb	r6, r6
 8006c9a:	4283      	cmp	r3, r0
 8006c9c:	4637      	mov	r7, r6
 8006c9e:	dc04      	bgt.n	8006caa <__swbuf_r+0x42>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 ffa0 	bl	8007be8 <_fflush_r>
 8006ca8:	bb30      	cbnz	r0, 8006cf8 <__swbuf_r+0x90>
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	60a3      	str	r3, [r4, #8]
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	6022      	str	r2, [r4, #0]
 8006cb6:	701e      	strb	r6, [r3, #0]
 8006cb8:	6963      	ldr	r3, [r4, #20]
 8006cba:	3001      	adds	r0, #1
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	d004      	beq.n	8006cca <__swbuf_r+0x62>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	07db      	lsls	r3, r3, #31
 8006cc4:	d506      	bpl.n	8006cd4 <__swbuf_r+0x6c>
 8006cc6:	2e0a      	cmp	r6, #10
 8006cc8:	d104      	bne.n	8006cd4 <__swbuf_r+0x6c>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 ff8b 	bl	8007be8 <_fflush_r>
 8006cd2:	b988      	cbnz	r0, 8006cf8 <__swbuf_r+0x90>
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <__swbuf_r+0x9c>)
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d101      	bne.n	8006ce2 <__swbuf_r+0x7a>
 8006cde:	68ac      	ldr	r4, [r5, #8]
 8006ce0:	e7cf      	b.n	8006c82 <__swbuf_r+0x1a>
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <__swbuf_r+0xa0>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	bf08      	it	eq
 8006ce8:	68ec      	ldreq	r4, [r5, #12]
 8006cea:	e7ca      	b.n	8006c82 <__swbuf_r+0x1a>
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f80c 	bl	8006d0c <__swsetup_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d0cb      	beq.n	8006c90 <__swbuf_r+0x28>
 8006cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8006cfc:	e7ea      	b.n	8006cd4 <__swbuf_r+0x6c>
 8006cfe:	bf00      	nop
 8006d00:	0800b9e4 	.word	0x0800b9e4
 8006d04:	0800ba04 	.word	0x0800ba04
 8006d08:	0800b9c4 	.word	0x0800b9c4

08006d0c <__swsetup_r>:
 8006d0c:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <__swsetup_r+0xcc>)
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	681d      	ldr	r5, [r3, #0]
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	b125      	cbz	r5, 8006d22 <__swsetup_r+0x16>
 8006d18:	69ab      	ldr	r3, [r5, #24]
 8006d1a:	b913      	cbnz	r3, 8006d22 <__swsetup_r+0x16>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 fff7 	bl	8007d10 <__sinit>
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <__swsetup_r+0xd0>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	d10f      	bne.n	8006d48 <__swsetup_r+0x3c>
 8006d28:	686c      	ldr	r4, [r5, #4]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d42c      	bmi.n	8006d8e <__swsetup_r+0x82>
 8006d34:	06dd      	lsls	r5, r3, #27
 8006d36:	d411      	bmi.n	8006d5c <__swsetup_r+0x50>
 8006d38:	2309      	movs	r3, #9
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	e03e      	b.n	8006dc6 <__swsetup_r+0xba>
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <__swsetup_r+0xd4>)
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	d101      	bne.n	8006d52 <__swsetup_r+0x46>
 8006d4e:	68ac      	ldr	r4, [r5, #8]
 8006d50:	e7eb      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <__swsetup_r+0xd8>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	bf08      	it	eq
 8006d58:	68ec      	ldreq	r4, [r5, #12]
 8006d5a:	e7e6      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d5c:	0758      	lsls	r0, r3, #29
 8006d5e:	d512      	bpl.n	8006d86 <__swsetup_r+0x7a>
 8006d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d62:	b141      	cbz	r1, 8006d76 <__swsetup_r+0x6a>
 8006d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d002      	beq.n	8006d72 <__swsetup_r+0x66>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f001 fc89 	bl	8008684 <_free_r>
 8006d72:	2300      	movs	r3, #0
 8006d74:	6363      	str	r3, [r4, #52]	; 0x34
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	b94b      	cbnz	r3, 8006da6 <__swsetup_r+0x9a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9c:	d003      	beq.n	8006da6 <__swsetup_r+0x9a>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4630      	mov	r0, r6
 8006da2:	f001 f87f 	bl	8007ea4 <__smakebuf_r>
 8006da6:	89a0      	ldrh	r0, [r4, #12]
 8006da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dac:	f010 0301 	ands.w	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <__swsetup_r+0xbc>
 8006db2:	2300      	movs	r3, #0
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6963      	ldr	r3, [r4, #20]
 8006db8:	425b      	negs	r3, r3
 8006dba:	61a3      	str	r3, [r4, #24]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	b943      	cbnz	r3, 8006dd2 <__swsetup_r+0xc6>
 8006dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dc4:	d1ba      	bne.n	8006d3c <__swsetup_r+0x30>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	0781      	lsls	r1, r0, #30
 8006dca:	bf58      	it	pl
 8006dcc:	6963      	ldrpl	r3, [r4, #20]
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	e7f4      	b.n	8006dbc <__swsetup_r+0xb0>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e7f7      	b.n	8006dc6 <__swsetup_r+0xba>
 8006dd6:	bf00      	nop
 8006dd8:	2000000c 	.word	0x2000000c
 8006ddc:	0800b9e4 	.word	0x0800b9e4
 8006de0:	0800ba04 	.word	0x0800ba04
 8006de4:	0800b9c4 	.word	0x0800b9c4

08006de8 <quorem>:
 8006de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	6903      	ldr	r3, [r0, #16]
 8006dee:	690c      	ldr	r4, [r1, #16]
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	4607      	mov	r7, r0
 8006df4:	f2c0 8081 	blt.w	8006efa <quorem+0x112>
 8006df8:	3c01      	subs	r4, #1
 8006dfa:	f101 0814 	add.w	r8, r1, #20
 8006dfe:	f100 0514 	add.w	r5, r0, #20
 8006e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e10:	3301      	adds	r3, #1
 8006e12:	429a      	cmp	r2, r3
 8006e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e20:	d331      	bcc.n	8006e86 <quorem+0x9e>
 8006e22:	f04f 0e00 	mov.w	lr, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	46ac      	mov	ip, r5
 8006e2a:	46f2      	mov	sl, lr
 8006e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e30:	b293      	uxth	r3, r2
 8006e32:	fb06 e303 	mla	r3, r6, r3, lr
 8006e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e40:	f8dc a000 	ldr.w	sl, [ip]
 8006e44:	0c12      	lsrs	r2, r2, #16
 8006e46:	fa13 f38a 	uxtah	r3, r3, sl
 8006e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	9b00      	ldr	r3, [sp, #0]
 8006e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e56:	b292      	uxth	r2, r2
 8006e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e64:	4581      	cmp	r9, r0
 8006e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e72:	d2db      	bcs.n	8006e2c <quorem+0x44>
 8006e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e78:	b92b      	cbnz	r3, 8006e86 <quorem+0x9e>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	429d      	cmp	r5, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	d32e      	bcc.n	8006ee2 <quorem+0xfa>
 8006e84:	613c      	str	r4, [r7, #16]
 8006e86:	4638      	mov	r0, r7
 8006e88:	f001 fae4 	bl	8008454 <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	db24      	blt.n	8006eda <quorem+0xf2>
 8006e90:	3601      	adds	r6, #1
 8006e92:	4628      	mov	r0, r5
 8006e94:	f04f 0c00 	mov.w	ip, #0
 8006e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8006ea0:	b293      	uxth	r3, r2
 8006ea2:	ebac 0303 	sub.w	r3, ip, r3
 8006ea6:	0c12      	lsrs	r2, r2, #16
 8006ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8006eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eba:	45c1      	cmp	r9, r8
 8006ebc:	f840 3b04 	str.w	r3, [r0], #4
 8006ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ec4:	d2e8      	bcs.n	8006e98 <quorem+0xb0>
 8006ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ece:	b922      	cbnz	r2, 8006eda <quorem+0xf2>
 8006ed0:	3b04      	subs	r3, #4
 8006ed2:	429d      	cmp	r5, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	d30a      	bcc.n	8006eee <quorem+0x106>
 8006ed8:	613c      	str	r4, [r7, #16]
 8006eda:	4630      	mov	r0, r6
 8006edc:	b003      	add	sp, #12
 8006ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	d1cc      	bne.n	8006e84 <quorem+0x9c>
 8006eea:	3c01      	subs	r4, #1
 8006eec:	e7c7      	b.n	8006e7e <quorem+0x96>
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <quorem+0xf0>
 8006ef6:	3c01      	subs	r4, #1
 8006ef8:	e7eb      	b.n	8006ed2 <quorem+0xea>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e7ee      	b.n	8006edc <quorem+0xf4>
	...

08006f00 <_dtoa_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	ed2d 8b04 	vpush	{d8-d9}
 8006f08:	ec57 6b10 	vmov	r6, r7, d0
 8006f0c:	b093      	sub	sp, #76	; 0x4c
 8006f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f14:	9106      	str	r1, [sp, #24]
 8006f16:	ee10 aa10 	vmov	sl, s0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f20:	46bb      	mov	fp, r7
 8006f22:	b975      	cbnz	r5, 8006f42 <_dtoa_r+0x42>
 8006f24:	2010      	movs	r0, #16
 8006f26:	f000 fffd 	bl	8007f24 <malloc>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f2e:	b920      	cbnz	r0, 8006f3a <_dtoa_r+0x3a>
 8006f30:	4ba7      	ldr	r3, [pc, #668]	; (80071d0 <_dtoa_r+0x2d0>)
 8006f32:	21ea      	movs	r1, #234	; 0xea
 8006f34:	48a7      	ldr	r0, [pc, #668]	; (80071d4 <_dtoa_r+0x2d4>)
 8006f36:	f001 fe45 	bl	8008bc4 <__assert_func>
 8006f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f3e:	6005      	str	r5, [r0, #0]
 8006f40:	60c5      	str	r5, [r0, #12]
 8006f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	b151      	cbz	r1, 8006f5e <_dtoa_r+0x5e>
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	604a      	str	r2, [r1, #4]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4093      	lsls	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
 8006f52:	4620      	mov	r0, r4
 8006f54:	f001 f83c 	bl	8007fd0 <_Bfree>
 8006f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	1e3b      	subs	r3, r7, #0
 8006f60:	bfaa      	itet	ge
 8006f62:	2300      	movge	r3, #0
 8006f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f68:	f8c8 3000 	strge.w	r3, [r8]
 8006f6c:	4b9a      	ldr	r3, [pc, #616]	; (80071d8 <_dtoa_r+0x2d8>)
 8006f6e:	bfbc      	itt	lt
 8006f70:	2201      	movlt	r2, #1
 8006f72:	f8c8 2000 	strlt.w	r2, [r8]
 8006f76:	ea33 030b 	bics.w	r3, r3, fp
 8006f7a:	d11b      	bne.n	8006fb4 <_dtoa_r+0xb4>
 8006f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f88:	4333      	orrs	r3, r6
 8006f8a:	f000 8592 	beq.w	8007ab2 <_dtoa_r+0xbb2>
 8006f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f90:	b963      	cbnz	r3, 8006fac <_dtoa_r+0xac>
 8006f92:	4b92      	ldr	r3, [pc, #584]	; (80071dc <_dtoa_r+0x2dc>)
 8006f94:	e022      	b.n	8006fdc <_dtoa_r+0xdc>
 8006f96:	4b92      	ldr	r3, [pc, #584]	; (80071e0 <_dtoa_r+0x2e0>)
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	9801      	ldr	r0, [sp, #4]
 8006fa2:	b013      	add	sp, #76	; 0x4c
 8006fa4:	ecbd 8b04 	vpop	{d8-d9}
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <_dtoa_r+0x2dc>)
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	3303      	adds	r3, #3
 8006fb2:	e7f3      	b.n	8006f9c <_dtoa_r+0x9c>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8006fc0:	ec4b ab19 	vmov	d9, sl, fp
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	b158      	cbz	r0, 8006fe0 <_dtoa_r+0xe0>
 8006fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fca:	2301      	movs	r3, #1
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 856b 	beq.w	8007aac <_dtoa_r+0xbac>
 8006fd6:	4883      	ldr	r0, [pc, #524]	; (80071e4 <_dtoa_r+0x2e4>)
 8006fd8:	6018      	str	r0, [r3, #0]
 8006fda:	1e43      	subs	r3, r0, #1
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	e7df      	b.n	8006fa0 <_dtoa_r+0xa0>
 8006fe0:	ec4b ab10 	vmov	d0, sl, fp
 8006fe4:	aa10      	add	r2, sp, #64	; 0x40
 8006fe6:	a911      	add	r1, sp, #68	; 0x44
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f001 fad9 	bl	80085a0 <__d2b>
 8006fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ff2:	ee08 0a10 	vmov	s16, r0
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	f000 8084 	beq.w	8007104 <_dtoa_r+0x204>
 8006ffc:	ee19 3a90 	vmov	r3, s19
 8007000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007008:	4656      	mov	r6, sl
 800700a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800700e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007016:	4b74      	ldr	r3, [pc, #464]	; (80071e8 <_dtoa_r+0x2e8>)
 8007018:	2200      	movs	r2, #0
 800701a:	4630      	mov	r0, r6
 800701c:	4639      	mov	r1, r7
 800701e:	f7f9 f953 	bl	80002c8 <__aeabi_dsub>
 8007022:	a365      	add	r3, pc, #404	; (adr r3, 80071b8 <_dtoa_r+0x2b8>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fb06 	bl	8000638 <__aeabi_dmul>
 800702c:	a364      	add	r3, pc, #400	; (adr r3, 80071c0 <_dtoa_r+0x2c0>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f94b 	bl	80002cc <__adddf3>
 8007036:	4606      	mov	r6, r0
 8007038:	4628      	mov	r0, r5
 800703a:	460f      	mov	r7, r1
 800703c:	f7f9 fa92 	bl	8000564 <__aeabi_i2d>
 8007040:	a361      	add	r3, pc, #388	; (adr r3, 80071c8 <_dtoa_r+0x2c8>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 faf7 	bl	8000638 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4630      	mov	r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	f7f9 f93b 	bl	80002cc <__adddf3>
 8007056:	4606      	mov	r6, r0
 8007058:	460f      	mov	r7, r1
 800705a:	f7f9 fd9d 	bl	8000b98 <__aeabi_d2iz>
 800705e:	2200      	movs	r2, #0
 8007060:	9000      	str	r0, [sp, #0]
 8007062:	2300      	movs	r3, #0
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800706c:	b150      	cbz	r0, 8007084 <_dtoa_r+0x184>
 800706e:	9800      	ldr	r0, [sp, #0]
 8007070:	f7f9 fa78 	bl	8000564 <__aeabi_i2d>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	f7f9 fd46 	bl	8000b08 <__aeabi_dcmpeq>
 800707c:	b910      	cbnz	r0, 8007084 <_dtoa_r+0x184>
 800707e:	9b00      	ldr	r3, [sp, #0]
 8007080:	3b01      	subs	r3, #1
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	9b00      	ldr	r3, [sp, #0]
 8007086:	2b16      	cmp	r3, #22
 8007088:	d85a      	bhi.n	8007140 <_dtoa_r+0x240>
 800708a:	9a00      	ldr	r2, [sp, #0]
 800708c:	4b57      	ldr	r3, [pc, #348]	; (80071ec <_dtoa_r+0x2ec>)
 800708e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	ec51 0b19 	vmov	r0, r1, d9
 800709a:	f7f9 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d050      	beq.n	8007144 <_dtoa_r+0x244>
 80070a2:	9b00      	ldr	r3, [sp, #0]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80070ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070ae:	1b5d      	subs	r5, r3, r5
 80070b0:	1e6b      	subs	r3, r5, #1
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	bf45      	ittet	mi
 80070b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80070ba:	9304      	strmi	r3, [sp, #16]
 80070bc:	2300      	movpl	r3, #0
 80070be:	2300      	movmi	r3, #0
 80070c0:	bf4c      	ite	mi
 80070c2:	9305      	strmi	r3, [sp, #20]
 80070c4:	9304      	strpl	r3, [sp, #16]
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	db3d      	blt.n	8007148 <_dtoa_r+0x248>
 80070cc:	9b05      	ldr	r3, [sp, #20]
 80070ce:	9a00      	ldr	r2, [sp, #0]
 80070d0:	920a      	str	r2, [sp, #40]	; 0x28
 80070d2:	4413      	add	r3, r2
 80070d4:	9305      	str	r3, [sp, #20]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9307      	str	r3, [sp, #28]
 80070da:	9b06      	ldr	r3, [sp, #24]
 80070dc:	2b09      	cmp	r3, #9
 80070de:	f200 8089 	bhi.w	80071f4 <_dtoa_r+0x2f4>
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	bfc4      	itt	gt
 80070e6:	3b04      	subgt	r3, #4
 80070e8:	9306      	strgt	r3, [sp, #24]
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	f1a3 0302 	sub.w	r3, r3, #2
 80070f0:	bfcc      	ite	gt
 80070f2:	2500      	movgt	r5, #0
 80070f4:	2501      	movle	r5, #1
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	f200 8087 	bhi.w	800720a <_dtoa_r+0x30a>
 80070fc:	e8df f003 	tbb	[pc, r3]
 8007100:	59383a2d 	.word	0x59383a2d
 8007104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007108:	441d      	add	r5, r3
 800710a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800710e:	2b20      	cmp	r3, #32
 8007110:	bfc1      	itttt	gt
 8007112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800711a:	fa0b f303 	lslgt.w	r3, fp, r3
 800711e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007122:	bfda      	itte	le
 8007124:	f1c3 0320 	rsble	r3, r3, #32
 8007128:	fa06 f003 	lslle.w	r0, r6, r3
 800712c:	4318      	orrgt	r0, r3
 800712e:	f7f9 fa09 	bl	8000544 <__aeabi_ui2d>
 8007132:	2301      	movs	r3, #1
 8007134:	4606      	mov	r6, r0
 8007136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800713a:	3d01      	subs	r5, #1
 800713c:	930e      	str	r3, [sp, #56]	; 0x38
 800713e:	e76a      	b.n	8007016 <_dtoa_r+0x116>
 8007140:	2301      	movs	r3, #1
 8007142:	e7b2      	b.n	80070aa <_dtoa_r+0x1aa>
 8007144:	900b      	str	r0, [sp, #44]	; 0x2c
 8007146:	e7b1      	b.n	80070ac <_dtoa_r+0x1ac>
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	9a00      	ldr	r2, [sp, #0]
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	4253      	negs	r3, r2
 8007152:	9307      	str	r3, [sp, #28]
 8007154:	2300      	movs	r3, #0
 8007156:	930a      	str	r3, [sp, #40]	; 0x28
 8007158:	e7bf      	b.n	80070da <_dtoa_r+0x1da>
 800715a:	2300      	movs	r3, #0
 800715c:	9308      	str	r3, [sp, #32]
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	dc55      	bgt.n	8007210 <_dtoa_r+0x310>
 8007164:	2301      	movs	r3, #1
 8007166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800716a:	461a      	mov	r2, r3
 800716c:	9209      	str	r2, [sp, #36]	; 0x24
 800716e:	e00c      	b.n	800718a <_dtoa_r+0x28a>
 8007170:	2301      	movs	r3, #1
 8007172:	e7f3      	b.n	800715c <_dtoa_r+0x25c>
 8007174:	2300      	movs	r3, #0
 8007176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007178:	9308      	str	r3, [sp, #32]
 800717a:	9b00      	ldr	r3, [sp, #0]
 800717c:	4413      	add	r3, r2
 800717e:	9302      	str	r3, [sp, #8]
 8007180:	3301      	adds	r3, #1
 8007182:	2b01      	cmp	r3, #1
 8007184:	9303      	str	r3, [sp, #12]
 8007186:	bfb8      	it	lt
 8007188:	2301      	movlt	r3, #1
 800718a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800718c:	2200      	movs	r2, #0
 800718e:	6042      	str	r2, [r0, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	f102 0614 	add.w	r6, r2, #20
 8007196:	429e      	cmp	r6, r3
 8007198:	6841      	ldr	r1, [r0, #4]
 800719a:	d93d      	bls.n	8007218 <_dtoa_r+0x318>
 800719c:	4620      	mov	r0, r4
 800719e:	f000 fed7 	bl	8007f50 <_Balloc>
 80071a2:	9001      	str	r0, [sp, #4]
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d13b      	bne.n	8007220 <_dtoa_r+0x320>
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <_dtoa_r+0x2f0>)
 80071aa:	4602      	mov	r2, r0
 80071ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071b0:	e6c0      	b.n	8006f34 <_dtoa_r+0x34>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7df      	b.n	8007176 <_dtoa_r+0x276>
 80071b6:	bf00      	nop
 80071b8:	636f4361 	.word	0x636f4361
 80071bc:	3fd287a7 	.word	0x3fd287a7
 80071c0:	8b60c8b3 	.word	0x8b60c8b3
 80071c4:	3fc68a28 	.word	0x3fc68a28
 80071c8:	509f79fb 	.word	0x509f79fb
 80071cc:	3fd34413 	.word	0x3fd34413
 80071d0:	0800b941 	.word	0x0800b941
 80071d4:	0800b958 	.word	0x0800b958
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	0800b93d 	.word	0x0800b93d
 80071e0:	0800b934 	.word	0x0800b934
 80071e4:	0800b911 	.word	0x0800b911
 80071e8:	3ff80000 	.word	0x3ff80000
 80071ec:	0800baa8 	.word	0x0800baa8
 80071f0:	0800b9b3 	.word	0x0800b9b3
 80071f4:	2501      	movs	r5, #1
 80071f6:	2300      	movs	r3, #0
 80071f8:	9306      	str	r3, [sp, #24]
 80071fa:	9508      	str	r5, [sp, #32]
 80071fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007204:	2200      	movs	r2, #0
 8007206:	2312      	movs	r3, #18
 8007208:	e7b0      	b.n	800716c <_dtoa_r+0x26c>
 800720a:	2301      	movs	r3, #1
 800720c:	9308      	str	r3, [sp, #32]
 800720e:	e7f5      	b.n	80071fc <_dtoa_r+0x2fc>
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007216:	e7b8      	b.n	800718a <_dtoa_r+0x28a>
 8007218:	3101      	adds	r1, #1
 800721a:	6041      	str	r1, [r0, #4]
 800721c:	0052      	lsls	r2, r2, #1
 800721e:	e7b8      	b.n	8007192 <_dtoa_r+0x292>
 8007220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007222:	9a01      	ldr	r2, [sp, #4]
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	2b0e      	cmp	r3, #14
 800722a:	f200 809d 	bhi.w	8007368 <_dtoa_r+0x468>
 800722e:	2d00      	cmp	r5, #0
 8007230:	f000 809a 	beq.w	8007368 <_dtoa_r+0x468>
 8007234:	9b00      	ldr	r3, [sp, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd32      	ble.n	80072a0 <_dtoa_r+0x3a0>
 800723a:	4ab7      	ldr	r2, [pc, #732]	; (8007518 <_dtoa_r+0x618>)
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007248:	9b00      	ldr	r3, [sp, #0]
 800724a:	05d8      	lsls	r0, r3, #23
 800724c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007250:	d516      	bpl.n	8007280 <_dtoa_r+0x380>
 8007252:	4bb2      	ldr	r3, [pc, #712]	; (800751c <_dtoa_r+0x61c>)
 8007254:	ec51 0b19 	vmov	r0, r1, d9
 8007258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800725c:	f7f9 fb16 	bl	800088c <__aeabi_ddiv>
 8007260:	f007 070f 	and.w	r7, r7, #15
 8007264:	4682      	mov	sl, r0
 8007266:	468b      	mov	fp, r1
 8007268:	2503      	movs	r5, #3
 800726a:	4eac      	ldr	r6, [pc, #688]	; (800751c <_dtoa_r+0x61c>)
 800726c:	b957      	cbnz	r7, 8007284 <_dtoa_r+0x384>
 800726e:	4642      	mov	r2, r8
 8007270:	464b      	mov	r3, r9
 8007272:	4650      	mov	r0, sl
 8007274:	4659      	mov	r1, fp
 8007276:	f7f9 fb09 	bl	800088c <__aeabi_ddiv>
 800727a:	4682      	mov	sl, r0
 800727c:	468b      	mov	fp, r1
 800727e:	e028      	b.n	80072d2 <_dtoa_r+0x3d2>
 8007280:	2502      	movs	r5, #2
 8007282:	e7f2      	b.n	800726a <_dtoa_r+0x36a>
 8007284:	07f9      	lsls	r1, r7, #31
 8007286:	d508      	bpl.n	800729a <_dtoa_r+0x39a>
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007290:	f7f9 f9d2 	bl	8000638 <__aeabi_dmul>
 8007294:	3501      	adds	r5, #1
 8007296:	4680      	mov	r8, r0
 8007298:	4689      	mov	r9, r1
 800729a:	107f      	asrs	r7, r7, #1
 800729c:	3608      	adds	r6, #8
 800729e:	e7e5      	b.n	800726c <_dtoa_r+0x36c>
 80072a0:	f000 809b 	beq.w	80073da <_dtoa_r+0x4da>
 80072a4:	9b00      	ldr	r3, [sp, #0]
 80072a6:	4f9d      	ldr	r7, [pc, #628]	; (800751c <_dtoa_r+0x61c>)
 80072a8:	425e      	negs	r6, r3
 80072aa:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <_dtoa_r+0x618>)
 80072ac:	f006 020f 	and.w	r2, r6, #15
 80072b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	ec51 0b19 	vmov	r0, r1, d9
 80072bc:	f7f9 f9bc 	bl	8000638 <__aeabi_dmul>
 80072c0:	1136      	asrs	r6, r6, #4
 80072c2:	4682      	mov	sl, r0
 80072c4:	468b      	mov	fp, r1
 80072c6:	2300      	movs	r3, #0
 80072c8:	2502      	movs	r5, #2
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d17a      	bne.n	80073c4 <_dtoa_r+0x4c4>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1d3      	bne.n	800727a <_dtoa_r+0x37a>
 80072d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8082 	beq.w	80073de <_dtoa_r+0x4de>
 80072da:	4b91      	ldr	r3, [pc, #580]	; (8007520 <_dtoa_r+0x620>)
 80072dc:	2200      	movs	r2, #0
 80072de:	4650      	mov	r0, sl
 80072e0:	4659      	mov	r1, fp
 80072e2:	f7f9 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d079      	beq.n	80073de <_dtoa_r+0x4de>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d076      	beq.n	80073de <_dtoa_r+0x4de>
 80072f0:	9b02      	ldr	r3, [sp, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dd36      	ble.n	8007364 <_dtoa_r+0x464>
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	1e5f      	subs	r7, r3, #1
 80072fe:	2200      	movs	r2, #0
 8007300:	4b88      	ldr	r3, [pc, #544]	; (8007524 <_dtoa_r+0x624>)
 8007302:	f7f9 f999 	bl	8000638 <__aeabi_dmul>
 8007306:	9e02      	ldr	r6, [sp, #8]
 8007308:	4682      	mov	sl, r0
 800730a:	468b      	mov	fp, r1
 800730c:	3501      	adds	r5, #1
 800730e:	4628      	mov	r0, r5
 8007310:	f7f9 f928 	bl	8000564 <__aeabi_i2d>
 8007314:	4652      	mov	r2, sl
 8007316:	465b      	mov	r3, fp
 8007318:	f7f9 f98e 	bl	8000638 <__aeabi_dmul>
 800731c:	4b82      	ldr	r3, [pc, #520]	; (8007528 <_dtoa_r+0x628>)
 800731e:	2200      	movs	r2, #0
 8007320:	f7f8 ffd4 	bl	80002cc <__adddf3>
 8007324:	46d0      	mov	r8, sl
 8007326:	46d9      	mov	r9, fp
 8007328:	4682      	mov	sl, r0
 800732a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800732e:	2e00      	cmp	r6, #0
 8007330:	d158      	bne.n	80073e4 <_dtoa_r+0x4e4>
 8007332:	4b7e      	ldr	r3, [pc, #504]	; (800752c <_dtoa_r+0x62c>)
 8007334:	2200      	movs	r2, #0
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	f7f8 ffc5 	bl	80002c8 <__aeabi_dsub>
 800733e:	4652      	mov	r2, sl
 8007340:	465b      	mov	r3, fp
 8007342:	4680      	mov	r8, r0
 8007344:	4689      	mov	r9, r1
 8007346:	f7f9 fc07 	bl	8000b58 <__aeabi_dcmpgt>
 800734a:	2800      	cmp	r0, #0
 800734c:	f040 8295 	bne.w	800787a <_dtoa_r+0x97a>
 8007350:	4652      	mov	r2, sl
 8007352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f9 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800735e:	2800      	cmp	r0, #0
 8007360:	f040 8289 	bne.w	8007876 <_dtoa_r+0x976>
 8007364:	ec5b ab19 	vmov	sl, fp, d9
 8007368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800736a:	2b00      	cmp	r3, #0
 800736c:	f2c0 8148 	blt.w	8007600 <_dtoa_r+0x700>
 8007370:	9a00      	ldr	r2, [sp, #0]
 8007372:	2a0e      	cmp	r2, #14
 8007374:	f300 8144 	bgt.w	8007600 <_dtoa_r+0x700>
 8007378:	4b67      	ldr	r3, [pc, #412]	; (8007518 <_dtoa_r+0x618>)
 800737a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800737e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	f280 80d5 	bge.w	8007534 <_dtoa_r+0x634>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f300 80d1 	bgt.w	8007534 <_dtoa_r+0x634>
 8007392:	f040 826f 	bne.w	8007874 <_dtoa_r+0x974>
 8007396:	4b65      	ldr	r3, [pc, #404]	; (800752c <_dtoa_r+0x62c>)
 8007398:	2200      	movs	r2, #0
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	f7f9 f94b 	bl	8000638 <__aeabi_dmul>
 80073a2:	4652      	mov	r2, sl
 80073a4:	465b      	mov	r3, fp
 80073a6:	f7f9 fbcd 	bl	8000b44 <__aeabi_dcmpge>
 80073aa:	9e03      	ldr	r6, [sp, #12]
 80073ac:	4637      	mov	r7, r6
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f040 8245 	bne.w	800783e <_dtoa_r+0x93e>
 80073b4:	9d01      	ldr	r5, [sp, #4]
 80073b6:	2331      	movs	r3, #49	; 0x31
 80073b8:	f805 3b01 	strb.w	r3, [r5], #1
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	e240      	b.n	8007846 <_dtoa_r+0x946>
 80073c4:	07f2      	lsls	r2, r6, #31
 80073c6:	d505      	bpl.n	80073d4 <_dtoa_r+0x4d4>
 80073c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073cc:	f7f9 f934 	bl	8000638 <__aeabi_dmul>
 80073d0:	3501      	adds	r5, #1
 80073d2:	2301      	movs	r3, #1
 80073d4:	1076      	asrs	r6, r6, #1
 80073d6:	3708      	adds	r7, #8
 80073d8:	e777      	b.n	80072ca <_dtoa_r+0x3ca>
 80073da:	2502      	movs	r5, #2
 80073dc:	e779      	b.n	80072d2 <_dtoa_r+0x3d2>
 80073de:	9f00      	ldr	r7, [sp, #0]
 80073e0:	9e03      	ldr	r6, [sp, #12]
 80073e2:	e794      	b.n	800730e <_dtoa_r+0x40e>
 80073e4:	9901      	ldr	r1, [sp, #4]
 80073e6:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <_dtoa_r+0x618>)
 80073e8:	4431      	add	r1, r6
 80073ea:	910d      	str	r1, [sp, #52]	; 0x34
 80073ec:	9908      	ldr	r1, [sp, #32]
 80073ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d043      	beq.n	8007482 <_dtoa_r+0x582>
 80073fa:	494d      	ldr	r1, [pc, #308]	; (8007530 <_dtoa_r+0x630>)
 80073fc:	2000      	movs	r0, #0
 80073fe:	f7f9 fa45 	bl	800088c <__aeabi_ddiv>
 8007402:	4652      	mov	r2, sl
 8007404:	465b      	mov	r3, fp
 8007406:	f7f8 ff5f 	bl	80002c8 <__aeabi_dsub>
 800740a:	9d01      	ldr	r5, [sp, #4]
 800740c:	4682      	mov	sl, r0
 800740e:	468b      	mov	fp, r1
 8007410:	4649      	mov	r1, r9
 8007412:	4640      	mov	r0, r8
 8007414:	f7f9 fbc0 	bl	8000b98 <__aeabi_d2iz>
 8007418:	4606      	mov	r6, r0
 800741a:	f7f9 f8a3 	bl	8000564 <__aeabi_i2d>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4640      	mov	r0, r8
 8007424:	4649      	mov	r1, r9
 8007426:	f7f8 ff4f 	bl	80002c8 <__aeabi_dsub>
 800742a:	3630      	adds	r6, #48	; 0x30
 800742c:	f805 6b01 	strb.w	r6, [r5], #1
 8007430:	4652      	mov	r2, sl
 8007432:	465b      	mov	r3, fp
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	f7f9 fb70 	bl	8000b1c <__aeabi_dcmplt>
 800743c:	2800      	cmp	r0, #0
 800743e:	d163      	bne.n	8007508 <_dtoa_r+0x608>
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	4936      	ldr	r1, [pc, #216]	; (8007520 <_dtoa_r+0x620>)
 8007446:	2000      	movs	r0, #0
 8007448:	f7f8 ff3e 	bl	80002c8 <__aeabi_dsub>
 800744c:	4652      	mov	r2, sl
 800744e:	465b      	mov	r3, fp
 8007450:	f7f9 fb64 	bl	8000b1c <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 80b5 	bne.w	80075c4 <_dtoa_r+0x6c4>
 800745a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800745c:	429d      	cmp	r5, r3
 800745e:	d081      	beq.n	8007364 <_dtoa_r+0x464>
 8007460:	4b30      	ldr	r3, [pc, #192]	; (8007524 <_dtoa_r+0x624>)
 8007462:	2200      	movs	r2, #0
 8007464:	4650      	mov	r0, sl
 8007466:	4659      	mov	r1, fp
 8007468:	f7f9 f8e6 	bl	8000638 <__aeabi_dmul>
 800746c:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <_dtoa_r+0x624>)
 800746e:	4682      	mov	sl, r0
 8007470:	468b      	mov	fp, r1
 8007472:	4640      	mov	r0, r8
 8007474:	4649      	mov	r1, r9
 8007476:	2200      	movs	r2, #0
 8007478:	f7f9 f8de 	bl	8000638 <__aeabi_dmul>
 800747c:	4680      	mov	r8, r0
 800747e:	4689      	mov	r9, r1
 8007480:	e7c6      	b.n	8007410 <_dtoa_r+0x510>
 8007482:	4650      	mov	r0, sl
 8007484:	4659      	mov	r1, fp
 8007486:	f7f9 f8d7 	bl	8000638 <__aeabi_dmul>
 800748a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748c:	9d01      	ldr	r5, [sp, #4]
 800748e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	4649      	mov	r1, r9
 8007496:	4640      	mov	r0, r8
 8007498:	f7f9 fb7e 	bl	8000b98 <__aeabi_d2iz>
 800749c:	4606      	mov	r6, r0
 800749e:	f7f9 f861 	bl	8000564 <__aeabi_i2d>
 80074a2:	3630      	adds	r6, #48	; 0x30
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f8 ff0c 	bl	80002c8 <__aeabi_dsub>
 80074b0:	f805 6b01 	strb.w	r6, [r5], #1
 80074b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b6:	429d      	cmp	r5, r3
 80074b8:	4680      	mov	r8, r0
 80074ba:	4689      	mov	r9, r1
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	d124      	bne.n	800750c <_dtoa_r+0x60c>
 80074c2:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <_dtoa_r+0x630>)
 80074c4:	4650      	mov	r0, sl
 80074c6:	4659      	mov	r1, fp
 80074c8:	f7f8 ff00 	bl	80002cc <__adddf3>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f9 fb40 	bl	8000b58 <__aeabi_dcmpgt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d173      	bne.n	80075c4 <_dtoa_r+0x6c4>
 80074dc:	4652      	mov	r2, sl
 80074de:	465b      	mov	r3, fp
 80074e0:	4913      	ldr	r1, [pc, #76]	; (8007530 <_dtoa_r+0x630>)
 80074e2:	2000      	movs	r0, #0
 80074e4:	f7f8 fef0 	bl	80002c8 <__aeabi_dsub>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 fb14 	bl	8000b1c <__aeabi_dcmplt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f43f af35 	beq.w	8007364 <_dtoa_r+0x464>
 80074fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074fc:	1e6b      	subs	r3, r5, #1
 80074fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007504:	2b30      	cmp	r3, #48	; 0x30
 8007506:	d0f8      	beq.n	80074fa <_dtoa_r+0x5fa>
 8007508:	9700      	str	r7, [sp, #0]
 800750a:	e049      	b.n	80075a0 <_dtoa_r+0x6a0>
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <_dtoa_r+0x624>)
 800750e:	f7f9 f893 	bl	8000638 <__aeabi_dmul>
 8007512:	4680      	mov	r8, r0
 8007514:	4689      	mov	r9, r1
 8007516:	e7bd      	b.n	8007494 <_dtoa_r+0x594>
 8007518:	0800baa8 	.word	0x0800baa8
 800751c:	0800ba80 	.word	0x0800ba80
 8007520:	3ff00000 	.word	0x3ff00000
 8007524:	40240000 	.word	0x40240000
 8007528:	401c0000 	.word	0x401c0000
 800752c:	40140000 	.word	0x40140000
 8007530:	3fe00000 	.word	0x3fe00000
 8007534:	9d01      	ldr	r5, [sp, #4]
 8007536:	4656      	mov	r6, sl
 8007538:	465f      	mov	r7, fp
 800753a:	4642      	mov	r2, r8
 800753c:	464b      	mov	r3, r9
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	f7f9 f9a3 	bl	800088c <__aeabi_ddiv>
 8007546:	f7f9 fb27 	bl	8000b98 <__aeabi_d2iz>
 800754a:	4682      	mov	sl, r0
 800754c:	f7f9 f80a 	bl	8000564 <__aeabi_i2d>
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	f7f9 f870 	bl	8000638 <__aeabi_dmul>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007564:	f7f8 feb0 	bl	80002c8 <__aeabi_dsub>
 8007568:	f805 6b01 	strb.w	r6, [r5], #1
 800756c:	9e01      	ldr	r6, [sp, #4]
 800756e:	9f03      	ldr	r7, [sp, #12]
 8007570:	1bae      	subs	r6, r5, r6
 8007572:	42b7      	cmp	r7, r6
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	d135      	bne.n	80075e6 <_dtoa_r+0x6e6>
 800757a:	f7f8 fea7 	bl	80002cc <__adddf3>
 800757e:	4642      	mov	r2, r8
 8007580:	464b      	mov	r3, r9
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	f7f9 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800758a:	b9d0      	cbnz	r0, 80075c2 <_dtoa_r+0x6c2>
 800758c:	4642      	mov	r2, r8
 800758e:	464b      	mov	r3, r9
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f9 fab8 	bl	8000b08 <__aeabi_dcmpeq>
 8007598:	b110      	cbz	r0, 80075a0 <_dtoa_r+0x6a0>
 800759a:	f01a 0f01 	tst.w	sl, #1
 800759e:	d110      	bne.n	80075c2 <_dtoa_r+0x6c2>
 80075a0:	4620      	mov	r0, r4
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	f000 fd13 	bl	8007fd0 <_Bfree>
 80075aa:	2300      	movs	r3, #0
 80075ac:	9800      	ldr	r0, [sp, #0]
 80075ae:	702b      	strb	r3, [r5, #0]
 80075b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b2:	3001      	adds	r0, #1
 80075b4:	6018      	str	r0, [r3, #0]
 80075b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f43f acf1 	beq.w	8006fa0 <_dtoa_r+0xa0>
 80075be:	601d      	str	r5, [r3, #0]
 80075c0:	e4ee      	b.n	8006fa0 <_dtoa_r+0xa0>
 80075c2:	9f00      	ldr	r7, [sp, #0]
 80075c4:	462b      	mov	r3, r5
 80075c6:	461d      	mov	r5, r3
 80075c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075cc:	2a39      	cmp	r2, #57	; 0x39
 80075ce:	d106      	bne.n	80075de <_dtoa_r+0x6de>
 80075d0:	9a01      	ldr	r2, [sp, #4]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d1f7      	bne.n	80075c6 <_dtoa_r+0x6c6>
 80075d6:	9901      	ldr	r1, [sp, #4]
 80075d8:	2230      	movs	r2, #48	; 0x30
 80075da:	3701      	adds	r7, #1
 80075dc:	700a      	strb	r2, [r1, #0]
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	3201      	adds	r2, #1
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	e790      	b.n	8007508 <_dtoa_r+0x608>
 80075e6:	4ba6      	ldr	r3, [pc, #664]	; (8007880 <_dtoa_r+0x980>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	f7f9 f825 	bl	8000638 <__aeabi_dmul>
 80075ee:	2200      	movs	r2, #0
 80075f0:	2300      	movs	r3, #0
 80075f2:	4606      	mov	r6, r0
 80075f4:	460f      	mov	r7, r1
 80075f6:	f7f9 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d09d      	beq.n	800753a <_dtoa_r+0x63a>
 80075fe:	e7cf      	b.n	80075a0 <_dtoa_r+0x6a0>
 8007600:	9a08      	ldr	r2, [sp, #32]
 8007602:	2a00      	cmp	r2, #0
 8007604:	f000 80d7 	beq.w	80077b6 <_dtoa_r+0x8b6>
 8007608:	9a06      	ldr	r2, [sp, #24]
 800760a:	2a01      	cmp	r2, #1
 800760c:	f300 80ba 	bgt.w	8007784 <_dtoa_r+0x884>
 8007610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007612:	2a00      	cmp	r2, #0
 8007614:	f000 80b2 	beq.w	800777c <_dtoa_r+0x87c>
 8007618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800761c:	9e07      	ldr	r6, [sp, #28]
 800761e:	9d04      	ldr	r5, [sp, #16]
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	441a      	add	r2, r3
 8007624:	9204      	str	r2, [sp, #16]
 8007626:	9a05      	ldr	r2, [sp, #20]
 8007628:	2101      	movs	r1, #1
 800762a:	441a      	add	r2, r3
 800762c:	4620      	mov	r0, r4
 800762e:	9205      	str	r2, [sp, #20]
 8007630:	f000 fd86 	bl	8008140 <__i2b>
 8007634:	4607      	mov	r7, r0
 8007636:	2d00      	cmp	r5, #0
 8007638:	dd0c      	ble.n	8007654 <_dtoa_r+0x754>
 800763a:	9b05      	ldr	r3, [sp, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd09      	ble.n	8007654 <_dtoa_r+0x754>
 8007640:	42ab      	cmp	r3, r5
 8007642:	9a04      	ldr	r2, [sp, #16]
 8007644:	bfa8      	it	ge
 8007646:	462b      	movge	r3, r5
 8007648:	1ad2      	subs	r2, r2, r3
 800764a:	9204      	str	r2, [sp, #16]
 800764c:	9a05      	ldr	r2, [sp, #20]
 800764e:	1aed      	subs	r5, r5, r3
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	b31b      	cbz	r3, 80076a0 <_dtoa_r+0x7a0>
 8007658:	9b08      	ldr	r3, [sp, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80af 	beq.w	80077be <_dtoa_r+0x8be>
 8007660:	2e00      	cmp	r6, #0
 8007662:	dd13      	ble.n	800768c <_dtoa_r+0x78c>
 8007664:	4639      	mov	r1, r7
 8007666:	4632      	mov	r2, r6
 8007668:	4620      	mov	r0, r4
 800766a:	f000 fe29 	bl	80082c0 <__pow5mult>
 800766e:	ee18 2a10 	vmov	r2, s16
 8007672:	4601      	mov	r1, r0
 8007674:	4607      	mov	r7, r0
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fd78 	bl	800816c <__multiply>
 800767c:	ee18 1a10 	vmov	r1, s16
 8007680:	4680      	mov	r8, r0
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fca4 	bl	8007fd0 <_Bfree>
 8007688:	ee08 8a10 	vmov	s16, r8
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	1b9a      	subs	r2, r3, r6
 8007690:	d006      	beq.n	80076a0 <_dtoa_r+0x7a0>
 8007692:	ee18 1a10 	vmov	r1, s16
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fe12 	bl	80082c0 <__pow5mult>
 800769c:	ee08 0a10 	vmov	s16, r0
 80076a0:	2101      	movs	r1, #1
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fd4c 	bl	8008140 <__i2b>
 80076a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	4606      	mov	r6, r0
 80076ae:	f340 8088 	ble.w	80077c2 <_dtoa_r+0x8c2>
 80076b2:	461a      	mov	r2, r3
 80076b4:	4601      	mov	r1, r0
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fe02 	bl	80082c0 <__pow5mult>
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	4606      	mov	r6, r0
 80076c2:	f340 8081 	ble.w	80077c8 <_dtoa_r+0x8c8>
 80076c6:	f04f 0800 	mov.w	r8, #0
 80076ca:	6933      	ldr	r3, [r6, #16]
 80076cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076d0:	6918      	ldr	r0, [r3, #16]
 80076d2:	f000 fce5 	bl	80080a0 <__hi0bits>
 80076d6:	f1c0 0020 	rsb	r0, r0, #32
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	4418      	add	r0, r3
 80076de:	f010 001f 	ands.w	r0, r0, #31
 80076e2:	f000 8092 	beq.w	800780a <_dtoa_r+0x90a>
 80076e6:	f1c0 0320 	rsb	r3, r0, #32
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	f340 808a 	ble.w	8007804 <_dtoa_r+0x904>
 80076f0:	f1c0 001c 	rsb	r0, r0, #28
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	4403      	add	r3, r0
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	4403      	add	r3, r0
 80076fe:	4405      	add	r5, r0
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	dd07      	ble.n	8007718 <_dtoa_r+0x818>
 8007708:	ee18 1a10 	vmov	r1, s16
 800770c:	461a      	mov	r2, r3
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fe30 	bl	8008374 <__lshift>
 8007714:	ee08 0a10 	vmov	s16, r0
 8007718:	9b05      	ldr	r3, [sp, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd05      	ble.n	800772a <_dtoa_r+0x82a>
 800771e:	4631      	mov	r1, r6
 8007720:	461a      	mov	r2, r3
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fe26 	bl	8008374 <__lshift>
 8007728:	4606      	mov	r6, r0
 800772a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d06e      	beq.n	800780e <_dtoa_r+0x90e>
 8007730:	ee18 0a10 	vmov	r0, s16
 8007734:	4631      	mov	r1, r6
 8007736:	f000 fe8d 	bl	8008454 <__mcmp>
 800773a:	2800      	cmp	r0, #0
 800773c:	da67      	bge.n	800780e <_dtoa_r+0x90e>
 800773e:	9b00      	ldr	r3, [sp, #0]
 8007740:	3b01      	subs	r3, #1
 8007742:	ee18 1a10 	vmov	r1, s16
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	220a      	movs	r2, #10
 800774a:	2300      	movs	r3, #0
 800774c:	4620      	mov	r0, r4
 800774e:	f000 fc61 	bl	8008014 <__multadd>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	ee08 0a10 	vmov	s16, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 81b1 	beq.w	8007ac0 <_dtoa_r+0xbc0>
 800775e:	2300      	movs	r3, #0
 8007760:	4639      	mov	r1, r7
 8007762:	220a      	movs	r2, #10
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fc55 	bl	8008014 <__multadd>
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	4607      	mov	r7, r0
 8007770:	f300 808e 	bgt.w	8007890 <_dtoa_r+0x990>
 8007774:	9b06      	ldr	r3, [sp, #24]
 8007776:	2b02      	cmp	r3, #2
 8007778:	dc51      	bgt.n	800781e <_dtoa_r+0x91e>
 800777a:	e089      	b.n	8007890 <_dtoa_r+0x990>
 800777c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800777e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007782:	e74b      	b.n	800761c <_dtoa_r+0x71c>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	1e5e      	subs	r6, r3, #1
 8007788:	9b07      	ldr	r3, [sp, #28]
 800778a:	42b3      	cmp	r3, r6
 800778c:	bfbf      	itttt	lt
 800778e:	9b07      	ldrlt	r3, [sp, #28]
 8007790:	9607      	strlt	r6, [sp, #28]
 8007792:	1af2      	sublt	r2, r6, r3
 8007794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007796:	bfb6      	itet	lt
 8007798:	189b      	addlt	r3, r3, r2
 800779a:	1b9e      	subge	r6, r3, r6
 800779c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	bfb8      	it	lt
 80077a2:	2600      	movlt	r6, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bfb7      	itett	lt
 80077a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80077ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80077b0:	1a9d      	sublt	r5, r3, r2
 80077b2:	2300      	movlt	r3, #0
 80077b4:	e734      	b.n	8007620 <_dtoa_r+0x720>
 80077b6:	9e07      	ldr	r6, [sp, #28]
 80077b8:	9d04      	ldr	r5, [sp, #16]
 80077ba:	9f08      	ldr	r7, [sp, #32]
 80077bc:	e73b      	b.n	8007636 <_dtoa_r+0x736>
 80077be:	9a07      	ldr	r2, [sp, #28]
 80077c0:	e767      	b.n	8007692 <_dtoa_r+0x792>
 80077c2:	9b06      	ldr	r3, [sp, #24]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	dc18      	bgt.n	80077fa <_dtoa_r+0x8fa>
 80077c8:	f1ba 0f00 	cmp.w	sl, #0
 80077cc:	d115      	bne.n	80077fa <_dtoa_r+0x8fa>
 80077ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d2:	b993      	cbnz	r3, 80077fa <_dtoa_r+0x8fa>
 80077d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077d8:	0d1b      	lsrs	r3, r3, #20
 80077da:	051b      	lsls	r3, r3, #20
 80077dc:	b183      	cbz	r3, 8007800 <_dtoa_r+0x900>
 80077de:	9b04      	ldr	r3, [sp, #16]
 80077e0:	3301      	adds	r3, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	9b05      	ldr	r3, [sp, #20]
 80077e6:	3301      	adds	r3, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	f04f 0801 	mov.w	r8, #1
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f47f af6a 	bne.w	80076ca <_dtoa_r+0x7ca>
 80077f6:	2001      	movs	r0, #1
 80077f8:	e76f      	b.n	80076da <_dtoa_r+0x7da>
 80077fa:	f04f 0800 	mov.w	r8, #0
 80077fe:	e7f6      	b.n	80077ee <_dtoa_r+0x8ee>
 8007800:	4698      	mov	r8, r3
 8007802:	e7f4      	b.n	80077ee <_dtoa_r+0x8ee>
 8007804:	f43f af7d 	beq.w	8007702 <_dtoa_r+0x802>
 8007808:	4618      	mov	r0, r3
 800780a:	301c      	adds	r0, #28
 800780c:	e772      	b.n	80076f4 <_dtoa_r+0x7f4>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	dc37      	bgt.n	8007884 <_dtoa_r+0x984>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	dd34      	ble.n	8007884 <_dtoa_r+0x984>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	9b02      	ldr	r3, [sp, #8]
 8007820:	b96b      	cbnz	r3, 800783e <_dtoa_r+0x93e>
 8007822:	4631      	mov	r1, r6
 8007824:	2205      	movs	r2, #5
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fbf4 	bl	8008014 <__multadd>
 800782c:	4601      	mov	r1, r0
 800782e:	4606      	mov	r6, r0
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	f000 fe0e 	bl	8008454 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	f73f adbb 	bgt.w	80073b4 <_dtoa_r+0x4b4>
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	9d01      	ldr	r5, [sp, #4]
 8007842:	43db      	mvns	r3, r3
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	4631      	mov	r1, r6
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fbbf 	bl	8007fd0 <_Bfree>
 8007852:	2f00      	cmp	r7, #0
 8007854:	f43f aea4 	beq.w	80075a0 <_dtoa_r+0x6a0>
 8007858:	f1b8 0f00 	cmp.w	r8, #0
 800785c:	d005      	beq.n	800786a <_dtoa_r+0x96a>
 800785e:	45b8      	cmp	r8, r7
 8007860:	d003      	beq.n	800786a <_dtoa_r+0x96a>
 8007862:	4641      	mov	r1, r8
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fbb3 	bl	8007fd0 <_Bfree>
 800786a:	4639      	mov	r1, r7
 800786c:	4620      	mov	r0, r4
 800786e:	f000 fbaf 	bl	8007fd0 <_Bfree>
 8007872:	e695      	b.n	80075a0 <_dtoa_r+0x6a0>
 8007874:	2600      	movs	r6, #0
 8007876:	4637      	mov	r7, r6
 8007878:	e7e1      	b.n	800783e <_dtoa_r+0x93e>
 800787a:	9700      	str	r7, [sp, #0]
 800787c:	4637      	mov	r7, r6
 800787e:	e599      	b.n	80073b4 <_dtoa_r+0x4b4>
 8007880:	40240000 	.word	0x40240000
 8007884:	9b08      	ldr	r3, [sp, #32]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80ca 	beq.w	8007a20 <_dtoa_r+0xb20>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	2d00      	cmp	r5, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x9a0>
 8007894:	4639      	mov	r1, r7
 8007896:	462a      	mov	r2, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fd6b 	bl	8008374 <__lshift>
 800789e:	4607      	mov	r7, r0
 80078a0:	f1b8 0f00 	cmp.w	r8, #0
 80078a4:	d05b      	beq.n	800795e <_dtoa_r+0xa5e>
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fb51 	bl	8007f50 <_Balloc>
 80078ae:	4605      	mov	r5, r0
 80078b0:	b928      	cbnz	r0, 80078be <_dtoa_r+0x9be>
 80078b2:	4b87      	ldr	r3, [pc, #540]	; (8007ad0 <_dtoa_r+0xbd0>)
 80078b4:	4602      	mov	r2, r0
 80078b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078ba:	f7ff bb3b 	b.w	8006f34 <_dtoa_r+0x34>
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	3202      	adds	r2, #2
 80078c2:	0092      	lsls	r2, r2, #2
 80078c4:	f107 010c 	add.w	r1, r7, #12
 80078c8:	300c      	adds	r0, #12
 80078ca:	f000 fb33 	bl	8007f34 <memcpy>
 80078ce:	2201      	movs	r2, #1
 80078d0:	4629      	mov	r1, r5
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fd4e 	bl	8008374 <__lshift>
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	f103 0901 	add.w	r9, r3, #1
 80078de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078e2:	4413      	add	r3, r2
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	f00a 0301 	and.w	r3, sl, #1
 80078ea:	46b8      	mov	r8, r7
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	4607      	mov	r7, r0
 80078f0:	4631      	mov	r1, r6
 80078f2:	ee18 0a10 	vmov	r0, s16
 80078f6:	f7ff fa77 	bl	8006de8 <quorem>
 80078fa:	4641      	mov	r1, r8
 80078fc:	9002      	str	r0, [sp, #8]
 80078fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007902:	ee18 0a10 	vmov	r0, s16
 8007906:	f000 fda5 	bl	8008454 <__mcmp>
 800790a:	463a      	mov	r2, r7
 800790c:	9003      	str	r0, [sp, #12]
 800790e:	4631      	mov	r1, r6
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fdbb 	bl	800848c <__mdiff>
 8007916:	68c2      	ldr	r2, [r0, #12]
 8007918:	f109 3bff 	add.w	fp, r9, #4294967295
 800791c:	4605      	mov	r5, r0
 800791e:	bb02      	cbnz	r2, 8007962 <_dtoa_r+0xa62>
 8007920:	4601      	mov	r1, r0
 8007922:	ee18 0a10 	vmov	r0, s16
 8007926:	f000 fd95 	bl	8008454 <__mcmp>
 800792a:	4602      	mov	r2, r0
 800792c:	4629      	mov	r1, r5
 800792e:	4620      	mov	r0, r4
 8007930:	9207      	str	r2, [sp, #28]
 8007932:	f000 fb4d 	bl	8007fd0 <_Bfree>
 8007936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800793a:	ea43 0102 	orr.w	r1, r3, r2
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	430b      	orrs	r3, r1
 8007942:	464d      	mov	r5, r9
 8007944:	d10f      	bne.n	8007966 <_dtoa_r+0xa66>
 8007946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800794a:	d02a      	beq.n	80079a2 <_dtoa_r+0xaa2>
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	dd02      	ble.n	8007958 <_dtoa_r+0xa58>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007958:	f88b a000 	strb.w	sl, [fp]
 800795c:	e775      	b.n	800784a <_dtoa_r+0x94a>
 800795e:	4638      	mov	r0, r7
 8007960:	e7ba      	b.n	80078d8 <_dtoa_r+0x9d8>
 8007962:	2201      	movs	r2, #1
 8007964:	e7e2      	b.n	800792c <_dtoa_r+0xa2c>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	db04      	blt.n	8007976 <_dtoa_r+0xa76>
 800796c:	9906      	ldr	r1, [sp, #24]
 800796e:	430b      	orrs	r3, r1
 8007970:	9904      	ldr	r1, [sp, #16]
 8007972:	430b      	orrs	r3, r1
 8007974:	d122      	bne.n	80079bc <_dtoa_r+0xabc>
 8007976:	2a00      	cmp	r2, #0
 8007978:	ddee      	ble.n	8007958 <_dtoa_r+0xa58>
 800797a:	ee18 1a10 	vmov	r1, s16
 800797e:	2201      	movs	r2, #1
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fcf7 	bl	8008374 <__lshift>
 8007986:	4631      	mov	r1, r6
 8007988:	ee08 0a10 	vmov	s16, r0
 800798c:	f000 fd62 	bl	8008454 <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	dc03      	bgt.n	800799c <_dtoa_r+0xa9c>
 8007994:	d1e0      	bne.n	8007958 <_dtoa_r+0xa58>
 8007996:	f01a 0f01 	tst.w	sl, #1
 800799a:	d0dd      	beq.n	8007958 <_dtoa_r+0xa58>
 800799c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079a0:	d1d7      	bne.n	8007952 <_dtoa_r+0xa52>
 80079a2:	2339      	movs	r3, #57	; 0x39
 80079a4:	f88b 3000 	strb.w	r3, [fp]
 80079a8:	462b      	mov	r3, r5
 80079aa:	461d      	mov	r5, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079b2:	2a39      	cmp	r2, #57	; 0x39
 80079b4:	d071      	beq.n	8007a9a <_dtoa_r+0xb9a>
 80079b6:	3201      	adds	r2, #1
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	e746      	b.n	800784a <_dtoa_r+0x94a>
 80079bc:	2a00      	cmp	r2, #0
 80079be:	dd07      	ble.n	80079d0 <_dtoa_r+0xad0>
 80079c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079c4:	d0ed      	beq.n	80079a2 <_dtoa_r+0xaa2>
 80079c6:	f10a 0301 	add.w	r3, sl, #1
 80079ca:	f88b 3000 	strb.w	r3, [fp]
 80079ce:	e73c      	b.n	800784a <_dtoa_r+0x94a>
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079d6:	4599      	cmp	r9, r3
 80079d8:	d047      	beq.n	8007a6a <_dtoa_r+0xb6a>
 80079da:	ee18 1a10 	vmov	r1, s16
 80079de:	2300      	movs	r3, #0
 80079e0:	220a      	movs	r2, #10
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fb16 	bl	8008014 <__multadd>
 80079e8:	45b8      	cmp	r8, r7
 80079ea:	ee08 0a10 	vmov	s16, r0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f04f 020a 	mov.w	r2, #10
 80079f6:	4641      	mov	r1, r8
 80079f8:	4620      	mov	r0, r4
 80079fa:	d106      	bne.n	8007a0a <_dtoa_r+0xb0a>
 80079fc:	f000 fb0a 	bl	8008014 <__multadd>
 8007a00:	4680      	mov	r8, r0
 8007a02:	4607      	mov	r7, r0
 8007a04:	f109 0901 	add.w	r9, r9, #1
 8007a08:	e772      	b.n	80078f0 <_dtoa_r+0x9f0>
 8007a0a:	f000 fb03 	bl	8008014 <__multadd>
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4680      	mov	r8, r0
 8007a12:	2300      	movs	r3, #0
 8007a14:	220a      	movs	r2, #10
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fafc 	bl	8008014 <__multadd>
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	e7f1      	b.n	8007a04 <_dtoa_r+0xb04>
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	9302      	str	r3, [sp, #8]
 8007a24:	9d01      	ldr	r5, [sp, #4]
 8007a26:	ee18 0a10 	vmov	r0, s16
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	f7ff f9dc 	bl	8006de8 <quorem>
 8007a30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	f805 ab01 	strb.w	sl, [r5], #1
 8007a3a:	1aea      	subs	r2, r5, r3
 8007a3c:	9b02      	ldr	r3, [sp, #8]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	dd09      	ble.n	8007a56 <_dtoa_r+0xb56>
 8007a42:	ee18 1a10 	vmov	r1, s16
 8007a46:	2300      	movs	r3, #0
 8007a48:	220a      	movs	r2, #10
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fae2 	bl	8008014 <__multadd>
 8007a50:	ee08 0a10 	vmov	s16, r0
 8007a54:	e7e7      	b.n	8007a26 <_dtoa_r+0xb26>
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfc8      	it	gt
 8007a5c:	461d      	movgt	r5, r3
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	bfd8      	it	le
 8007a62:	2501      	movle	r5, #1
 8007a64:	441d      	add	r5, r3
 8007a66:	f04f 0800 	mov.w	r8, #0
 8007a6a:	ee18 1a10 	vmov	r1, s16
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fc7f 	bl	8008374 <__lshift>
 8007a76:	4631      	mov	r1, r6
 8007a78:	ee08 0a10 	vmov	s16, r0
 8007a7c:	f000 fcea 	bl	8008454 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	dc91      	bgt.n	80079a8 <_dtoa_r+0xaa8>
 8007a84:	d102      	bne.n	8007a8c <_dtoa_r+0xb8c>
 8007a86:	f01a 0f01 	tst.w	sl, #1
 8007a8a:	d18d      	bne.n	80079a8 <_dtoa_r+0xaa8>
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	461d      	mov	r5, r3
 8007a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a94:	2a30      	cmp	r2, #48	; 0x30
 8007a96:	d0fa      	beq.n	8007a8e <_dtoa_r+0xb8e>
 8007a98:	e6d7      	b.n	800784a <_dtoa_r+0x94a>
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d184      	bne.n	80079aa <_dtoa_r+0xaaa>
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	2331      	movs	r3, #49	; 0x31
 8007aa8:	7013      	strb	r3, [r2, #0]
 8007aaa:	e6ce      	b.n	800784a <_dtoa_r+0x94a>
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <_dtoa_r+0xbd4>)
 8007aae:	f7ff ba95 	b.w	8006fdc <_dtoa_r+0xdc>
 8007ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f aa6e 	bne.w	8006f96 <_dtoa_r+0x96>
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <_dtoa_r+0xbd8>)
 8007abc:	f7ff ba8e 	b.w	8006fdc <_dtoa_r+0xdc>
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dcae      	bgt.n	8007a24 <_dtoa_r+0xb24>
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f73f aea8 	bgt.w	800781e <_dtoa_r+0x91e>
 8007ace:	e7a9      	b.n	8007a24 <_dtoa_r+0xb24>
 8007ad0:	0800b9b3 	.word	0x0800b9b3
 8007ad4:	0800b910 	.word	0x0800b910
 8007ad8:	0800b934 	.word	0x0800b934

08007adc <__sflush_r>:
 8007adc:	898a      	ldrh	r2, [r1, #12]
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	0710      	lsls	r0, r2, #28
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	d458      	bmi.n	8007b9c <__sflush_r+0xc0>
 8007aea:	684b      	ldr	r3, [r1, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc05      	bgt.n	8007afc <__sflush_r+0x20>
 8007af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc02      	bgt.n	8007afc <__sflush_r+0x20>
 8007af6:	2000      	movs	r0, #0
 8007af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d0f9      	beq.n	8007af6 <__sflush_r+0x1a>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b08:	682f      	ldr	r7, [r5, #0]
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	d032      	beq.n	8007b74 <__sflush_r+0x98>
 8007b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	075a      	lsls	r2, r3, #29
 8007b14:	d505      	bpl.n	8007b22 <__sflush_r+0x46>
 8007b16:	6863      	ldr	r3, [r4, #4]
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b1c:	b10b      	cbz	r3, 8007b22 <__sflush_r+0x46>
 8007b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b20:	1ac0      	subs	r0, r0, r3
 8007b22:	2300      	movs	r3, #0
 8007b24:	4602      	mov	r2, r0
 8007b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b28:	6a21      	ldr	r1, [r4, #32]
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b0      	blx	r6
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	d106      	bne.n	8007b42 <__sflush_r+0x66>
 8007b34:	6829      	ldr	r1, [r5, #0]
 8007b36:	291d      	cmp	r1, #29
 8007b38:	d82c      	bhi.n	8007b94 <__sflush_r+0xb8>
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <__sflush_r+0x108>)
 8007b3c:	40ca      	lsrs	r2, r1
 8007b3e:	07d6      	lsls	r6, r2, #31
 8007b40:	d528      	bpl.n	8007b94 <__sflush_r+0xb8>
 8007b42:	2200      	movs	r2, #0
 8007b44:	6062      	str	r2, [r4, #4]
 8007b46:	04d9      	lsls	r1, r3, #19
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	d504      	bpl.n	8007b58 <__sflush_r+0x7c>
 8007b4e:	1c42      	adds	r2, r0, #1
 8007b50:	d101      	bne.n	8007b56 <__sflush_r+0x7a>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b903      	cbnz	r3, 8007b58 <__sflush_r+0x7c>
 8007b56:	6560      	str	r0, [r4, #84]	; 0x54
 8007b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b5a:	602f      	str	r7, [r5, #0]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d0ca      	beq.n	8007af6 <__sflush_r+0x1a>
 8007b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b64:	4299      	cmp	r1, r3
 8007b66:	d002      	beq.n	8007b6e <__sflush_r+0x92>
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 fd8b 	bl	8008684 <_free_r>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	6360      	str	r0, [r4, #52]	; 0x34
 8007b72:	e7c1      	b.n	8007af8 <__sflush_r+0x1c>
 8007b74:	6a21      	ldr	r1, [r4, #32]
 8007b76:	2301      	movs	r3, #1
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b0      	blx	r6
 8007b7c:	1c41      	adds	r1, r0, #1
 8007b7e:	d1c7      	bne.n	8007b10 <__sflush_r+0x34>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c4      	beq.n	8007b10 <__sflush_r+0x34>
 8007b86:	2b1d      	cmp	r3, #29
 8007b88:	d001      	beq.n	8007b8e <__sflush_r+0xb2>
 8007b8a:	2b16      	cmp	r3, #22
 8007b8c:	d101      	bne.n	8007b92 <__sflush_r+0xb6>
 8007b8e:	602f      	str	r7, [r5, #0]
 8007b90:	e7b1      	b.n	8007af6 <__sflush_r+0x1a>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	e7ad      	b.n	8007af8 <__sflush_r+0x1c>
 8007b9c:	690f      	ldr	r7, [r1, #16]
 8007b9e:	2f00      	cmp	r7, #0
 8007ba0:	d0a9      	beq.n	8007af6 <__sflush_r+0x1a>
 8007ba2:	0793      	lsls	r3, r2, #30
 8007ba4:	680e      	ldr	r6, [r1, #0]
 8007ba6:	bf08      	it	eq
 8007ba8:	694b      	ldreq	r3, [r1, #20]
 8007baa:	600f      	str	r7, [r1, #0]
 8007bac:	bf18      	it	ne
 8007bae:	2300      	movne	r3, #0
 8007bb0:	eba6 0807 	sub.w	r8, r6, r7
 8007bb4:	608b      	str	r3, [r1, #8]
 8007bb6:	f1b8 0f00 	cmp.w	r8, #0
 8007bba:	dd9c      	ble.n	8007af6 <__sflush_r+0x1a>
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bc0:	4643      	mov	r3, r8
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b0      	blx	r6
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dc06      	bgt.n	8007bda <__sflush_r+0xfe>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	e78e      	b.n	8007af8 <__sflush_r+0x1c>
 8007bda:	4407      	add	r7, r0
 8007bdc:	eba8 0800 	sub.w	r8, r8, r0
 8007be0:	e7e9      	b.n	8007bb6 <__sflush_r+0xda>
 8007be2:	bf00      	nop
 8007be4:	20400001 	.word	0x20400001

08007be8 <_fflush_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	690b      	ldr	r3, [r1, #16]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b913      	cbnz	r3, 8007bf8 <_fflush_r+0x10>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	b118      	cbz	r0, 8007c02 <_fflush_r+0x1a>
 8007bfa:	6983      	ldr	r3, [r0, #24]
 8007bfc:	b90b      	cbnz	r3, 8007c02 <_fflush_r+0x1a>
 8007bfe:	f000 f887 	bl	8007d10 <__sinit>
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <_fflush_r+0x6c>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	d11b      	bne.n	8007c40 <_fflush_r+0x58>
 8007c08:	686c      	ldr	r4, [r5, #4]
 8007c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0ef      	beq.n	8007bf2 <_fflush_r+0xa>
 8007c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c14:	07d0      	lsls	r0, r2, #31
 8007c16:	d404      	bmi.n	8007c22 <_fflush_r+0x3a>
 8007c18:	0599      	lsls	r1, r3, #22
 8007c1a:	d402      	bmi.n	8007c22 <_fflush_r+0x3a>
 8007c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1e:	f000 f91a 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8007c22:	4628      	mov	r0, r5
 8007c24:	4621      	mov	r1, r4
 8007c26:	f7ff ff59 	bl	8007adc <__sflush_r>
 8007c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c2c:	07da      	lsls	r2, r3, #31
 8007c2e:	4605      	mov	r5, r0
 8007c30:	d4e0      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	059b      	lsls	r3, r3, #22
 8007c36:	d4dd      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c3a:	f000 f90d 	bl	8007e58 <__retarget_lock_release_recursive>
 8007c3e:	e7d9      	b.n	8007bf4 <_fflush_r+0xc>
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <_fflush_r+0x70>)
 8007c42:	429c      	cmp	r4, r3
 8007c44:	d101      	bne.n	8007c4a <_fflush_r+0x62>
 8007c46:	68ac      	ldr	r4, [r5, #8]
 8007c48:	e7df      	b.n	8007c0a <_fflush_r+0x22>
 8007c4a:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <_fflush_r+0x74>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	bf08      	it	eq
 8007c50:	68ec      	ldreq	r4, [r5, #12]
 8007c52:	e7da      	b.n	8007c0a <_fflush_r+0x22>
 8007c54:	0800b9e4 	.word	0x0800b9e4
 8007c58:	0800ba04 	.word	0x0800ba04
 8007c5c:	0800b9c4 	.word	0x0800b9c4

08007c60 <std>:
 8007c60:	2300      	movs	r3, #0
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
 8007c66:	e9c0 3300 	strd	r3, r3, [r0]
 8007c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c6e:	6083      	str	r3, [r0, #8]
 8007c70:	8181      	strh	r1, [r0, #12]
 8007c72:	6643      	str	r3, [r0, #100]	; 0x64
 8007c74:	81c2      	strh	r2, [r0, #14]
 8007c76:	6183      	str	r3, [r0, #24]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	305c      	adds	r0, #92	; 0x5c
 8007c7e:	f7fe faf3 	bl	8006268 <memset>
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x38>)
 8007c84:	6263      	str	r3, [r4, #36]	; 0x24
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <std+0x3c>)
 8007c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <std+0x40>)
 8007c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <std+0x44>)
 8007c90:	6224      	str	r4, [r4, #32]
 8007c92:	6323      	str	r3, [r4, #48]	; 0x30
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	bf00      	nop
 8007c98:	08008b19 	.word	0x08008b19
 8007c9c:	08008b3b 	.word	0x08008b3b
 8007ca0:	08008b73 	.word	0x08008b73
 8007ca4:	08008b97 	.word	0x08008b97

08007ca8 <_cleanup_r>:
 8007ca8:	4901      	ldr	r1, [pc, #4]	; (8007cb0 <_cleanup_r+0x8>)
 8007caa:	f000 b8af 	b.w	8007e0c <_fwalk_reent>
 8007cae:	bf00      	nop
 8007cb0:	08007be9 	.word	0x08007be9

08007cb4 <__sfmoreglue>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	2268      	movs	r2, #104	; 0x68
 8007cb8:	1e4d      	subs	r5, r1, #1
 8007cba:	4355      	muls	r5, r2
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cc2:	f000 fd4b 	bl	800875c <_malloc_r>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	b140      	cbz	r0, 8007cdc <__sfmoreglue+0x28>
 8007cca:	2100      	movs	r1, #0
 8007ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8007cd0:	300c      	adds	r0, #12
 8007cd2:	60a0      	str	r0, [r4, #8]
 8007cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cd8:	f7fe fac6 	bl	8006268 <memset>
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bd70      	pop	{r4, r5, r6, pc}

08007ce0 <__sfp_lock_acquire>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_acquire+0x8>)
 8007ce2:	f000 b8b8 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	2000033d 	.word	0x2000033d

08007cec <__sfp_lock_release>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__sfp_lock_release+0x8>)
 8007cee:	f000 b8b3 	b.w	8007e58 <__retarget_lock_release_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	2000033d 	.word	0x2000033d

08007cf8 <__sinit_lock_acquire>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sinit_lock_acquire+0x8>)
 8007cfa:	f000 b8ac 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8007cfe:	bf00      	nop
 8007d00:	2000033e 	.word	0x2000033e

08007d04 <__sinit_lock_release>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__sinit_lock_release+0x8>)
 8007d06:	f000 b8a7 	b.w	8007e58 <__retarget_lock_release_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	2000033e 	.word	0x2000033e

08007d10 <__sinit>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	f7ff fff0 	bl	8007cf8 <__sinit_lock_acquire>
 8007d18:	69a3      	ldr	r3, [r4, #24]
 8007d1a:	b11b      	cbz	r3, 8007d24 <__sinit+0x14>
 8007d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d20:	f7ff bff0 	b.w	8007d04 <__sinit_lock_release>
 8007d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d28:	6523      	str	r3, [r4, #80]	; 0x50
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <__sinit+0x68>)
 8007d2c:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <__sinit+0x6c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	bf04      	itt	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	61a3      	streq	r3, [r4, #24]
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 f820 	bl	8007d80 <__sfp>
 8007d40:	6060      	str	r0, [r4, #4]
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f81c 	bl	8007d80 <__sfp>
 8007d48:	60a0      	str	r0, [r4, #8]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f818 	bl	8007d80 <__sfp>
 8007d50:	2200      	movs	r2, #0
 8007d52:	60e0      	str	r0, [r4, #12]
 8007d54:	2104      	movs	r1, #4
 8007d56:	6860      	ldr	r0, [r4, #4]
 8007d58:	f7ff ff82 	bl	8007c60 <std>
 8007d5c:	68a0      	ldr	r0, [r4, #8]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	2109      	movs	r1, #9
 8007d62:	f7ff ff7d 	bl	8007c60 <std>
 8007d66:	68e0      	ldr	r0, [r4, #12]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	2112      	movs	r1, #18
 8007d6c:	f7ff ff78 	bl	8007c60 <std>
 8007d70:	2301      	movs	r3, #1
 8007d72:	61a3      	str	r3, [r4, #24]
 8007d74:	e7d2      	b.n	8007d1c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	0800b8fc 	.word	0x0800b8fc
 8007d7c:	08007ca9 	.word	0x08007ca9

08007d80 <__sfp>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	4607      	mov	r7, r0
 8007d84:	f7ff ffac 	bl	8007ce0 <__sfp_lock_acquire>
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <__sfp+0x84>)
 8007d8a:	681e      	ldr	r6, [r3, #0]
 8007d8c:	69b3      	ldr	r3, [r6, #24]
 8007d8e:	b913      	cbnz	r3, 8007d96 <__sfp+0x16>
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff ffbd 	bl	8007d10 <__sinit>
 8007d96:	3648      	adds	r6, #72	; 0x48
 8007d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	d503      	bpl.n	8007da8 <__sfp+0x28>
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	b30b      	cbz	r3, 8007de8 <__sfp+0x68>
 8007da4:	6836      	ldr	r6, [r6, #0]
 8007da6:	e7f7      	b.n	8007d98 <__sfp+0x18>
 8007da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dac:	b9d5      	cbnz	r5, 8007de4 <__sfp+0x64>
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <__sfp+0x88>)
 8007db0:	60e3      	str	r3, [r4, #12]
 8007db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007db6:	6665      	str	r5, [r4, #100]	; 0x64
 8007db8:	f000 f84c 	bl	8007e54 <__retarget_lock_init_recursive>
 8007dbc:	f7ff ff96 	bl	8007cec <__sfp_lock_release>
 8007dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc8:	6025      	str	r5, [r4, #0]
 8007dca:	61a5      	str	r5, [r4, #24]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dd4:	f7fe fa48 	bl	8006268 <memset>
 8007dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007de0:	4620      	mov	r0, r4
 8007de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de4:	3468      	adds	r4, #104	; 0x68
 8007de6:	e7d9      	b.n	8007d9c <__sfp+0x1c>
 8007de8:	2104      	movs	r1, #4
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7ff ff62 	bl	8007cb4 <__sfmoreglue>
 8007df0:	4604      	mov	r4, r0
 8007df2:	6030      	str	r0, [r6, #0]
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d1d5      	bne.n	8007da4 <__sfp+0x24>
 8007df8:	f7ff ff78 	bl	8007cec <__sfp_lock_release>
 8007dfc:	230c      	movs	r3, #12
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	e7ee      	b.n	8007de0 <__sfp+0x60>
 8007e02:	bf00      	nop
 8007e04:	0800b8fc 	.word	0x0800b8fc
 8007e08:	ffff0001 	.word	0xffff0001

08007e0c <_fwalk_reent>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4606      	mov	r6, r0
 8007e12:	4688      	mov	r8, r1
 8007e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e18:	2700      	movs	r7, #0
 8007e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e22:	d505      	bpl.n	8007e30 <_fwalk_reent+0x24>
 8007e24:	6824      	ldr	r4, [r4, #0]
 8007e26:	2c00      	cmp	r4, #0
 8007e28:	d1f7      	bne.n	8007e1a <_fwalk_reent+0xe>
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e30:	89ab      	ldrh	r3, [r5, #12]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d907      	bls.n	8007e46 <_fwalk_reent+0x3a>
 8007e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	d003      	beq.n	8007e46 <_fwalk_reent+0x3a>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	47c0      	blx	r8
 8007e44:	4307      	orrs	r7, r0
 8007e46:	3568      	adds	r5, #104	; 0x68
 8007e48:	e7e9      	b.n	8007e1e <_fwalk_reent+0x12>
	...

08007e4c <_localeconv_r>:
 8007e4c:	4800      	ldr	r0, [pc, #0]	; (8007e50 <_localeconv_r+0x4>)
 8007e4e:	4770      	bx	lr
 8007e50:	20000160 	.word	0x20000160

08007e54 <__retarget_lock_init_recursive>:
 8007e54:	4770      	bx	lr

08007e56 <__retarget_lock_acquire_recursive>:
 8007e56:	4770      	bx	lr

08007e58 <__retarget_lock_release_recursive>:
 8007e58:	4770      	bx	lr

08007e5a <__swhatbuf_r>:
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	460e      	mov	r6, r1
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	2900      	cmp	r1, #0
 8007e64:	b096      	sub	sp, #88	; 0x58
 8007e66:	4614      	mov	r4, r2
 8007e68:	461d      	mov	r5, r3
 8007e6a:	da08      	bge.n	8007e7e <__swhatbuf_r+0x24>
 8007e6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	602a      	str	r2, [r5, #0]
 8007e74:	061a      	lsls	r2, r3, #24
 8007e76:	d410      	bmi.n	8007e9a <__swhatbuf_r+0x40>
 8007e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e7c:	e00e      	b.n	8007e9c <__swhatbuf_r+0x42>
 8007e7e:	466a      	mov	r2, sp
 8007e80:	f000 fee0 	bl	8008c44 <_fstat_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dbf1      	blt.n	8007e6c <__swhatbuf_r+0x12>
 8007e88:	9a01      	ldr	r2, [sp, #4]
 8007e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e92:	425a      	negs	r2, r3
 8007e94:	415a      	adcs	r2, r3
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	e7ee      	b.n	8007e78 <__swhatbuf_r+0x1e>
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	b016      	add	sp, #88	; 0x58
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}

08007ea4 <__smakebuf_r>:
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ea8:	079d      	lsls	r5, r3, #30
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	d507      	bpl.n	8007ec0 <__smakebuf_r+0x1c>
 8007eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	6163      	str	r3, [r4, #20]
 8007ebc:	b002      	add	sp, #8
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	ab01      	add	r3, sp, #4
 8007ec2:	466a      	mov	r2, sp
 8007ec4:	f7ff ffc9 	bl	8007e5a <__swhatbuf_r>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	4605      	mov	r5, r0
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 fc45 	bl	800875c <_malloc_r>
 8007ed2:	b948      	cbnz	r0, 8007ee8 <__smakebuf_r+0x44>
 8007ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed8:	059a      	lsls	r2, r3, #22
 8007eda:	d4ef      	bmi.n	8007ebc <__smakebuf_r+0x18>
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e7e3      	b.n	8007eb0 <__smakebuf_r+0xc>
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <__smakebuf_r+0x7c>)
 8007eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	6163      	str	r3, [r4, #20]
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	6120      	str	r0, [r4, #16]
 8007efe:	b15b      	cbz	r3, 8007f18 <__smakebuf_r+0x74>
 8007f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 feaf 	bl	8008c68 <_isatty_r>
 8007f0a:	b128      	cbz	r0, 8007f18 <__smakebuf_r+0x74>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	81a3      	strh	r3, [r4, #12]
 8007f18:	89a0      	ldrh	r0, [r4, #12]
 8007f1a:	4305      	orrs	r5, r0
 8007f1c:	81a5      	strh	r5, [r4, #12]
 8007f1e:	e7cd      	b.n	8007ebc <__smakebuf_r+0x18>
 8007f20:	08007ca9 	.word	0x08007ca9

08007f24 <malloc>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <malloc+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f000 bc17 	b.w	800875c <_malloc_r>
 8007f2e:	bf00      	nop
 8007f30:	2000000c 	.word	0x2000000c

08007f34 <memcpy>:
 8007f34:	440a      	add	r2, r1
 8007f36:	4291      	cmp	r1, r2
 8007f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f3c:	d100      	bne.n	8007f40 <memcpy+0xc>
 8007f3e:	4770      	bx	lr
 8007f40:	b510      	push	{r4, lr}
 8007f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	d1f9      	bne.n	8007f42 <memcpy+0xe>
 8007f4e:	bd10      	pop	{r4, pc}

08007f50 <_Balloc>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	b976      	cbnz	r6, 8007f78 <_Balloc+0x28>
 8007f5a:	2010      	movs	r0, #16
 8007f5c:	f7ff ffe2 	bl	8007f24 <malloc>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6260      	str	r0, [r4, #36]	; 0x24
 8007f64:	b920      	cbnz	r0, 8007f70 <_Balloc+0x20>
 8007f66:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <_Balloc+0x78>)
 8007f68:	4818      	ldr	r0, [pc, #96]	; (8007fcc <_Balloc+0x7c>)
 8007f6a:	2166      	movs	r1, #102	; 0x66
 8007f6c:	f000 fe2a 	bl	8008bc4 <__assert_func>
 8007f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f74:	6006      	str	r6, [r0, #0]
 8007f76:	60c6      	str	r6, [r0, #12]
 8007f78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f7a:	68f3      	ldr	r3, [r6, #12]
 8007f7c:	b183      	cbz	r3, 8007fa0 <_Balloc+0x50>
 8007f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f86:	b9b8      	cbnz	r0, 8007fb8 <_Balloc+0x68>
 8007f88:	2101      	movs	r1, #1
 8007f8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f8e:	1d72      	adds	r2, r6, #5
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fb60 	bl	8008658 <_calloc_r>
 8007f98:	b160      	cbz	r0, 8007fb4 <_Balloc+0x64>
 8007f9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f9e:	e00e      	b.n	8007fbe <_Balloc+0x6e>
 8007fa0:	2221      	movs	r2, #33	; 0x21
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fb57 	bl	8008658 <_calloc_r>
 8007faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fac:	60f0      	str	r0, [r6, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e4      	bne.n	8007f7e <_Balloc+0x2e>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	6802      	ldr	r2, [r0, #0]
 8007fba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc4:	e7f7      	b.n	8007fb6 <_Balloc+0x66>
 8007fc6:	bf00      	nop
 8007fc8:	0800b941 	.word	0x0800b941
 8007fcc:	0800ba24 	.word	0x0800ba24

08007fd0 <_Bfree>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	b976      	cbnz	r6, 8007ff8 <_Bfree+0x28>
 8007fda:	2010      	movs	r0, #16
 8007fdc:	f7ff ffa2 	bl	8007f24 <malloc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6268      	str	r0, [r5, #36]	; 0x24
 8007fe4:	b920      	cbnz	r0, 8007ff0 <_Bfree+0x20>
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <_Bfree+0x3c>)
 8007fe8:	4809      	ldr	r0, [pc, #36]	; (8008010 <_Bfree+0x40>)
 8007fea:	218a      	movs	r1, #138	; 0x8a
 8007fec:	f000 fdea 	bl	8008bc4 <__assert_func>
 8007ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff4:	6006      	str	r6, [r0, #0]
 8007ff6:	60c6      	str	r6, [r0, #12]
 8007ff8:	b13c      	cbz	r4, 800800a <_Bfree+0x3a>
 8007ffa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ffc:	6862      	ldr	r2, [r4, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008004:	6021      	str	r1, [r4, #0]
 8008006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	0800b941 	.word	0x0800b941
 8008010:	0800ba24 	.word	0x0800ba24

08008014 <__multadd>:
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	690d      	ldr	r5, [r1, #16]
 800801a:	4607      	mov	r7, r0
 800801c:	460c      	mov	r4, r1
 800801e:	461e      	mov	r6, r3
 8008020:	f101 0c14 	add.w	ip, r1, #20
 8008024:	2000      	movs	r0, #0
 8008026:	f8dc 3000 	ldr.w	r3, [ip]
 800802a:	b299      	uxth	r1, r3
 800802c:	fb02 6101 	mla	r1, r2, r1, r6
 8008030:	0c1e      	lsrs	r6, r3, #16
 8008032:	0c0b      	lsrs	r3, r1, #16
 8008034:	fb02 3306 	mla	r3, r2, r6, r3
 8008038:	b289      	uxth	r1, r1
 800803a:	3001      	adds	r0, #1
 800803c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008040:	4285      	cmp	r5, r0
 8008042:	f84c 1b04 	str.w	r1, [ip], #4
 8008046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800804a:	dcec      	bgt.n	8008026 <__multadd+0x12>
 800804c:	b30e      	cbz	r6, 8008092 <__multadd+0x7e>
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc19      	bgt.n	8008088 <__multadd+0x74>
 8008054:	6861      	ldr	r1, [r4, #4]
 8008056:	4638      	mov	r0, r7
 8008058:	3101      	adds	r1, #1
 800805a:	f7ff ff79 	bl	8007f50 <_Balloc>
 800805e:	4680      	mov	r8, r0
 8008060:	b928      	cbnz	r0, 800806e <__multadd+0x5a>
 8008062:	4602      	mov	r2, r0
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <__multadd+0x84>)
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <__multadd+0x88>)
 8008068:	21b5      	movs	r1, #181	; 0xb5
 800806a:	f000 fdab 	bl	8008bc4 <__assert_func>
 800806e:	6922      	ldr	r2, [r4, #16]
 8008070:	3202      	adds	r2, #2
 8008072:	f104 010c 	add.w	r1, r4, #12
 8008076:	0092      	lsls	r2, r2, #2
 8008078:	300c      	adds	r0, #12
 800807a:	f7ff ff5b 	bl	8007f34 <memcpy>
 800807e:	4621      	mov	r1, r4
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ffa5 	bl	8007fd0 <_Bfree>
 8008086:	4644      	mov	r4, r8
 8008088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800808c:	3501      	adds	r5, #1
 800808e:	615e      	str	r6, [r3, #20]
 8008090:	6125      	str	r5, [r4, #16]
 8008092:	4620      	mov	r0, r4
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008098:	0800b9b3 	.word	0x0800b9b3
 800809c:	0800ba24 	.word	0x0800ba24

080080a0 <__hi0bits>:
 80080a0:	0c03      	lsrs	r3, r0, #16
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	b9d3      	cbnz	r3, 80080dc <__hi0bits+0x3c>
 80080a6:	0400      	lsls	r0, r0, #16
 80080a8:	2310      	movs	r3, #16
 80080aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080ae:	bf04      	itt	eq
 80080b0:	0200      	lsleq	r0, r0, #8
 80080b2:	3308      	addeq	r3, #8
 80080b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080b8:	bf04      	itt	eq
 80080ba:	0100      	lsleq	r0, r0, #4
 80080bc:	3304      	addeq	r3, #4
 80080be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080c2:	bf04      	itt	eq
 80080c4:	0080      	lsleq	r0, r0, #2
 80080c6:	3302      	addeq	r3, #2
 80080c8:	2800      	cmp	r0, #0
 80080ca:	db05      	blt.n	80080d8 <__hi0bits+0x38>
 80080cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080d0:	f103 0301 	add.w	r3, r3, #1
 80080d4:	bf08      	it	eq
 80080d6:	2320      	moveq	r3, #32
 80080d8:	4618      	mov	r0, r3
 80080da:	4770      	bx	lr
 80080dc:	2300      	movs	r3, #0
 80080de:	e7e4      	b.n	80080aa <__hi0bits+0xa>

080080e0 <__lo0bits>:
 80080e0:	6803      	ldr	r3, [r0, #0]
 80080e2:	f013 0207 	ands.w	r2, r3, #7
 80080e6:	4601      	mov	r1, r0
 80080e8:	d00b      	beq.n	8008102 <__lo0bits+0x22>
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d423      	bmi.n	8008136 <__lo0bits+0x56>
 80080ee:	0798      	lsls	r0, r3, #30
 80080f0:	bf49      	itett	mi
 80080f2:	085b      	lsrmi	r3, r3, #1
 80080f4:	089b      	lsrpl	r3, r3, #2
 80080f6:	2001      	movmi	r0, #1
 80080f8:	600b      	strmi	r3, [r1, #0]
 80080fa:	bf5c      	itt	pl
 80080fc:	600b      	strpl	r3, [r1, #0]
 80080fe:	2002      	movpl	r0, #2
 8008100:	4770      	bx	lr
 8008102:	b298      	uxth	r0, r3
 8008104:	b9a8      	cbnz	r0, 8008132 <__lo0bits+0x52>
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	2010      	movs	r0, #16
 800810a:	b2da      	uxtb	r2, r3
 800810c:	b90a      	cbnz	r2, 8008112 <__lo0bits+0x32>
 800810e:	3008      	adds	r0, #8
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	071a      	lsls	r2, r3, #28
 8008114:	bf04      	itt	eq
 8008116:	091b      	lsreq	r3, r3, #4
 8008118:	3004      	addeq	r0, #4
 800811a:	079a      	lsls	r2, r3, #30
 800811c:	bf04      	itt	eq
 800811e:	089b      	lsreq	r3, r3, #2
 8008120:	3002      	addeq	r0, #2
 8008122:	07da      	lsls	r2, r3, #31
 8008124:	d403      	bmi.n	800812e <__lo0bits+0x4e>
 8008126:	085b      	lsrs	r3, r3, #1
 8008128:	f100 0001 	add.w	r0, r0, #1
 800812c:	d005      	beq.n	800813a <__lo0bits+0x5a>
 800812e:	600b      	str	r3, [r1, #0]
 8008130:	4770      	bx	lr
 8008132:	4610      	mov	r0, r2
 8008134:	e7e9      	b.n	800810a <__lo0bits+0x2a>
 8008136:	2000      	movs	r0, #0
 8008138:	4770      	bx	lr
 800813a:	2020      	movs	r0, #32
 800813c:	4770      	bx	lr
	...

08008140 <__i2b>:
 8008140:	b510      	push	{r4, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	2101      	movs	r1, #1
 8008146:	f7ff ff03 	bl	8007f50 <_Balloc>
 800814a:	4602      	mov	r2, r0
 800814c:	b928      	cbnz	r0, 800815a <__i2b+0x1a>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <__i2b+0x24>)
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <__i2b+0x28>)
 8008152:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008156:	f000 fd35 	bl	8008bc4 <__assert_func>
 800815a:	2301      	movs	r3, #1
 800815c:	6144      	str	r4, [r0, #20]
 800815e:	6103      	str	r3, [r0, #16]
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	0800b9b3 	.word	0x0800b9b3
 8008168:	0800ba24 	.word	0x0800ba24

0800816c <__multiply>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	4691      	mov	r9, r2
 8008172:	690a      	ldr	r2, [r1, #16]
 8008174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	bfb8      	it	lt
 800817c:	460b      	movlt	r3, r1
 800817e:	460c      	mov	r4, r1
 8008180:	bfbc      	itt	lt
 8008182:	464c      	movlt	r4, r9
 8008184:	4699      	movlt	r9, r3
 8008186:	6927      	ldr	r7, [r4, #16]
 8008188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6861      	ldr	r1, [r4, #4]
 8008190:	eb07 060a 	add.w	r6, r7, sl
 8008194:	42b3      	cmp	r3, r6
 8008196:	b085      	sub	sp, #20
 8008198:	bfb8      	it	lt
 800819a:	3101      	addlt	r1, #1
 800819c:	f7ff fed8 	bl	8007f50 <_Balloc>
 80081a0:	b930      	cbnz	r0, 80081b0 <__multiply+0x44>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <__multiply+0x14c>)
 80081a6:	4845      	ldr	r0, [pc, #276]	; (80082bc <__multiply+0x150>)
 80081a8:	f240 115d 	movw	r1, #349	; 0x15d
 80081ac:	f000 fd0a 	bl	8008bc4 <__assert_func>
 80081b0:	f100 0514 	add.w	r5, r0, #20
 80081b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081b8:	462b      	mov	r3, r5
 80081ba:	2200      	movs	r2, #0
 80081bc:	4543      	cmp	r3, r8
 80081be:	d321      	bcc.n	8008204 <__multiply+0x98>
 80081c0:	f104 0314 	add.w	r3, r4, #20
 80081c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081c8:	f109 0314 	add.w	r3, r9, #20
 80081cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081d0:	9202      	str	r2, [sp, #8]
 80081d2:	1b3a      	subs	r2, r7, r4
 80081d4:	3a15      	subs	r2, #21
 80081d6:	f022 0203 	bic.w	r2, r2, #3
 80081da:	3204      	adds	r2, #4
 80081dc:	f104 0115 	add.w	r1, r4, #21
 80081e0:	428f      	cmp	r7, r1
 80081e2:	bf38      	it	cc
 80081e4:	2204      	movcc	r2, #4
 80081e6:	9201      	str	r2, [sp, #4]
 80081e8:	9a02      	ldr	r2, [sp, #8]
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d80c      	bhi.n	800820a <__multiply+0x9e>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	dd03      	ble.n	80081fc <__multiply+0x90>
 80081f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05a      	beq.n	80082b2 <__multiply+0x146>
 80081fc:	6106      	str	r6, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7d8      	b.n	80081bc <__multiply+0x50>
 800820a:	f8b3 a000 	ldrh.w	sl, [r3]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d024      	beq.n	800825e <__multiply+0xf2>
 8008214:	f104 0e14 	add.w	lr, r4, #20
 8008218:	46a9      	mov	r9, r5
 800821a:	f04f 0c00 	mov.w	ip, #0
 800821e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008222:	f8d9 1000 	ldr.w	r1, [r9]
 8008226:	fa1f fb82 	uxth.w	fp, r2
 800822a:	b289      	uxth	r1, r1
 800822c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008234:	f8d9 2000 	ldr.w	r2, [r9]
 8008238:	4461      	add	r1, ip
 800823a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800823e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008246:	b289      	uxth	r1, r1
 8008248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800824c:	4577      	cmp	r7, lr
 800824e:	f849 1b04 	str.w	r1, [r9], #4
 8008252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008256:	d8e2      	bhi.n	800821e <__multiply+0xb2>
 8008258:	9a01      	ldr	r2, [sp, #4]
 800825a:	f845 c002 	str.w	ip, [r5, r2]
 800825e:	9a03      	ldr	r2, [sp, #12]
 8008260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008264:	3304      	adds	r3, #4
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	d020      	beq.n	80082ae <__multiply+0x142>
 800826c:	6829      	ldr	r1, [r5, #0]
 800826e:	f104 0c14 	add.w	ip, r4, #20
 8008272:	46ae      	mov	lr, r5
 8008274:	f04f 0a00 	mov.w	sl, #0
 8008278:	f8bc b000 	ldrh.w	fp, [ip]
 800827c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008280:	fb09 220b 	mla	r2, r9, fp, r2
 8008284:	4492      	add	sl, r2
 8008286:	b289      	uxth	r1, r1
 8008288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800828c:	f84e 1b04 	str.w	r1, [lr], #4
 8008290:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008294:	f8be 1000 	ldrh.w	r1, [lr]
 8008298:	0c12      	lsrs	r2, r2, #16
 800829a:	fb09 1102 	mla	r1, r9, r2, r1
 800829e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082a2:	4567      	cmp	r7, ip
 80082a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082a8:	d8e6      	bhi.n	8008278 <__multiply+0x10c>
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	50a9      	str	r1, [r5, r2]
 80082ae:	3504      	adds	r5, #4
 80082b0:	e79a      	b.n	80081e8 <__multiply+0x7c>
 80082b2:	3e01      	subs	r6, #1
 80082b4:	e79c      	b.n	80081f0 <__multiply+0x84>
 80082b6:	bf00      	nop
 80082b8:	0800b9b3 	.word	0x0800b9b3
 80082bc:	0800ba24 	.word	0x0800ba24

080082c0 <__pow5mult>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	4615      	mov	r5, r2
 80082c6:	f012 0203 	ands.w	r2, r2, #3
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	d007      	beq.n	80082e0 <__pow5mult+0x20>
 80082d0:	4c25      	ldr	r4, [pc, #148]	; (8008368 <__pow5mult+0xa8>)
 80082d2:	3a01      	subs	r2, #1
 80082d4:	2300      	movs	r3, #0
 80082d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082da:	f7ff fe9b 	bl	8008014 <__multadd>
 80082de:	4607      	mov	r7, r0
 80082e0:	10ad      	asrs	r5, r5, #2
 80082e2:	d03d      	beq.n	8008360 <__pow5mult+0xa0>
 80082e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082e6:	b97c      	cbnz	r4, 8008308 <__pow5mult+0x48>
 80082e8:	2010      	movs	r0, #16
 80082ea:	f7ff fe1b 	bl	8007f24 <malloc>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6270      	str	r0, [r6, #36]	; 0x24
 80082f2:	b928      	cbnz	r0, 8008300 <__pow5mult+0x40>
 80082f4:	4b1d      	ldr	r3, [pc, #116]	; (800836c <__pow5mult+0xac>)
 80082f6:	481e      	ldr	r0, [pc, #120]	; (8008370 <__pow5mult+0xb0>)
 80082f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082fc:	f000 fc62 	bl	8008bc4 <__assert_func>
 8008300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	60c4      	str	r4, [r0, #12]
 8008308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800830c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008310:	b94c      	cbnz	r4, 8008326 <__pow5mult+0x66>
 8008312:	f240 2171 	movw	r1, #625	; 0x271
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff ff12 	bl	8008140 <__i2b>
 800831c:	2300      	movs	r3, #0
 800831e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008322:	4604      	mov	r4, r0
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	f04f 0900 	mov.w	r9, #0
 800832a:	07eb      	lsls	r3, r5, #31
 800832c:	d50a      	bpl.n	8008344 <__pow5mult+0x84>
 800832e:	4639      	mov	r1, r7
 8008330:	4622      	mov	r2, r4
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ff1a 	bl	800816c <__multiply>
 8008338:	4639      	mov	r1, r7
 800833a:	4680      	mov	r8, r0
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff fe47 	bl	8007fd0 <_Bfree>
 8008342:	4647      	mov	r7, r8
 8008344:	106d      	asrs	r5, r5, #1
 8008346:	d00b      	beq.n	8008360 <__pow5mult+0xa0>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	b938      	cbnz	r0, 800835c <__pow5mult+0x9c>
 800834c:	4622      	mov	r2, r4
 800834e:	4621      	mov	r1, r4
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff ff0b 	bl	800816c <__multiply>
 8008356:	6020      	str	r0, [r4, #0]
 8008358:	f8c0 9000 	str.w	r9, [r0]
 800835c:	4604      	mov	r4, r0
 800835e:	e7e4      	b.n	800832a <__pow5mult+0x6a>
 8008360:	4638      	mov	r0, r7
 8008362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008366:	bf00      	nop
 8008368:	0800bb70 	.word	0x0800bb70
 800836c:	0800b941 	.word	0x0800b941
 8008370:	0800ba24 	.word	0x0800ba24

08008374 <__lshift>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	460c      	mov	r4, r1
 800837a:	6849      	ldr	r1, [r1, #4]
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	4607      	mov	r7, r0
 8008386:	4691      	mov	r9, r2
 8008388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800838c:	f108 0601 	add.w	r6, r8, #1
 8008390:	42b3      	cmp	r3, r6
 8008392:	db0b      	blt.n	80083ac <__lshift+0x38>
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff fddb 	bl	8007f50 <_Balloc>
 800839a:	4605      	mov	r5, r0
 800839c:	b948      	cbnz	r0, 80083b2 <__lshift+0x3e>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b2a      	ldr	r3, [pc, #168]	; (800844c <__lshift+0xd8>)
 80083a2:	482b      	ldr	r0, [pc, #172]	; (8008450 <__lshift+0xdc>)
 80083a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a8:	f000 fc0c 	bl	8008bc4 <__assert_func>
 80083ac:	3101      	adds	r1, #1
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	e7ee      	b.n	8008390 <__lshift+0x1c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f100 0114 	add.w	r1, r0, #20
 80083b8:	f100 0210 	add.w	r2, r0, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	4553      	cmp	r3, sl
 80083c0:	db37      	blt.n	8008432 <__lshift+0xbe>
 80083c2:	6920      	ldr	r0, [r4, #16]
 80083c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c8:	f104 0314 	add.w	r3, r4, #20
 80083cc:	f019 091f 	ands.w	r9, r9, #31
 80083d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083d8:	d02f      	beq.n	800843a <__lshift+0xc6>
 80083da:	f1c9 0e20 	rsb	lr, r9, #32
 80083de:	468a      	mov	sl, r1
 80083e0:	f04f 0c00 	mov.w	ip, #0
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	fa02 f209 	lsl.w	r2, r2, r9
 80083ea:	ea42 020c 	orr.w	r2, r2, ip
 80083ee:	f84a 2b04 	str.w	r2, [sl], #4
 80083f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f6:	4298      	cmp	r0, r3
 80083f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083fc:	d8f2      	bhi.n	80083e4 <__lshift+0x70>
 80083fe:	1b03      	subs	r3, r0, r4
 8008400:	3b15      	subs	r3, #21
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	3304      	adds	r3, #4
 8008408:	f104 0215 	add.w	r2, r4, #21
 800840c:	4290      	cmp	r0, r2
 800840e:	bf38      	it	cc
 8008410:	2304      	movcc	r3, #4
 8008412:	f841 c003 	str.w	ip, [r1, r3]
 8008416:	f1bc 0f00 	cmp.w	ip, #0
 800841a:	d001      	beq.n	8008420 <__lshift+0xac>
 800841c:	f108 0602 	add.w	r6, r8, #2
 8008420:	3e01      	subs	r6, #1
 8008422:	4638      	mov	r0, r7
 8008424:	612e      	str	r6, [r5, #16]
 8008426:	4621      	mov	r1, r4
 8008428:	f7ff fdd2 	bl	8007fd0 <_Bfree>
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	f842 0f04 	str.w	r0, [r2, #4]!
 8008436:	3301      	adds	r3, #1
 8008438:	e7c1      	b.n	80083be <__lshift+0x4a>
 800843a:	3904      	subs	r1, #4
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	f841 2f04 	str.w	r2, [r1, #4]!
 8008444:	4298      	cmp	r0, r3
 8008446:	d8f9      	bhi.n	800843c <__lshift+0xc8>
 8008448:	e7ea      	b.n	8008420 <__lshift+0xac>
 800844a:	bf00      	nop
 800844c:	0800b9b3 	.word	0x0800b9b3
 8008450:	0800ba24 	.word	0x0800ba24

08008454 <__mcmp>:
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	6902      	ldr	r2, [r0, #16]
 8008458:	690c      	ldr	r4, [r1, #16]
 800845a:	1b12      	subs	r2, r2, r4
 800845c:	d10e      	bne.n	800847c <__mcmp+0x28>
 800845e:	f100 0314 	add.w	r3, r0, #20
 8008462:	3114      	adds	r1, #20
 8008464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800846c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008474:	42a5      	cmp	r5, r4
 8008476:	d003      	beq.n	8008480 <__mcmp+0x2c>
 8008478:	d305      	bcc.n	8008486 <__mcmp+0x32>
 800847a:	2201      	movs	r2, #1
 800847c:	4610      	mov	r0, r2
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	4283      	cmp	r3, r0
 8008482:	d3f3      	bcc.n	800846c <__mcmp+0x18>
 8008484:	e7fa      	b.n	800847c <__mcmp+0x28>
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e7f7      	b.n	800847c <__mcmp+0x28>

0800848c <__mdiff>:
 800848c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	4606      	mov	r6, r0
 8008494:	4611      	mov	r1, r2
 8008496:	4620      	mov	r0, r4
 8008498:	4690      	mov	r8, r2
 800849a:	f7ff ffdb 	bl	8008454 <__mcmp>
 800849e:	1e05      	subs	r5, r0, #0
 80084a0:	d110      	bne.n	80084c4 <__mdiff+0x38>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff fd53 	bl	8007f50 <_Balloc>
 80084aa:	b930      	cbnz	r0, 80084ba <__mdiff+0x2e>
 80084ac:	4b3a      	ldr	r3, [pc, #232]	; (8008598 <__mdiff+0x10c>)
 80084ae:	4602      	mov	r2, r0
 80084b0:	f240 2132 	movw	r1, #562	; 0x232
 80084b4:	4839      	ldr	r0, [pc, #228]	; (800859c <__mdiff+0x110>)
 80084b6:	f000 fb85 	bl	8008bc4 <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	bfa4      	itt	ge
 80084c6:	4643      	movge	r3, r8
 80084c8:	46a0      	movge	r8, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084d0:	bfa6      	itte	ge
 80084d2:	461c      	movge	r4, r3
 80084d4:	2500      	movge	r5, #0
 80084d6:	2501      	movlt	r5, #1
 80084d8:	f7ff fd3a 	bl	8007f50 <_Balloc>
 80084dc:	b920      	cbnz	r0, 80084e8 <__mdiff+0x5c>
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <__mdiff+0x10c>)
 80084e0:	4602      	mov	r2, r0
 80084e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084e6:	e7e5      	b.n	80084b4 <__mdiff+0x28>
 80084e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084ec:	6926      	ldr	r6, [r4, #16]
 80084ee:	60c5      	str	r5, [r0, #12]
 80084f0:	f104 0914 	add.w	r9, r4, #20
 80084f4:	f108 0514 	add.w	r5, r8, #20
 80084f8:	f100 0e14 	add.w	lr, r0, #20
 80084fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008504:	f108 0210 	add.w	r2, r8, #16
 8008508:	46f2      	mov	sl, lr
 800850a:	2100      	movs	r1, #0
 800850c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008514:	fa1f f883 	uxth.w	r8, r3
 8008518:	fa11 f18b 	uxtah	r1, r1, fp
 800851c:	0c1b      	lsrs	r3, r3, #16
 800851e:	eba1 0808 	sub.w	r8, r1, r8
 8008522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008526:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800852a:	fa1f f888 	uxth.w	r8, r8
 800852e:	1419      	asrs	r1, r3, #16
 8008530:	454e      	cmp	r6, r9
 8008532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008536:	f84a 3b04 	str.w	r3, [sl], #4
 800853a:	d8e7      	bhi.n	800850c <__mdiff+0x80>
 800853c:	1b33      	subs	r3, r6, r4
 800853e:	3b15      	subs	r3, #21
 8008540:	f023 0303 	bic.w	r3, r3, #3
 8008544:	3304      	adds	r3, #4
 8008546:	3415      	adds	r4, #21
 8008548:	42a6      	cmp	r6, r4
 800854a:	bf38      	it	cc
 800854c:	2304      	movcc	r3, #4
 800854e:	441d      	add	r5, r3
 8008550:	4473      	add	r3, lr
 8008552:	469e      	mov	lr, r3
 8008554:	462e      	mov	r6, r5
 8008556:	4566      	cmp	r6, ip
 8008558:	d30e      	bcc.n	8008578 <__mdiff+0xec>
 800855a:	f10c 0203 	add.w	r2, ip, #3
 800855e:	1b52      	subs	r2, r2, r5
 8008560:	f022 0203 	bic.w	r2, r2, #3
 8008564:	3d03      	subs	r5, #3
 8008566:	45ac      	cmp	ip, r5
 8008568:	bf38      	it	cc
 800856a:	2200      	movcc	r2, #0
 800856c:	441a      	add	r2, r3
 800856e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008572:	b17b      	cbz	r3, 8008594 <__mdiff+0x108>
 8008574:	6107      	str	r7, [r0, #16]
 8008576:	e7a3      	b.n	80084c0 <__mdiff+0x34>
 8008578:	f856 8b04 	ldr.w	r8, [r6], #4
 800857c:	fa11 f288 	uxtah	r2, r1, r8
 8008580:	1414      	asrs	r4, r2, #16
 8008582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008586:	b292      	uxth	r2, r2
 8008588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800858c:	f84e 2b04 	str.w	r2, [lr], #4
 8008590:	1421      	asrs	r1, r4, #16
 8008592:	e7e0      	b.n	8008556 <__mdiff+0xca>
 8008594:	3f01      	subs	r7, #1
 8008596:	e7ea      	b.n	800856e <__mdiff+0xe2>
 8008598:	0800b9b3 	.word	0x0800b9b3
 800859c:	0800ba24 	.word	0x0800ba24

080085a0 <__d2b>:
 80085a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4689      	mov	r9, r1
 80085a6:	2101      	movs	r1, #1
 80085a8:	ec57 6b10 	vmov	r6, r7, d0
 80085ac:	4690      	mov	r8, r2
 80085ae:	f7ff fccf 	bl	8007f50 <_Balloc>
 80085b2:	4604      	mov	r4, r0
 80085b4:	b930      	cbnz	r0, 80085c4 <__d2b+0x24>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b25      	ldr	r3, [pc, #148]	; (8008650 <__d2b+0xb0>)
 80085ba:	4826      	ldr	r0, [pc, #152]	; (8008654 <__d2b+0xb4>)
 80085bc:	f240 310a 	movw	r1, #778	; 0x30a
 80085c0:	f000 fb00 	bl	8008bc4 <__assert_func>
 80085c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80085c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085cc:	bb35      	cbnz	r5, 800861c <__d2b+0x7c>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	d028      	beq.n	8008626 <__d2b+0x86>
 80085d4:	4668      	mov	r0, sp
 80085d6:	9600      	str	r6, [sp, #0]
 80085d8:	f7ff fd82 	bl	80080e0 <__lo0bits>
 80085dc:	9900      	ldr	r1, [sp, #0]
 80085de:	b300      	cbz	r0, 8008622 <__d2b+0x82>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	f1c0 0320 	rsb	r3, r0, #32
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	430b      	orrs	r3, r1
 80085ec:	40c2      	lsrs	r2, r0
 80085ee:	6163      	str	r3, [r4, #20]
 80085f0:	9201      	str	r2, [sp, #4]
 80085f2:	9b01      	ldr	r3, [sp, #4]
 80085f4:	61a3      	str	r3, [r4, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bf14      	ite	ne
 80085fa:	2202      	movne	r2, #2
 80085fc:	2201      	moveq	r2, #1
 80085fe:	6122      	str	r2, [r4, #16]
 8008600:	b1d5      	cbz	r5, 8008638 <__d2b+0x98>
 8008602:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008606:	4405      	add	r5, r0
 8008608:	f8c9 5000 	str.w	r5, [r9]
 800860c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008610:	f8c8 0000 	str.w	r0, [r8]
 8008614:	4620      	mov	r0, r4
 8008616:	b003      	add	sp, #12
 8008618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008620:	e7d5      	b.n	80085ce <__d2b+0x2e>
 8008622:	6161      	str	r1, [r4, #20]
 8008624:	e7e5      	b.n	80085f2 <__d2b+0x52>
 8008626:	a801      	add	r0, sp, #4
 8008628:	f7ff fd5a 	bl	80080e0 <__lo0bits>
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	6163      	str	r3, [r4, #20]
 8008630:	2201      	movs	r2, #1
 8008632:	6122      	str	r2, [r4, #16]
 8008634:	3020      	adds	r0, #32
 8008636:	e7e3      	b.n	8008600 <__d2b+0x60>
 8008638:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800863c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008640:	f8c9 0000 	str.w	r0, [r9]
 8008644:	6918      	ldr	r0, [r3, #16]
 8008646:	f7ff fd2b 	bl	80080a0 <__hi0bits>
 800864a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800864e:	e7df      	b.n	8008610 <__d2b+0x70>
 8008650:	0800b9b3 	.word	0x0800b9b3
 8008654:	0800ba24 	.word	0x0800ba24

08008658 <_calloc_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	fba1 2402 	umull	r2, r4, r1, r2
 800865e:	b94c      	cbnz	r4, 8008674 <_calloc_r+0x1c>
 8008660:	4611      	mov	r1, r2
 8008662:	9201      	str	r2, [sp, #4]
 8008664:	f000 f87a 	bl	800875c <_malloc_r>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	4605      	mov	r5, r0
 800866c:	b930      	cbnz	r0, 800867c <_calloc_r+0x24>
 800866e:	4628      	mov	r0, r5
 8008670:	b003      	add	sp, #12
 8008672:	bd30      	pop	{r4, r5, pc}
 8008674:	220c      	movs	r2, #12
 8008676:	6002      	str	r2, [r0, #0]
 8008678:	2500      	movs	r5, #0
 800867a:	e7f8      	b.n	800866e <_calloc_r+0x16>
 800867c:	4621      	mov	r1, r4
 800867e:	f7fd fdf3 	bl	8006268 <memset>
 8008682:	e7f4      	b.n	800866e <_calloc_r+0x16>

08008684 <_free_r>:
 8008684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008686:	2900      	cmp	r1, #0
 8008688:	d044      	beq.n	8008714 <_free_r+0x90>
 800868a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868e:	9001      	str	r0, [sp, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f1a1 0404 	sub.w	r4, r1, #4
 8008696:	bfb8      	it	lt
 8008698:	18e4      	addlt	r4, r4, r3
 800869a:	f000 fb19 	bl	8008cd0 <__malloc_lock>
 800869e:	4a1e      	ldr	r2, [pc, #120]	; (8008718 <_free_r+0x94>)
 80086a0:	9801      	ldr	r0, [sp, #4]
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	b933      	cbnz	r3, 80086b4 <_free_r+0x30>
 80086a6:	6063      	str	r3, [r4, #4]
 80086a8:	6014      	str	r4, [r2, #0]
 80086aa:	b003      	add	sp, #12
 80086ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b0:	f000 bb14 	b.w	8008cdc <__malloc_unlock>
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d908      	bls.n	80086ca <_free_r+0x46>
 80086b8:	6825      	ldr	r5, [r4, #0]
 80086ba:	1961      	adds	r1, r4, r5
 80086bc:	428b      	cmp	r3, r1
 80086be:	bf01      	itttt	eq
 80086c0:	6819      	ldreq	r1, [r3, #0]
 80086c2:	685b      	ldreq	r3, [r3, #4]
 80086c4:	1949      	addeq	r1, r1, r5
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	e7ed      	b.n	80086a6 <_free_r+0x22>
 80086ca:	461a      	mov	r2, r3
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	b10b      	cbz	r3, 80086d4 <_free_r+0x50>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d9fa      	bls.n	80086ca <_free_r+0x46>
 80086d4:	6811      	ldr	r1, [r2, #0]
 80086d6:	1855      	adds	r5, r2, r1
 80086d8:	42a5      	cmp	r5, r4
 80086da:	d10b      	bne.n	80086f4 <_free_r+0x70>
 80086dc:	6824      	ldr	r4, [r4, #0]
 80086de:	4421      	add	r1, r4
 80086e0:	1854      	adds	r4, r2, r1
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	6011      	str	r1, [r2, #0]
 80086e6:	d1e0      	bne.n	80086aa <_free_r+0x26>
 80086e8:	681c      	ldr	r4, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	6053      	str	r3, [r2, #4]
 80086ee:	4421      	add	r1, r4
 80086f0:	6011      	str	r1, [r2, #0]
 80086f2:	e7da      	b.n	80086aa <_free_r+0x26>
 80086f4:	d902      	bls.n	80086fc <_free_r+0x78>
 80086f6:	230c      	movs	r3, #12
 80086f8:	6003      	str	r3, [r0, #0]
 80086fa:	e7d6      	b.n	80086aa <_free_r+0x26>
 80086fc:	6825      	ldr	r5, [r4, #0]
 80086fe:	1961      	adds	r1, r4, r5
 8008700:	428b      	cmp	r3, r1
 8008702:	bf04      	itt	eq
 8008704:	6819      	ldreq	r1, [r3, #0]
 8008706:	685b      	ldreq	r3, [r3, #4]
 8008708:	6063      	str	r3, [r4, #4]
 800870a:	bf04      	itt	eq
 800870c:	1949      	addeq	r1, r1, r5
 800870e:	6021      	streq	r1, [r4, #0]
 8008710:	6054      	str	r4, [r2, #4]
 8008712:	e7ca      	b.n	80086aa <_free_r+0x26>
 8008714:	b003      	add	sp, #12
 8008716:	bd30      	pop	{r4, r5, pc}
 8008718:	20000340 	.word	0x20000340

0800871c <sbrk_aligned>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4e0e      	ldr	r6, [pc, #56]	; (8008758 <sbrk_aligned+0x3c>)
 8008720:	460c      	mov	r4, r1
 8008722:	6831      	ldr	r1, [r6, #0]
 8008724:	4605      	mov	r5, r0
 8008726:	b911      	cbnz	r1, 800872e <sbrk_aligned+0x12>
 8008728:	f000 f9e6 	bl	8008af8 <_sbrk_r>
 800872c:	6030      	str	r0, [r6, #0]
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f000 f9e1 	bl	8008af8 <_sbrk_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d00a      	beq.n	8008750 <sbrk_aligned+0x34>
 800873a:	1cc4      	adds	r4, r0, #3
 800873c:	f024 0403 	bic.w	r4, r4, #3
 8008740:	42a0      	cmp	r0, r4
 8008742:	d007      	beq.n	8008754 <sbrk_aligned+0x38>
 8008744:	1a21      	subs	r1, r4, r0
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f9d6 	bl	8008af8 <_sbrk_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d101      	bne.n	8008754 <sbrk_aligned+0x38>
 8008750:	f04f 34ff 	mov.w	r4, #4294967295
 8008754:	4620      	mov	r0, r4
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	20000344 	.word	0x20000344

0800875c <_malloc_r>:
 800875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	1ccd      	adds	r5, r1, #3
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	2d00      	cmp	r5, #0
 8008770:	4607      	mov	r7, r0
 8008772:	db01      	blt.n	8008778 <_malloc_r+0x1c>
 8008774:	42a9      	cmp	r1, r5
 8008776:	d905      	bls.n	8008784 <_malloc_r+0x28>
 8008778:	230c      	movs	r3, #12
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	2600      	movs	r6, #0
 800877e:	4630      	mov	r0, r6
 8008780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008784:	4e2e      	ldr	r6, [pc, #184]	; (8008840 <_malloc_r+0xe4>)
 8008786:	f000 faa3 	bl	8008cd0 <__malloc_lock>
 800878a:	6833      	ldr	r3, [r6, #0]
 800878c:	461c      	mov	r4, r3
 800878e:	bb34      	cbnz	r4, 80087de <_malloc_r+0x82>
 8008790:	4629      	mov	r1, r5
 8008792:	4638      	mov	r0, r7
 8008794:	f7ff ffc2 	bl	800871c <sbrk_aligned>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	4604      	mov	r4, r0
 800879c:	d14d      	bne.n	800883a <_malloc_r+0xde>
 800879e:	6834      	ldr	r4, [r6, #0]
 80087a0:	4626      	mov	r6, r4
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d140      	bne.n	8008828 <_malloc_r+0xcc>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4631      	mov	r1, r6
 80087aa:	4638      	mov	r0, r7
 80087ac:	eb04 0803 	add.w	r8, r4, r3
 80087b0:	f000 f9a2 	bl	8008af8 <_sbrk_r>
 80087b4:	4580      	cmp	r8, r0
 80087b6:	d13a      	bne.n	800882e <_malloc_r+0xd2>
 80087b8:	6821      	ldr	r1, [r4, #0]
 80087ba:	3503      	adds	r5, #3
 80087bc:	1a6d      	subs	r5, r5, r1
 80087be:	f025 0503 	bic.w	r5, r5, #3
 80087c2:	3508      	adds	r5, #8
 80087c4:	2d0c      	cmp	r5, #12
 80087c6:	bf38      	it	cc
 80087c8:	250c      	movcc	r5, #12
 80087ca:	4629      	mov	r1, r5
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff ffa5 	bl	800871c <sbrk_aligned>
 80087d2:	3001      	adds	r0, #1
 80087d4:	d02b      	beq.n	800882e <_malloc_r+0xd2>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	442b      	add	r3, r5
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	e00e      	b.n	80087fc <_malloc_r+0xa0>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	1b52      	subs	r2, r2, r5
 80087e2:	d41e      	bmi.n	8008822 <_malloc_r+0xc6>
 80087e4:	2a0b      	cmp	r2, #11
 80087e6:	d916      	bls.n	8008816 <_malloc_r+0xba>
 80087e8:	1961      	adds	r1, r4, r5
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	6025      	str	r5, [r4, #0]
 80087ee:	bf18      	it	ne
 80087f0:	6059      	strne	r1, [r3, #4]
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	bf08      	it	eq
 80087f6:	6031      	streq	r1, [r6, #0]
 80087f8:	5162      	str	r2, [r4, r5]
 80087fa:	604b      	str	r3, [r1, #4]
 80087fc:	4638      	mov	r0, r7
 80087fe:	f104 060b 	add.w	r6, r4, #11
 8008802:	f000 fa6b 	bl	8008cdc <__malloc_unlock>
 8008806:	f026 0607 	bic.w	r6, r6, #7
 800880a:	1d23      	adds	r3, r4, #4
 800880c:	1af2      	subs	r2, r6, r3
 800880e:	d0b6      	beq.n	800877e <_malloc_r+0x22>
 8008810:	1b9b      	subs	r3, r3, r6
 8008812:	50a3      	str	r3, [r4, r2]
 8008814:	e7b3      	b.n	800877e <_malloc_r+0x22>
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	42a3      	cmp	r3, r4
 800881a:	bf0c      	ite	eq
 800881c:	6032      	streq	r2, [r6, #0]
 800881e:	605a      	strne	r2, [r3, #4]
 8008820:	e7ec      	b.n	80087fc <_malloc_r+0xa0>
 8008822:	4623      	mov	r3, r4
 8008824:	6864      	ldr	r4, [r4, #4]
 8008826:	e7b2      	b.n	800878e <_malloc_r+0x32>
 8008828:	4634      	mov	r4, r6
 800882a:	6876      	ldr	r6, [r6, #4]
 800882c:	e7b9      	b.n	80087a2 <_malloc_r+0x46>
 800882e:	230c      	movs	r3, #12
 8008830:	603b      	str	r3, [r7, #0]
 8008832:	4638      	mov	r0, r7
 8008834:	f000 fa52 	bl	8008cdc <__malloc_unlock>
 8008838:	e7a1      	b.n	800877e <_malloc_r+0x22>
 800883a:	6025      	str	r5, [r4, #0]
 800883c:	e7de      	b.n	80087fc <_malloc_r+0xa0>
 800883e:	bf00      	nop
 8008840:	20000340 	.word	0x20000340

08008844 <__sfputc_r>:
 8008844:	6893      	ldr	r3, [r2, #8]
 8008846:	3b01      	subs	r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	b410      	push	{r4}
 800884c:	6093      	str	r3, [r2, #8]
 800884e:	da08      	bge.n	8008862 <__sfputc_r+0x1e>
 8008850:	6994      	ldr	r4, [r2, #24]
 8008852:	42a3      	cmp	r3, r4
 8008854:	db01      	blt.n	800885a <__sfputc_r+0x16>
 8008856:	290a      	cmp	r1, #10
 8008858:	d103      	bne.n	8008862 <__sfputc_r+0x1e>
 800885a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800885e:	f7fe ba03 	b.w	8006c68 <__swbuf_r>
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	1c58      	adds	r0, r3, #1
 8008866:	6010      	str	r0, [r2, #0]
 8008868:	7019      	strb	r1, [r3, #0]
 800886a:	4608      	mov	r0, r1
 800886c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008870:	4770      	bx	lr

08008872 <__sfputs_r>:
 8008872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008874:	4606      	mov	r6, r0
 8008876:	460f      	mov	r7, r1
 8008878:	4614      	mov	r4, r2
 800887a:	18d5      	adds	r5, r2, r3
 800887c:	42ac      	cmp	r4, r5
 800887e:	d101      	bne.n	8008884 <__sfputs_r+0x12>
 8008880:	2000      	movs	r0, #0
 8008882:	e007      	b.n	8008894 <__sfputs_r+0x22>
 8008884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008888:	463a      	mov	r2, r7
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ffda 	bl	8008844 <__sfputc_r>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d1f3      	bne.n	800887c <__sfputs_r+0xa>
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008898 <_vfiprintf_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	460d      	mov	r5, r1
 800889e:	b09d      	sub	sp, #116	; 0x74
 80088a0:	4614      	mov	r4, r2
 80088a2:	4698      	mov	r8, r3
 80088a4:	4606      	mov	r6, r0
 80088a6:	b118      	cbz	r0, 80088b0 <_vfiprintf_r+0x18>
 80088a8:	6983      	ldr	r3, [r0, #24]
 80088aa:	b90b      	cbnz	r3, 80088b0 <_vfiprintf_r+0x18>
 80088ac:	f7ff fa30 	bl	8007d10 <__sinit>
 80088b0:	4b89      	ldr	r3, [pc, #548]	; (8008ad8 <_vfiprintf_r+0x240>)
 80088b2:	429d      	cmp	r5, r3
 80088b4:	d11b      	bne.n	80088ee <_vfiprintf_r+0x56>
 80088b6:	6875      	ldr	r5, [r6, #4]
 80088b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ba:	07d9      	lsls	r1, r3, #31
 80088bc:	d405      	bmi.n	80088ca <_vfiprintf_r+0x32>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	059a      	lsls	r2, r3, #22
 80088c2:	d402      	bmi.n	80088ca <_vfiprintf_r+0x32>
 80088c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088c6:	f7ff fac6 	bl	8007e56 <__retarget_lock_acquire_recursive>
 80088ca:	89ab      	ldrh	r3, [r5, #12]
 80088cc:	071b      	lsls	r3, r3, #28
 80088ce:	d501      	bpl.n	80088d4 <_vfiprintf_r+0x3c>
 80088d0:	692b      	ldr	r3, [r5, #16]
 80088d2:	b9eb      	cbnz	r3, 8008910 <_vfiprintf_r+0x78>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7fe fa18 	bl	8006d0c <__swsetup_r>
 80088dc:	b1c0      	cbz	r0, 8008910 <_vfiprintf_r+0x78>
 80088de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088e0:	07dc      	lsls	r4, r3, #31
 80088e2:	d50e      	bpl.n	8008902 <_vfiprintf_r+0x6a>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	b01d      	add	sp, #116	; 0x74
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	4b7b      	ldr	r3, [pc, #492]	; (8008adc <_vfiprintf_r+0x244>)
 80088f0:	429d      	cmp	r5, r3
 80088f2:	d101      	bne.n	80088f8 <_vfiprintf_r+0x60>
 80088f4:	68b5      	ldr	r5, [r6, #8]
 80088f6:	e7df      	b.n	80088b8 <_vfiprintf_r+0x20>
 80088f8:	4b79      	ldr	r3, [pc, #484]	; (8008ae0 <_vfiprintf_r+0x248>)
 80088fa:	429d      	cmp	r5, r3
 80088fc:	bf08      	it	eq
 80088fe:	68f5      	ldreq	r5, [r6, #12]
 8008900:	e7da      	b.n	80088b8 <_vfiprintf_r+0x20>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	0598      	lsls	r0, r3, #22
 8008906:	d4ed      	bmi.n	80088e4 <_vfiprintf_r+0x4c>
 8008908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800890a:	f7ff faa5 	bl	8007e58 <__retarget_lock_release_recursive>
 800890e:	e7e9      	b.n	80088e4 <_vfiprintf_r+0x4c>
 8008910:	2300      	movs	r3, #0
 8008912:	9309      	str	r3, [sp, #36]	; 0x24
 8008914:	2320      	movs	r3, #32
 8008916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800891a:	f8cd 800c 	str.w	r8, [sp, #12]
 800891e:	2330      	movs	r3, #48	; 0x30
 8008920:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ae4 <_vfiprintf_r+0x24c>
 8008924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008928:	f04f 0901 	mov.w	r9, #1
 800892c:	4623      	mov	r3, r4
 800892e:	469a      	mov	sl, r3
 8008930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008934:	b10a      	cbz	r2, 800893a <_vfiprintf_r+0xa2>
 8008936:	2a25      	cmp	r2, #37	; 0x25
 8008938:	d1f9      	bne.n	800892e <_vfiprintf_r+0x96>
 800893a:	ebba 0b04 	subs.w	fp, sl, r4
 800893e:	d00b      	beq.n	8008958 <_vfiprintf_r+0xc0>
 8008940:	465b      	mov	r3, fp
 8008942:	4622      	mov	r2, r4
 8008944:	4629      	mov	r1, r5
 8008946:	4630      	mov	r0, r6
 8008948:	f7ff ff93 	bl	8008872 <__sfputs_r>
 800894c:	3001      	adds	r0, #1
 800894e:	f000 80aa 	beq.w	8008aa6 <_vfiprintf_r+0x20e>
 8008952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008954:	445a      	add	r2, fp
 8008956:	9209      	str	r2, [sp, #36]	; 0x24
 8008958:	f89a 3000 	ldrb.w	r3, [sl]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80a2 	beq.w	8008aa6 <_vfiprintf_r+0x20e>
 8008962:	2300      	movs	r3, #0
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800896c:	f10a 0a01 	add.w	sl, sl, #1
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	9307      	str	r3, [sp, #28]
 8008974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008978:	931a      	str	r3, [sp, #104]	; 0x68
 800897a:	4654      	mov	r4, sl
 800897c:	2205      	movs	r2, #5
 800897e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008982:	4858      	ldr	r0, [pc, #352]	; (8008ae4 <_vfiprintf_r+0x24c>)
 8008984:	f7f7 fc4c 	bl	8000220 <memchr>
 8008988:	9a04      	ldr	r2, [sp, #16]
 800898a:	b9d8      	cbnz	r0, 80089c4 <_vfiprintf_r+0x12c>
 800898c:	06d1      	lsls	r1, r2, #27
 800898e:	bf44      	itt	mi
 8008990:	2320      	movmi	r3, #32
 8008992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008996:	0713      	lsls	r3, r2, #28
 8008998:	bf44      	itt	mi
 800899a:	232b      	movmi	r3, #43	; 0x2b
 800899c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a0:	f89a 3000 	ldrb.w	r3, [sl]
 80089a4:	2b2a      	cmp	r3, #42	; 0x2a
 80089a6:	d015      	beq.n	80089d4 <_vfiprintf_r+0x13c>
 80089a8:	9a07      	ldr	r2, [sp, #28]
 80089aa:	4654      	mov	r4, sl
 80089ac:	2000      	movs	r0, #0
 80089ae:	f04f 0c0a 	mov.w	ip, #10
 80089b2:	4621      	mov	r1, r4
 80089b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b8:	3b30      	subs	r3, #48	; 0x30
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d94e      	bls.n	8008a5c <_vfiprintf_r+0x1c4>
 80089be:	b1b0      	cbz	r0, 80089ee <_vfiprintf_r+0x156>
 80089c0:	9207      	str	r2, [sp, #28]
 80089c2:	e014      	b.n	80089ee <_vfiprintf_r+0x156>
 80089c4:	eba0 0308 	sub.w	r3, r0, r8
 80089c8:	fa09 f303 	lsl.w	r3, r9, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	46a2      	mov	sl, r4
 80089d2:	e7d2      	b.n	800897a <_vfiprintf_r+0xe2>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	1d19      	adds	r1, r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	9103      	str	r1, [sp, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bfbb      	ittet	lt
 80089e0:	425b      	neglt	r3, r3
 80089e2:	f042 0202 	orrlt.w	r2, r2, #2
 80089e6:	9307      	strge	r3, [sp, #28]
 80089e8:	9307      	strlt	r3, [sp, #28]
 80089ea:	bfb8      	it	lt
 80089ec:	9204      	strlt	r2, [sp, #16]
 80089ee:	7823      	ldrb	r3, [r4, #0]
 80089f0:	2b2e      	cmp	r3, #46	; 0x2e
 80089f2:	d10c      	bne.n	8008a0e <_vfiprintf_r+0x176>
 80089f4:	7863      	ldrb	r3, [r4, #1]
 80089f6:	2b2a      	cmp	r3, #42	; 0x2a
 80089f8:	d135      	bne.n	8008a66 <_vfiprintf_r+0x1ce>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	1d1a      	adds	r2, r3, #4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	9203      	str	r2, [sp, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	bfb8      	it	lt
 8008a06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a0a:	3402      	adds	r4, #2
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008af4 <_vfiprintf_r+0x25c>
 8008a12:	7821      	ldrb	r1, [r4, #0]
 8008a14:	2203      	movs	r2, #3
 8008a16:	4650      	mov	r0, sl
 8008a18:	f7f7 fc02 	bl	8000220 <memchr>
 8008a1c:	b140      	cbz	r0, 8008a30 <_vfiprintf_r+0x198>
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	eba0 000a 	sub.w	r0, r0, sl
 8008a24:	fa03 f000 	lsl.w	r0, r3, r0
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	4303      	orrs	r3, r0
 8008a2c:	3401      	adds	r4, #1
 8008a2e:	9304      	str	r3, [sp, #16]
 8008a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a34:	482c      	ldr	r0, [pc, #176]	; (8008ae8 <_vfiprintf_r+0x250>)
 8008a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a3a:	2206      	movs	r2, #6
 8008a3c:	f7f7 fbf0 	bl	8000220 <memchr>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d03f      	beq.n	8008ac4 <_vfiprintf_r+0x22c>
 8008a44:	4b29      	ldr	r3, [pc, #164]	; (8008aec <_vfiprintf_r+0x254>)
 8008a46:	bb1b      	cbnz	r3, 8008a90 <_vfiprintf_r+0x1f8>
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	3307      	adds	r3, #7
 8008a4c:	f023 0307 	bic.w	r3, r3, #7
 8008a50:	3308      	adds	r3, #8
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a56:	443b      	add	r3, r7
 8008a58:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5a:	e767      	b.n	800892c <_vfiprintf_r+0x94>
 8008a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a60:	460c      	mov	r4, r1
 8008a62:	2001      	movs	r0, #1
 8008a64:	e7a5      	b.n	80089b2 <_vfiprintf_r+0x11a>
 8008a66:	2300      	movs	r3, #0
 8008a68:	3401      	adds	r4, #1
 8008a6a:	9305      	str	r3, [sp, #20]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f04f 0c0a 	mov.w	ip, #10
 8008a72:	4620      	mov	r0, r4
 8008a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a78:	3a30      	subs	r2, #48	; 0x30
 8008a7a:	2a09      	cmp	r2, #9
 8008a7c:	d903      	bls.n	8008a86 <_vfiprintf_r+0x1ee>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0c5      	beq.n	8008a0e <_vfiprintf_r+0x176>
 8008a82:	9105      	str	r1, [sp, #20]
 8008a84:	e7c3      	b.n	8008a0e <_vfiprintf_r+0x176>
 8008a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e7f0      	b.n	8008a72 <_vfiprintf_r+0x1da>
 8008a90:	ab03      	add	r3, sp, #12
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	462a      	mov	r2, r5
 8008a96:	4b16      	ldr	r3, [pc, #88]	; (8008af0 <_vfiprintf_r+0x258>)
 8008a98:	a904      	add	r1, sp, #16
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7fd fc8c 	bl	80063b8 <_printf_float>
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	1c78      	adds	r0, r7, #1
 8008aa4:	d1d6      	bne.n	8008a54 <_vfiprintf_r+0x1bc>
 8008aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa8:	07d9      	lsls	r1, r3, #31
 8008aaa:	d405      	bmi.n	8008ab8 <_vfiprintf_r+0x220>
 8008aac:	89ab      	ldrh	r3, [r5, #12]
 8008aae:	059a      	lsls	r2, r3, #22
 8008ab0:	d402      	bmi.n	8008ab8 <_vfiprintf_r+0x220>
 8008ab2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ab4:	f7ff f9d0 	bl	8007e58 <__retarget_lock_release_recursive>
 8008ab8:	89ab      	ldrh	r3, [r5, #12]
 8008aba:	065b      	lsls	r3, r3, #25
 8008abc:	f53f af12 	bmi.w	80088e4 <_vfiprintf_r+0x4c>
 8008ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac2:	e711      	b.n	80088e8 <_vfiprintf_r+0x50>
 8008ac4:	ab03      	add	r3, sp, #12
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	462a      	mov	r2, r5
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <_vfiprintf_r+0x258>)
 8008acc:	a904      	add	r1, sp, #16
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7fd ff16 	bl	8006900 <_printf_i>
 8008ad4:	e7e4      	b.n	8008aa0 <_vfiprintf_r+0x208>
 8008ad6:	bf00      	nop
 8008ad8:	0800b9e4 	.word	0x0800b9e4
 8008adc:	0800ba04 	.word	0x0800ba04
 8008ae0:	0800b9c4 	.word	0x0800b9c4
 8008ae4:	0800bb7c 	.word	0x0800bb7c
 8008ae8:	0800bb86 	.word	0x0800bb86
 8008aec:	080063b9 	.word	0x080063b9
 8008af0:	08008873 	.word	0x08008873
 8008af4:	0800bb82 	.word	0x0800bb82

08008af8 <_sbrk_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	; (8008b14 <_sbrk_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7fa fcb4 	bl	8003470 <_sbrk>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_sbrk_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_sbrk_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20000348 	.word	0x20000348

08008b18 <__sread>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b20:	f000 f8e2 	bl	8008ce8 <_read_r>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	bfab      	itete	ge
 8008b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b2c:	181b      	addge	r3, r3, r0
 8008b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b32:	bfac      	ite	ge
 8008b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b36:	81a3      	strhlt	r3, [r4, #12]
 8008b38:	bd10      	pop	{r4, pc}

08008b3a <__swrite>:
 8008b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3e:	461f      	mov	r7, r3
 8008b40:	898b      	ldrh	r3, [r1, #12]
 8008b42:	05db      	lsls	r3, r3, #23
 8008b44:	4605      	mov	r5, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	4616      	mov	r6, r2
 8008b4a:	d505      	bpl.n	8008b58 <__swrite+0x1e>
 8008b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b50:	2302      	movs	r3, #2
 8008b52:	2200      	movs	r2, #0
 8008b54:	f000 f898 	bl	8008c88 <_lseek_r>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	4628      	mov	r0, r5
 8008b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	f000 b817 	b.w	8008ba0 <_write_r>

08008b72 <__sseek>:
 8008b72:	b510      	push	{r4, lr}
 8008b74:	460c      	mov	r4, r1
 8008b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7a:	f000 f885 	bl	8008c88 <_lseek_r>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	bf15      	itete	ne
 8008b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b8e:	81a3      	strheq	r3, [r4, #12]
 8008b90:	bf18      	it	ne
 8008b92:	81a3      	strhne	r3, [r4, #12]
 8008b94:	bd10      	pop	{r4, pc}

08008b96 <__sclose>:
 8008b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9a:	f000 b831 	b.w	8008c00 <_close_r>
	...

08008ba0 <_write_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d07      	ldr	r5, [pc, #28]	; (8008bc0 <_write_r+0x20>)
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f7fa fac4 	bl	800313c <_write>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_write_r+0x1e>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_write_r+0x1e>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	20000348 	.word	0x20000348

08008bc4 <__assert_func>:
 8008bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <__assert_func+0x2c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4605      	mov	r5, r0
 8008bd0:	68d8      	ldr	r0, [r3, #12]
 8008bd2:	b14c      	cbz	r4, 8008be8 <__assert_func+0x24>
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <__assert_func+0x30>)
 8008bd6:	9100      	str	r1, [sp, #0]
 8008bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bdc:	4906      	ldr	r1, [pc, #24]	; (8008bf8 <__assert_func+0x34>)
 8008bde:	462b      	mov	r3, r5
 8008be0:	f000 f81e 	bl	8008c20 <fiprintf>
 8008be4:	f000 f89f 	bl	8008d26 <abort>
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <__assert_func+0x38>)
 8008bea:	461c      	mov	r4, r3
 8008bec:	e7f3      	b.n	8008bd6 <__assert_func+0x12>
 8008bee:	bf00      	nop
 8008bf0:	2000000c 	.word	0x2000000c
 8008bf4:	0800bb8d 	.word	0x0800bb8d
 8008bf8:	0800bb9a 	.word	0x0800bb9a
 8008bfc:	0800bbc8 	.word	0x0800bbc8

08008c00 <_close_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d06      	ldr	r5, [pc, #24]	; (8008c1c <_close_r+0x1c>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	f7fa fbfb 	bl	8003406 <_close>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_close_r+0x1a>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_close_r+0x1a>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000348 	.word	0x20000348

08008c20 <fiprintf>:
 8008c20:	b40e      	push	{r1, r2, r3}
 8008c22:	b503      	push	{r0, r1, lr}
 8008c24:	4601      	mov	r1, r0
 8008c26:	ab03      	add	r3, sp, #12
 8008c28:	4805      	ldr	r0, [pc, #20]	; (8008c40 <fiprintf+0x20>)
 8008c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	f7ff fe31 	bl	8008898 <_vfiprintf_r>
 8008c36:	b002      	add	sp, #8
 8008c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c3c:	b003      	add	sp, #12
 8008c3e:	4770      	bx	lr
 8008c40:	2000000c 	.word	0x2000000c

08008c44 <_fstat_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_fstat_r+0x20>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f7fa fbe4 	bl	800341e <_fstat>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d102      	bne.n	8008c60 <_fstat_r+0x1c>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	b103      	cbz	r3, 8008c60 <_fstat_r+0x1c>
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	20000348 	.word	0x20000348

08008c68 <_isatty_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	; (8008c84 <_isatty_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7fa fbe3 	bl	800343e <_isatty>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_isatty_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_isatty_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20000348 	.word	0x20000348

08008c88 <_lseek_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d07      	ldr	r5, [pc, #28]	; (8008ca8 <_lseek_r+0x20>)
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4608      	mov	r0, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	602a      	str	r2, [r5, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f7fa fbdc 	bl	8003454 <_lseek>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_lseek_r+0x1e>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_lseek_r+0x1e>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20000348 	.word	0x20000348

08008cac <__ascii_mbtowc>:
 8008cac:	b082      	sub	sp, #8
 8008cae:	b901      	cbnz	r1, 8008cb2 <__ascii_mbtowc+0x6>
 8008cb0:	a901      	add	r1, sp, #4
 8008cb2:	b142      	cbz	r2, 8008cc6 <__ascii_mbtowc+0x1a>
 8008cb4:	b14b      	cbz	r3, 8008cca <__ascii_mbtowc+0x1e>
 8008cb6:	7813      	ldrb	r3, [r2, #0]
 8008cb8:	600b      	str	r3, [r1, #0]
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	1e10      	subs	r0, r2, #0
 8008cbe:	bf18      	it	ne
 8008cc0:	2001      	movne	r0, #1
 8008cc2:	b002      	add	sp, #8
 8008cc4:	4770      	bx	lr
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	e7fb      	b.n	8008cc2 <__ascii_mbtowc+0x16>
 8008cca:	f06f 0001 	mvn.w	r0, #1
 8008cce:	e7f8      	b.n	8008cc2 <__ascii_mbtowc+0x16>

08008cd0 <__malloc_lock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__malloc_lock+0x8>)
 8008cd2:	f7ff b8c0 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	2000033c 	.word	0x2000033c

08008cdc <__malloc_unlock>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__malloc_unlock+0x8>)
 8008cde:	f7ff b8bb 	b.w	8007e58 <__retarget_lock_release_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	2000033c 	.word	0x2000033c

08008ce8 <_read_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	; (8008d08 <_read_r+0x20>)
 8008cec:	4604      	mov	r4, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	602a      	str	r2, [r5, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f7fa fb68 	bl	80033cc <_read>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_read_r+0x1e>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_read_r+0x1e>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000348 	.word	0x20000348

08008d0c <__ascii_wctomb>:
 8008d0c:	b149      	cbz	r1, 8008d22 <__ascii_wctomb+0x16>
 8008d0e:	2aff      	cmp	r2, #255	; 0xff
 8008d10:	bf85      	ittet	hi
 8008d12:	238a      	movhi	r3, #138	; 0x8a
 8008d14:	6003      	strhi	r3, [r0, #0]
 8008d16:	700a      	strbls	r2, [r1, #0]
 8008d18:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d1c:	bf98      	it	ls
 8008d1e:	2001      	movls	r0, #1
 8008d20:	4770      	bx	lr
 8008d22:	4608      	mov	r0, r1
 8008d24:	4770      	bx	lr

08008d26 <abort>:
 8008d26:	b508      	push	{r3, lr}
 8008d28:	2006      	movs	r0, #6
 8008d2a:	f000 f82b 	bl	8008d84 <raise>
 8008d2e:	2001      	movs	r0, #1
 8008d30:	f7fa fb42 	bl	80033b8 <_exit>

08008d34 <_raise_r>:
 8008d34:	291f      	cmp	r1, #31
 8008d36:	b538      	push	{r3, r4, r5, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	d904      	bls.n	8008d48 <_raise_r+0x14>
 8008d3e:	2316      	movs	r3, #22
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d4a:	b112      	cbz	r2, 8008d52 <_raise_r+0x1e>
 8008d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d50:	b94b      	cbnz	r3, 8008d66 <_raise_r+0x32>
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f830 	bl	8008db8 <_getpid_r>
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d62:	f000 b817 	b.w	8008d94 <_kill_r>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d00a      	beq.n	8008d80 <_raise_r+0x4c>
 8008d6a:	1c59      	adds	r1, r3, #1
 8008d6c:	d103      	bne.n	8008d76 <_raise_r+0x42>
 8008d6e:	2316      	movs	r3, #22
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	2001      	movs	r0, #1
 8008d74:	e7e7      	b.n	8008d46 <_raise_r+0x12>
 8008d76:	2400      	movs	r4, #0
 8008d78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	4798      	blx	r3
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7e0      	b.n	8008d46 <_raise_r+0x12>

08008d84 <raise>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <raise+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bfd3 	b.w	8008d34 <_raise_r>
 8008d8e:	bf00      	nop
 8008d90:	2000000c 	.word	0x2000000c

08008d94 <_kill_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	; (8008db4 <_kill_r+0x20>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f7fa faf9 	bl	8003398 <_kill>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d102      	bne.n	8008db0 <_kill_r+0x1c>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	b103      	cbz	r3, 8008db0 <_kill_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	20000348 	.word	0x20000348

08008db8 <_getpid_r>:
 8008db8:	f7fa bae6 	b.w	8003388 <_getpid>

08008dbc <pow>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	ed2d 8b02 	vpush	{d8}
 8008dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8008dc6:	eef0 8a60 	vmov.f32	s17, s1
 8008dca:	ec55 4b11 	vmov	r4, r5, d1
 8008dce:	f000 f867 	bl	8008ea0 <__ieee754_pow>
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	ec57 6b10 	vmov	r6, r7, d0
 8008dde:	f7f7 fec5 	bl	8000b6c <__aeabi_dcmpun>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d13b      	bne.n	8008e5e <pow+0xa2>
 8008de6:	ec51 0b18 	vmov	r0, r1, d8
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f7f7 fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 8008df2:	b1b8      	cbz	r0, 8008e24 <pow+0x68>
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d146      	bne.n	8008e92 <pow+0xd6>
 8008e04:	ec45 4b10 	vmov	d0, r4, r5
 8008e08:	f000 fe63 	bl	8009ad2 <finite>
 8008e0c:	b338      	cbz	r0, 8008e5e <pow+0xa2>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2300      	movs	r3, #0
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fe81 	bl	8000b1c <__aeabi_dcmplt>
 8008e1a:	b300      	cbz	r0, 8008e5e <pow+0xa2>
 8008e1c:	f7fd f9fa 	bl	8006214 <__errno>
 8008e20:	2322      	movs	r3, #34	; 0x22
 8008e22:	e01b      	b.n	8008e5c <pow+0xa0>
 8008e24:	ec47 6b10 	vmov	d0, r6, r7
 8008e28:	f000 fe53 	bl	8009ad2 <finite>
 8008e2c:	b9e0      	cbnz	r0, 8008e68 <pow+0xac>
 8008e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8008e32:	eef0 0a68 	vmov.f32	s1, s17
 8008e36:	f000 fe4c 	bl	8009ad2 <finite>
 8008e3a:	b1a8      	cbz	r0, 8008e68 <pow+0xac>
 8008e3c:	ec45 4b10 	vmov	d0, r4, r5
 8008e40:	f000 fe47 	bl	8009ad2 <finite>
 8008e44:	b180      	cbz	r0, 8008e68 <pow+0xac>
 8008e46:	4632      	mov	r2, r6
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 fe8d 	bl	8000b6c <__aeabi_dcmpun>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d0e2      	beq.n	8008e1c <pow+0x60>
 8008e56:	f7fd f9dd 	bl	8006214 <__errno>
 8008e5a:	2321      	movs	r3, #33	; 0x21
 8008e5c:	6003      	str	r3, [r0, #0]
 8008e5e:	ecbd 8b02 	vpop	{d8}
 8008e62:	ec47 6b10 	vmov	d0, r6, r7
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7f7 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0f2      	beq.n	8008e5e <pow+0xa2>
 8008e78:	eeb0 0a48 	vmov.f32	s0, s16
 8008e7c:	eef0 0a68 	vmov.f32	s1, s17
 8008e80:	f000 fe27 	bl	8009ad2 <finite>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0ea      	beq.n	8008e5e <pow+0xa2>
 8008e88:	ec45 4b10 	vmov	d0, r4, r5
 8008e8c:	f000 fe21 	bl	8009ad2 <finite>
 8008e90:	e7c3      	b.n	8008e1a <pow+0x5e>
 8008e92:	4f01      	ldr	r7, [pc, #4]	; (8008e98 <pow+0xdc>)
 8008e94:	2600      	movs	r6, #0
 8008e96:	e7e2      	b.n	8008e5e <pow+0xa2>
 8008e98:	3ff00000 	.word	0x3ff00000
 8008e9c:	00000000 	.word	0x00000000

08008ea0 <__ieee754_pow>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	ed2d 8b06 	vpush	{d8-d10}
 8008ea8:	b089      	sub	sp, #36	; 0x24
 8008eaa:	ed8d 1b00 	vstr	d1, [sp]
 8008eae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008eb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008eb6:	ea58 0102 	orrs.w	r1, r8, r2
 8008eba:	ec57 6b10 	vmov	r6, r7, d0
 8008ebe:	d115      	bne.n	8008eec <__ieee754_pow+0x4c>
 8008ec0:	19b3      	adds	r3, r6, r6
 8008ec2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008ec6:	4152      	adcs	r2, r2
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	4b89      	ldr	r3, [pc, #548]	; (80090f0 <__ieee754_pow+0x250>)
 8008ecc:	4193      	sbcs	r3, r2
 8008ece:	f080 84d2 	bcs.w	8009876 <__ieee754_pow+0x9d6>
 8008ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 f9f7 	bl	80002cc <__adddf3>
 8008ede:	ec41 0b10 	vmov	d0, r0, r1
 8008ee2:	b009      	add	sp, #36	; 0x24
 8008ee4:	ecbd 8b06 	vpop	{d8-d10}
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	4b81      	ldr	r3, [pc, #516]	; (80090f4 <__ieee754_pow+0x254>)
 8008eee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	ee10 aa10 	vmov	sl, s0
 8008ef8:	463d      	mov	r5, r7
 8008efa:	dc06      	bgt.n	8008f0a <__ieee754_pow+0x6a>
 8008efc:	d101      	bne.n	8008f02 <__ieee754_pow+0x62>
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d1e7      	bne.n	8008ed2 <__ieee754_pow+0x32>
 8008f02:	4598      	cmp	r8, r3
 8008f04:	dc01      	bgt.n	8008f0a <__ieee754_pow+0x6a>
 8008f06:	d10f      	bne.n	8008f28 <__ieee754_pow+0x88>
 8008f08:	b172      	cbz	r2, 8008f28 <__ieee754_pow+0x88>
 8008f0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008f0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008f12:	ea55 050a 	orrs.w	r5, r5, sl
 8008f16:	d1dc      	bne.n	8008ed2 <__ieee754_pow+0x32>
 8008f18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f1c:	18db      	adds	r3, r3, r3
 8008f1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008f22:	4152      	adcs	r2, r2
 8008f24:	429d      	cmp	r5, r3
 8008f26:	e7d0      	b.n	8008eca <__ieee754_pow+0x2a>
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	da3b      	bge.n	8008fa4 <__ieee754_pow+0x104>
 8008f2c:	4b72      	ldr	r3, [pc, #456]	; (80090f8 <__ieee754_pow+0x258>)
 8008f2e:	4598      	cmp	r8, r3
 8008f30:	dc51      	bgt.n	8008fd6 <__ieee754_pow+0x136>
 8008f32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f36:	4598      	cmp	r8, r3
 8008f38:	f340 84ac 	ble.w	8009894 <__ieee754_pow+0x9f4>
 8008f3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f44:	2b14      	cmp	r3, #20
 8008f46:	dd0f      	ble.n	8008f68 <__ieee754_pow+0xc8>
 8008f48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f4c:	fa22 f103 	lsr.w	r1, r2, r3
 8008f50:	fa01 f303 	lsl.w	r3, r1, r3
 8008f54:	4293      	cmp	r3, r2
 8008f56:	f040 849d 	bne.w	8009894 <__ieee754_pow+0x9f4>
 8008f5a:	f001 0101 	and.w	r1, r1, #1
 8008f5e:	f1c1 0302 	rsb	r3, r1, #2
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	b182      	cbz	r2, 8008f88 <__ieee754_pow+0xe8>
 8008f66:	e05f      	b.n	8009028 <__ieee754_pow+0x188>
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	d15b      	bne.n	8009024 <__ieee754_pow+0x184>
 8008f6c:	f1c3 0314 	rsb	r3, r3, #20
 8008f70:	fa48 f103 	asr.w	r1, r8, r3
 8008f74:	fa01 f303 	lsl.w	r3, r1, r3
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	f040 8488 	bne.w	800988e <__ieee754_pow+0x9ee>
 8008f7e:	f001 0101 	and.w	r1, r1, #1
 8008f82:	f1c1 0302 	rsb	r3, r1, #2
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	4b5c      	ldr	r3, [pc, #368]	; (80090fc <__ieee754_pow+0x25c>)
 8008f8a:	4598      	cmp	r8, r3
 8008f8c:	d132      	bne.n	8008ff4 <__ieee754_pow+0x154>
 8008f8e:	f1b9 0f00 	cmp.w	r9, #0
 8008f92:	f280 8478 	bge.w	8009886 <__ieee754_pow+0x9e6>
 8008f96:	4959      	ldr	r1, [pc, #356]	; (80090fc <__ieee754_pow+0x25c>)
 8008f98:	4632      	mov	r2, r6
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f7f7 fc75 	bl	800088c <__aeabi_ddiv>
 8008fa2:	e79c      	b.n	8008ede <__ieee754_pow+0x3e>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9304      	str	r3, [sp, #16]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d13d      	bne.n	8009028 <__ieee754_pow+0x188>
 8008fac:	4b51      	ldr	r3, [pc, #324]	; (80090f4 <__ieee754_pow+0x254>)
 8008fae:	4598      	cmp	r8, r3
 8008fb0:	d1ea      	bne.n	8008f88 <__ieee754_pow+0xe8>
 8008fb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008fb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008fba:	ea53 030a 	orrs.w	r3, r3, sl
 8008fbe:	f000 845a 	beq.w	8009876 <__ieee754_pow+0x9d6>
 8008fc2:	4b4f      	ldr	r3, [pc, #316]	; (8009100 <__ieee754_pow+0x260>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	dd08      	ble.n	8008fda <__ieee754_pow+0x13a>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	f2c0 8457 	blt.w	800987e <__ieee754_pow+0x9de>
 8008fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd4:	e783      	b.n	8008ede <__ieee754_pow+0x3e>
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	e7e5      	b.n	8008fa6 <__ieee754_pow+0x106>
 8008fda:	f1b9 0f00 	cmp.w	r9, #0
 8008fde:	f04f 0000 	mov.w	r0, #0
 8008fe2:	f04f 0100 	mov.w	r1, #0
 8008fe6:	f6bf af7a 	bge.w	8008ede <__ieee754_pow+0x3e>
 8008fea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008fee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ff2:	e774      	b.n	8008ede <__ieee754_pow+0x3e>
 8008ff4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008ff8:	d106      	bne.n	8009008 <__ieee754_pow+0x168>
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 fb19 	bl	8000638 <__aeabi_dmul>
 8009006:	e76a      	b.n	8008ede <__ieee754_pow+0x3e>
 8009008:	4b3e      	ldr	r3, [pc, #248]	; (8009104 <__ieee754_pow+0x264>)
 800900a:	4599      	cmp	r9, r3
 800900c:	d10c      	bne.n	8009028 <__ieee754_pow+0x188>
 800900e:	2d00      	cmp	r5, #0
 8009010:	db0a      	blt.n	8009028 <__ieee754_pow+0x188>
 8009012:	ec47 6b10 	vmov	d0, r6, r7
 8009016:	b009      	add	sp, #36	; 0x24
 8009018:	ecbd 8b06 	vpop	{d8-d10}
 800901c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	f000 bc6c 	b.w	80098fc <__ieee754_sqrt>
 8009024:	2300      	movs	r3, #0
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	ec47 6b10 	vmov	d0, r6, r7
 800902c:	f000 fd48 	bl	8009ac0 <fabs>
 8009030:	ec51 0b10 	vmov	r0, r1, d0
 8009034:	f1ba 0f00 	cmp.w	sl, #0
 8009038:	d129      	bne.n	800908e <__ieee754_pow+0x1ee>
 800903a:	b124      	cbz	r4, 8009046 <__ieee754_pow+0x1a6>
 800903c:	4b2f      	ldr	r3, [pc, #188]	; (80090fc <__ieee754_pow+0x25c>)
 800903e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009042:	429a      	cmp	r2, r3
 8009044:	d123      	bne.n	800908e <__ieee754_pow+0x1ee>
 8009046:	f1b9 0f00 	cmp.w	r9, #0
 800904a:	da05      	bge.n	8009058 <__ieee754_pow+0x1b8>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	2000      	movs	r0, #0
 8009052:	492a      	ldr	r1, [pc, #168]	; (80090fc <__ieee754_pow+0x25c>)
 8009054:	f7f7 fc1a 	bl	800088c <__aeabi_ddiv>
 8009058:	2d00      	cmp	r5, #0
 800905a:	f6bf af40 	bge.w	8008ede <__ieee754_pow+0x3e>
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009064:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009068:	4323      	orrs	r3, r4
 800906a:	d108      	bne.n	800907e <__ieee754_pow+0x1de>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4610      	mov	r0, r2
 8009072:	4619      	mov	r1, r3
 8009074:	f7f7 f928 	bl	80002c8 <__aeabi_dsub>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	e78f      	b.n	8008f9e <__ieee754_pow+0xfe>
 800907e:	9b04      	ldr	r3, [sp, #16]
 8009080:	2b01      	cmp	r3, #1
 8009082:	f47f af2c 	bne.w	8008ede <__ieee754_pow+0x3e>
 8009086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800908a:	4619      	mov	r1, r3
 800908c:	e727      	b.n	8008ede <__ieee754_pow+0x3e>
 800908e:	0feb      	lsrs	r3, r5, #31
 8009090:	3b01      	subs	r3, #1
 8009092:	9306      	str	r3, [sp, #24]
 8009094:	9a06      	ldr	r2, [sp, #24]
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	d102      	bne.n	80090a2 <__ieee754_pow+0x202>
 800909c:	4632      	mov	r2, r6
 800909e:	463b      	mov	r3, r7
 80090a0:	e7e6      	b.n	8009070 <__ieee754_pow+0x1d0>
 80090a2:	4b19      	ldr	r3, [pc, #100]	; (8009108 <__ieee754_pow+0x268>)
 80090a4:	4598      	cmp	r8, r3
 80090a6:	f340 80fb 	ble.w	80092a0 <__ieee754_pow+0x400>
 80090aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80090ae:	4598      	cmp	r8, r3
 80090b0:	4b13      	ldr	r3, [pc, #76]	; (8009100 <__ieee754_pow+0x260>)
 80090b2:	dd0c      	ble.n	80090ce <__ieee754_pow+0x22e>
 80090b4:	429c      	cmp	r4, r3
 80090b6:	dc0f      	bgt.n	80090d8 <__ieee754_pow+0x238>
 80090b8:	f1b9 0f00 	cmp.w	r9, #0
 80090bc:	da0f      	bge.n	80090de <__ieee754_pow+0x23e>
 80090be:	2000      	movs	r0, #0
 80090c0:	b009      	add	sp, #36	; 0x24
 80090c2:	ecbd 8b06 	vpop	{d8-d10}
 80090c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	f000 bcf0 	b.w	8009aae <__math_oflow>
 80090ce:	429c      	cmp	r4, r3
 80090d0:	dbf2      	blt.n	80090b8 <__ieee754_pow+0x218>
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <__ieee754_pow+0x25c>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	dd19      	ble.n	800910c <__ieee754_pow+0x26c>
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	dcef      	bgt.n	80090be <__ieee754_pow+0x21e>
 80090de:	2000      	movs	r0, #0
 80090e0:	b009      	add	sp, #36	; 0x24
 80090e2:	ecbd 8b06 	vpop	{d8-d10}
 80090e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	f000 bcd7 	b.w	8009a9c <__math_uflow>
 80090ee:	bf00      	nop
 80090f0:	fff00000 	.word	0xfff00000
 80090f4:	7ff00000 	.word	0x7ff00000
 80090f8:	433fffff 	.word	0x433fffff
 80090fc:	3ff00000 	.word	0x3ff00000
 8009100:	3fefffff 	.word	0x3fefffff
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	41e00000 	.word	0x41e00000
 800910c:	4b60      	ldr	r3, [pc, #384]	; (8009290 <__ieee754_pow+0x3f0>)
 800910e:	2200      	movs	r2, #0
 8009110:	f7f7 f8da 	bl	80002c8 <__aeabi_dsub>
 8009114:	a354      	add	r3, pc, #336	; (adr r3, 8009268 <__ieee754_pow+0x3c8>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	f7f7 fa8b 	bl	8000638 <__aeabi_dmul>
 8009122:	a353      	add	r3, pc, #332	; (adr r3, 8009270 <__ieee754_pow+0x3d0>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	4606      	mov	r6, r0
 800912a:	460f      	mov	r7, r1
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 fa82 	bl	8000638 <__aeabi_dmul>
 8009134:	4b57      	ldr	r3, [pc, #348]	; (8009294 <__ieee754_pow+0x3f4>)
 8009136:	4682      	mov	sl, r0
 8009138:	468b      	mov	fp, r1
 800913a:	2200      	movs	r2, #0
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f7f7 fa7a 	bl	8000638 <__aeabi_dmul>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	a14b      	add	r1, pc, #300	; (adr r1, 8009278 <__ieee754_pow+0x3d8>)
 800914a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800914e:	f7f7 f8bb 	bl	80002c8 <__aeabi_dsub>
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f7f7 fa6f 	bl	8000638 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	2000      	movs	r0, #0
 8009160:	494d      	ldr	r1, [pc, #308]	; (8009298 <__ieee754_pow+0x3f8>)
 8009162:	f7f7 f8b1 	bl	80002c8 <__aeabi_dsub>
 8009166:	4622      	mov	r2, r4
 8009168:	4680      	mov	r8, r0
 800916a:	4689      	mov	r9, r1
 800916c:	462b      	mov	r3, r5
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 fa61 	bl	8000638 <__aeabi_dmul>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fa5b 	bl	8000638 <__aeabi_dmul>
 8009182:	a33f      	add	r3, pc, #252	; (adr r3, 8009280 <__ieee754_pow+0x3e0>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4650      	mov	r0, sl
 8009192:	4659      	mov	r1, fp
 8009194:	f7f7 f898 	bl	80002c8 <__aeabi_dsub>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4680      	mov	r8, r0
 800919e:	4689      	mov	r9, r1
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 f892 	bl	80002cc <__adddf3>
 80091a8:	2000      	movs	r0, #0
 80091aa:	4632      	mov	r2, r6
 80091ac:	463b      	mov	r3, r7
 80091ae:	4604      	mov	r4, r0
 80091b0:	460d      	mov	r5, r1
 80091b2:	f7f7 f889 	bl	80002c8 <__aeabi_dsub>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f883 	bl	80002c8 <__aeabi_dsub>
 80091c2:	9b04      	ldr	r3, [sp, #16]
 80091c4:	9a06      	ldr	r2, [sp, #24]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	4313      	orrs	r3, r2
 80091ca:	4682      	mov	sl, r0
 80091cc:	468b      	mov	fp, r1
 80091ce:	f040 81e7 	bne.w	80095a0 <__ieee754_pow+0x700>
 80091d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009288 <__ieee754_pow+0x3e8>
 80091d6:	eeb0 8a47 	vmov.f32	s16, s14
 80091da:	eef0 8a67 	vmov.f32	s17, s15
 80091de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80091e2:	2600      	movs	r6, #0
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	4622      	mov	r2, r4
 80091f2:	462b      	mov	r3, r5
 80091f4:	f7f7 fa20 	bl	8000638 <__aeabi_dmul>
 80091f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091fc:	4680      	mov	r8, r0
 80091fe:	4689      	mov	r9, r1
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 fa18 	bl	8000638 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	f7f7 f85c 	bl	80002cc <__adddf3>
 8009214:	4632      	mov	r2, r6
 8009216:	463b      	mov	r3, r7
 8009218:	4680      	mov	r8, r0
 800921a:	4689      	mov	r9, r1
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 fa0a 	bl	8000638 <__aeabi_dmul>
 8009224:	460b      	mov	r3, r1
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	4602      	mov	r2, r0
 800922c:	4649      	mov	r1, r9
 800922e:	4640      	mov	r0, r8
 8009230:	f7f7 f84c 	bl	80002cc <__adddf3>
 8009234:	4b19      	ldr	r3, [pc, #100]	; (800929c <__ieee754_pow+0x3fc>)
 8009236:	4299      	cmp	r1, r3
 8009238:	ec45 4b19 	vmov	d9, r4, r5
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	468b      	mov	fp, r1
 8009242:	f340 82f1 	ble.w	8009828 <__ieee754_pow+0x988>
 8009246:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800924a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800924e:	4303      	orrs	r3, r0
 8009250:	f000 81e4 	beq.w	800961c <__ieee754_pow+0x77c>
 8009254:	ec51 0b18 	vmov	r0, r1, d8
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	f7f7 fc5e 	bl	8000b1c <__aeabi_dcmplt>
 8009260:	3800      	subs	r0, #0
 8009262:	bf18      	it	ne
 8009264:	2001      	movne	r0, #1
 8009266:	e72b      	b.n	80090c0 <__ieee754_pow+0x220>
 8009268:	60000000 	.word	0x60000000
 800926c:	3ff71547 	.word	0x3ff71547
 8009270:	f85ddf44 	.word	0xf85ddf44
 8009274:	3e54ae0b 	.word	0x3e54ae0b
 8009278:	55555555 	.word	0x55555555
 800927c:	3fd55555 	.word	0x3fd55555
 8009280:	652b82fe 	.word	0x652b82fe
 8009284:	3ff71547 	.word	0x3ff71547
 8009288:	00000000 	.word	0x00000000
 800928c:	bff00000 	.word	0xbff00000
 8009290:	3ff00000 	.word	0x3ff00000
 8009294:	3fd00000 	.word	0x3fd00000
 8009298:	3fe00000 	.word	0x3fe00000
 800929c:	408fffff 	.word	0x408fffff
 80092a0:	4bd5      	ldr	r3, [pc, #852]	; (80095f8 <__ieee754_pow+0x758>)
 80092a2:	402b      	ands	r3, r5
 80092a4:	2200      	movs	r2, #0
 80092a6:	b92b      	cbnz	r3, 80092b4 <__ieee754_pow+0x414>
 80092a8:	4bd4      	ldr	r3, [pc, #848]	; (80095fc <__ieee754_pow+0x75c>)
 80092aa:	f7f7 f9c5 	bl	8000638 <__aeabi_dmul>
 80092ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80092b2:	460c      	mov	r4, r1
 80092b4:	1523      	asrs	r3, r4, #20
 80092b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092ba:	4413      	add	r3, r2
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	4bd0      	ldr	r3, [pc, #832]	; (8009600 <__ieee754_pow+0x760>)
 80092c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80092c8:	429c      	cmp	r4, r3
 80092ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092ce:	dd08      	ble.n	80092e2 <__ieee754_pow+0x442>
 80092d0:	4bcc      	ldr	r3, [pc, #816]	; (8009604 <__ieee754_pow+0x764>)
 80092d2:	429c      	cmp	r4, r3
 80092d4:	f340 8162 	ble.w	800959c <__ieee754_pow+0x6fc>
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	3301      	adds	r3, #1
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80092e2:	2400      	movs	r4, #0
 80092e4:	00e3      	lsls	r3, r4, #3
 80092e6:	9307      	str	r3, [sp, #28]
 80092e8:	4bc7      	ldr	r3, [pc, #796]	; (8009608 <__ieee754_pow+0x768>)
 80092ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092ee:	ed93 7b00 	vldr	d7, [r3]
 80092f2:	4629      	mov	r1, r5
 80092f4:	ec53 2b17 	vmov	r2, r3, d7
 80092f8:	eeb0 9a47 	vmov.f32	s18, s14
 80092fc:	eef0 9a67 	vmov.f32	s19, s15
 8009300:	4682      	mov	sl, r0
 8009302:	f7f6 ffe1 	bl	80002c8 <__aeabi_dsub>
 8009306:	4652      	mov	r2, sl
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	462b      	mov	r3, r5
 800930e:	ec51 0b19 	vmov	r0, r1, d9
 8009312:	f7f6 ffdb 	bl	80002cc <__adddf3>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	2000      	movs	r0, #0
 800931c:	49bb      	ldr	r1, [pc, #748]	; (800960c <__ieee754_pow+0x76c>)
 800931e:	f7f7 fab5 	bl	800088c <__aeabi_ddiv>
 8009322:	ec41 0b1a 	vmov	d10, r0, r1
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 f983 	bl	8000638 <__aeabi_dmul>
 8009332:	2300      	movs	r3, #0
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800933e:	46ab      	mov	fp, r5
 8009340:	106d      	asrs	r5, r5, #1
 8009342:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009346:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800934a:	ec41 0b18 	vmov	d8, r0, r1
 800934e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009352:	2200      	movs	r2, #0
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	4614      	mov	r4, r2
 800935a:	461d      	mov	r5, r3
 800935c:	f7f7 f96c 	bl	8000638 <__aeabi_dmul>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4630      	mov	r0, r6
 8009366:	4639      	mov	r1, r7
 8009368:	f7f6 ffae 	bl	80002c8 <__aeabi_dsub>
 800936c:	ec53 2b19 	vmov	r2, r3, d9
 8009370:	4606      	mov	r6, r0
 8009372:	460f      	mov	r7, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f6 ffa6 	bl	80002c8 <__aeabi_dsub>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4650      	mov	r0, sl
 8009382:	4659      	mov	r1, fp
 8009384:	f7f6 ffa0 	bl	80002c8 <__aeabi_dsub>
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	f7f7 f954 	bl	8000638 <__aeabi_dmul>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4630      	mov	r0, r6
 8009396:	4639      	mov	r1, r7
 8009398:	f7f6 ff96 	bl	80002c8 <__aeabi_dsub>
 800939c:	ec53 2b1a 	vmov	r2, r3, d10
 80093a0:	f7f7 f94a 	bl	8000638 <__aeabi_dmul>
 80093a4:	ec53 2b18 	vmov	r2, r3, d8
 80093a8:	ec41 0b19 	vmov	d9, r0, r1
 80093ac:	ec51 0b18 	vmov	r0, r1, d8
 80093b0:	f7f7 f942 	bl	8000638 <__aeabi_dmul>
 80093b4:	a37c      	add	r3, pc, #496	; (adr r3, 80095a8 <__ieee754_pow+0x708>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	f7f7 f93b 	bl	8000638 <__aeabi_dmul>
 80093c2:	a37b      	add	r3, pc, #492	; (adr r3, 80095b0 <__ieee754_pow+0x710>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f7f6 ff80 	bl	80002cc <__adddf3>
 80093cc:	4622      	mov	r2, r4
 80093ce:	462b      	mov	r3, r5
 80093d0:	f7f7 f932 	bl	8000638 <__aeabi_dmul>
 80093d4:	a378      	add	r3, pc, #480	; (adr r3, 80095b8 <__ieee754_pow+0x718>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f7f6 ff77 	bl	80002cc <__adddf3>
 80093de:	4622      	mov	r2, r4
 80093e0:	462b      	mov	r3, r5
 80093e2:	f7f7 f929 	bl	8000638 <__aeabi_dmul>
 80093e6:	a376      	add	r3, pc, #472	; (adr r3, 80095c0 <__ieee754_pow+0x720>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f6 ff6e 	bl	80002cc <__adddf3>
 80093f0:	4622      	mov	r2, r4
 80093f2:	462b      	mov	r3, r5
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	a373      	add	r3, pc, #460	; (adr r3, 80095c8 <__ieee754_pow+0x728>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 ff65 	bl	80002cc <__adddf3>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	a371      	add	r3, pc, #452	; (adr r3, 80095d0 <__ieee754_pow+0x730>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 ff5c 	bl	80002cc <__adddf3>
 8009414:	4622      	mov	r2, r4
 8009416:	4606      	mov	r6, r0
 8009418:	460f      	mov	r7, r1
 800941a:	462b      	mov	r3, r5
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 f90a 	bl	8000638 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 f904 	bl	8000638 <__aeabi_dmul>
 8009430:	4642      	mov	r2, r8
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
 8009436:	464b      	mov	r3, r9
 8009438:	ec51 0b18 	vmov	r0, r1, d8
 800943c:	f7f6 ff46 	bl	80002cc <__adddf3>
 8009440:	ec53 2b19 	vmov	r2, r3, d9
 8009444:	f7f7 f8f8 	bl	8000638 <__aeabi_dmul>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f6 ff3e 	bl	80002cc <__adddf3>
 8009450:	4642      	mov	r2, r8
 8009452:	4682      	mov	sl, r0
 8009454:	468b      	mov	fp, r1
 8009456:	464b      	mov	r3, r9
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f7 f8ec 	bl	8000638 <__aeabi_dmul>
 8009460:	4b6b      	ldr	r3, [pc, #428]	; (8009610 <__ieee754_pow+0x770>)
 8009462:	2200      	movs	r2, #0
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	f7f6 ff30 	bl	80002cc <__adddf3>
 800946c:	4652      	mov	r2, sl
 800946e:	465b      	mov	r3, fp
 8009470:	f7f6 ff2c 	bl	80002cc <__adddf3>
 8009474:	2000      	movs	r0, #0
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 f8d9 	bl	8000638 <__aeabi_dmul>
 8009486:	4b62      	ldr	r3, [pc, #392]	; (8009610 <__ieee754_pow+0x770>)
 8009488:	4680      	mov	r8, r0
 800948a:	4689      	mov	r9, r1
 800948c:	2200      	movs	r2, #0
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f6 ff19 	bl	80002c8 <__aeabi_dsub>
 8009496:	4632      	mov	r2, r6
 8009498:	463b      	mov	r3, r7
 800949a:	f7f6 ff15 	bl	80002c8 <__aeabi_dsub>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4650      	mov	r0, sl
 80094a4:	4659      	mov	r1, fp
 80094a6:	f7f6 ff0f 	bl	80002c8 <__aeabi_dsub>
 80094aa:	ec53 2b18 	vmov	r2, r3, d8
 80094ae:	f7f7 f8c3 	bl	8000638 <__aeabi_dmul>
 80094b2:	4622      	mov	r2, r4
 80094b4:	4606      	mov	r6, r0
 80094b6:	460f      	mov	r7, r1
 80094b8:	462b      	mov	r3, r5
 80094ba:	ec51 0b19 	vmov	r0, r1, d9
 80094be:	f7f7 f8bb 	bl	8000638 <__aeabi_dmul>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4630      	mov	r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f6 feff 	bl	80002cc <__adddf3>
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f6 fef7 	bl	80002cc <__adddf3>
 80094de:	a33e      	add	r3, pc, #248	; (adr r3, 80095d8 <__ieee754_pow+0x738>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	2000      	movs	r0, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	4642      	mov	r2, r8
 80094f0:	ec41 0b18 	vmov	d8, r0, r1
 80094f4:	464b      	mov	r3, r9
 80094f6:	4620      	mov	r0, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f6 fee5 	bl	80002c8 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4630      	mov	r0, r6
 8009504:	4639      	mov	r1, r7
 8009506:	f7f6 fedf 	bl	80002c8 <__aeabi_dsub>
 800950a:	a335      	add	r3, pc, #212	; (adr r3, 80095e0 <__ieee754_pow+0x740>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f7 f892 	bl	8000638 <__aeabi_dmul>
 8009514:	a334      	add	r3, pc, #208	; (adr r3, 80095e8 <__ieee754_pow+0x748>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 f889 	bl	8000638 <__aeabi_dmul>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4630      	mov	r0, r6
 800952c:	4639      	mov	r1, r7
 800952e:	f7f6 fecd 	bl	80002cc <__adddf3>
 8009532:	9a07      	ldr	r2, [sp, #28]
 8009534:	4b37      	ldr	r3, [pc, #220]	; (8009614 <__ieee754_pow+0x774>)
 8009536:	4413      	add	r3, r2
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f6 fec6 	bl	80002cc <__adddf3>
 8009540:	4682      	mov	sl, r0
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	468b      	mov	fp, r1
 8009546:	f7f7 f80d 	bl	8000564 <__aeabi_i2d>
 800954a:	9a07      	ldr	r2, [sp, #28]
 800954c:	4b32      	ldr	r3, [pc, #200]	; (8009618 <__ieee754_pow+0x778>)
 800954e:	4413      	add	r3, r2
 8009550:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	4652      	mov	r2, sl
 800955a:	465b      	mov	r3, fp
 800955c:	ec51 0b18 	vmov	r0, r1, d8
 8009560:	f7f6 feb4 	bl	80002cc <__adddf3>
 8009564:	4642      	mov	r2, r8
 8009566:	464b      	mov	r3, r9
 8009568:	f7f6 feb0 	bl	80002cc <__adddf3>
 800956c:	4632      	mov	r2, r6
 800956e:	463b      	mov	r3, r7
 8009570:	f7f6 feac 	bl	80002cc <__adddf3>
 8009574:	2000      	movs	r0, #0
 8009576:	4632      	mov	r2, r6
 8009578:	463b      	mov	r3, r7
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
 800957e:	f7f6 fea3 	bl	80002c8 <__aeabi_dsub>
 8009582:	4642      	mov	r2, r8
 8009584:	464b      	mov	r3, r9
 8009586:	f7f6 fe9f 	bl	80002c8 <__aeabi_dsub>
 800958a:	ec53 2b18 	vmov	r2, r3, d8
 800958e:	f7f6 fe9b 	bl	80002c8 <__aeabi_dsub>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4650      	mov	r0, sl
 8009598:	4659      	mov	r1, fp
 800959a:	e610      	b.n	80091be <__ieee754_pow+0x31e>
 800959c:	2401      	movs	r4, #1
 800959e:	e6a1      	b.n	80092e4 <__ieee754_pow+0x444>
 80095a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80095f0 <__ieee754_pow+0x750>
 80095a4:	e617      	b.n	80091d6 <__ieee754_pow+0x336>
 80095a6:	bf00      	nop
 80095a8:	4a454eef 	.word	0x4a454eef
 80095ac:	3fca7e28 	.word	0x3fca7e28
 80095b0:	93c9db65 	.word	0x93c9db65
 80095b4:	3fcd864a 	.word	0x3fcd864a
 80095b8:	a91d4101 	.word	0xa91d4101
 80095bc:	3fd17460 	.word	0x3fd17460
 80095c0:	518f264d 	.word	0x518f264d
 80095c4:	3fd55555 	.word	0x3fd55555
 80095c8:	db6fabff 	.word	0xdb6fabff
 80095cc:	3fdb6db6 	.word	0x3fdb6db6
 80095d0:	33333303 	.word	0x33333303
 80095d4:	3fe33333 	.word	0x3fe33333
 80095d8:	e0000000 	.word	0xe0000000
 80095dc:	3feec709 	.word	0x3feec709
 80095e0:	dc3a03fd 	.word	0xdc3a03fd
 80095e4:	3feec709 	.word	0x3feec709
 80095e8:	145b01f5 	.word	0x145b01f5
 80095ec:	be3e2fe0 	.word	0xbe3e2fe0
 80095f0:	00000000 	.word	0x00000000
 80095f4:	3ff00000 	.word	0x3ff00000
 80095f8:	7ff00000 	.word	0x7ff00000
 80095fc:	43400000 	.word	0x43400000
 8009600:	0003988e 	.word	0x0003988e
 8009604:	000bb679 	.word	0x000bb679
 8009608:	0800bcd8 	.word	0x0800bcd8
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	40080000 	.word	0x40080000
 8009614:	0800bcf8 	.word	0x0800bcf8
 8009618:	0800bce8 	.word	0x0800bce8
 800961c:	a3b5      	add	r3, pc, #724	; (adr r3, 80098f4 <__ieee754_pow+0xa54>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 fe51 	bl	80002cc <__adddf3>
 800962a:	4622      	mov	r2, r4
 800962c:	ec41 0b1a 	vmov	d10, r0, r1
 8009630:	462b      	mov	r3, r5
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 fe47 	bl	80002c8 <__aeabi_dsub>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	ec51 0b1a 	vmov	r0, r1, d10
 8009642:	f7f7 fa89 	bl	8000b58 <__aeabi_dcmpgt>
 8009646:	2800      	cmp	r0, #0
 8009648:	f47f ae04 	bne.w	8009254 <__ieee754_pow+0x3b4>
 800964c:	4aa4      	ldr	r2, [pc, #656]	; (80098e0 <__ieee754_pow+0xa40>)
 800964e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009652:	4293      	cmp	r3, r2
 8009654:	f340 8108 	ble.w	8009868 <__ieee754_pow+0x9c8>
 8009658:	151b      	asrs	r3, r3, #20
 800965a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800965e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009662:	fa4a f303 	asr.w	r3, sl, r3
 8009666:	445b      	add	r3, fp
 8009668:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800966c:	4e9d      	ldr	r6, [pc, #628]	; (80098e4 <__ieee754_pow+0xa44>)
 800966e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009672:	4116      	asrs	r6, r2
 8009674:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009678:	2000      	movs	r0, #0
 800967a:	ea23 0106 	bic.w	r1, r3, r6
 800967e:	f1c2 0214 	rsb	r2, r2, #20
 8009682:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009686:	fa4a fa02 	asr.w	sl, sl, r2
 800968a:	f1bb 0f00 	cmp.w	fp, #0
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4620      	mov	r0, r4
 8009694:	4629      	mov	r1, r5
 8009696:	bfb8      	it	lt
 8009698:	f1ca 0a00 	rsblt	sl, sl, #0
 800969c:	f7f6 fe14 	bl	80002c8 <__aeabi_dsub>
 80096a0:	ec41 0b19 	vmov	d9, r0, r1
 80096a4:	4642      	mov	r2, r8
 80096a6:	464b      	mov	r3, r9
 80096a8:	ec51 0b19 	vmov	r0, r1, d9
 80096ac:	f7f6 fe0e 	bl	80002cc <__adddf3>
 80096b0:	a37b      	add	r3, pc, #492	; (adr r3, 80098a0 <__ieee754_pow+0xa00>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	2000      	movs	r0, #0
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	f7f6 ffbc 	bl	8000638 <__aeabi_dmul>
 80096c0:	ec53 2b19 	vmov	r2, r3, d9
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 fdfc 	bl	80002c8 <__aeabi_dsub>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4640      	mov	r0, r8
 80096d6:	4649      	mov	r1, r9
 80096d8:	f7f6 fdf6 	bl	80002c8 <__aeabi_dsub>
 80096dc:	a372      	add	r3, pc, #456	; (adr r3, 80098a8 <__ieee754_pow+0xa08>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 ffa9 	bl	8000638 <__aeabi_dmul>
 80096e6:	a372      	add	r3, pc, #456	; (adr r3, 80098b0 <__ieee754_pow+0xa10>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 ffa0 	bl	8000638 <__aeabi_dmul>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f6 fde4 	bl	80002cc <__adddf3>
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f6 fddc 	bl	80002cc <__adddf3>
 8009714:	4632      	mov	r2, r6
 8009716:	463b      	mov	r3, r7
 8009718:	4680      	mov	r8, r0
 800971a:	4689      	mov	r9, r1
 800971c:	f7f6 fdd4 	bl	80002c8 <__aeabi_dsub>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 fdce 	bl	80002c8 <__aeabi_dsub>
 800972c:	4642      	mov	r2, r8
 800972e:	4606      	mov	r6, r0
 8009730:	460f      	mov	r7, r1
 8009732:	464b      	mov	r3, r9
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f6 ff7e 	bl	8000638 <__aeabi_dmul>
 800973c:	a35e      	add	r3, pc, #376	; (adr r3, 80098b8 <__ieee754_pow+0xa18>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	4604      	mov	r4, r0
 8009744:	460d      	mov	r5, r1
 8009746:	f7f6 ff77 	bl	8000638 <__aeabi_dmul>
 800974a:	a35d      	add	r3, pc, #372	; (adr r3, 80098c0 <__ieee754_pow+0xa20>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 fdba 	bl	80002c8 <__aeabi_dsub>
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 ff6e 	bl	8000638 <__aeabi_dmul>
 800975c:	a35a      	add	r3, pc, #360	; (adr r3, 80098c8 <__ieee754_pow+0xa28>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f7f6 fdb3 	bl	80002cc <__adddf3>
 8009766:	4622      	mov	r2, r4
 8009768:	462b      	mov	r3, r5
 800976a:	f7f6 ff65 	bl	8000638 <__aeabi_dmul>
 800976e:	a358      	add	r3, pc, #352	; (adr r3, 80098d0 <__ieee754_pow+0xa30>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fda8 	bl	80002c8 <__aeabi_dsub>
 8009778:	4622      	mov	r2, r4
 800977a:	462b      	mov	r3, r5
 800977c:	f7f6 ff5c 	bl	8000638 <__aeabi_dmul>
 8009780:	a355      	add	r3, pc, #340	; (adr r3, 80098d8 <__ieee754_pow+0xa38>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fda1 	bl	80002cc <__adddf3>
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f7f6 ff53 	bl	8000638 <__aeabi_dmul>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4640      	mov	r0, r8
 8009798:	4649      	mov	r1, r9
 800979a:	f7f6 fd95 	bl	80002c8 <__aeabi_dsub>
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4640      	mov	r0, r8
 80097a8:	4649      	mov	r1, r9
 80097aa:	f7f6 ff45 	bl	8000638 <__aeabi_dmul>
 80097ae:	2200      	movs	r2, #0
 80097b0:	ec41 0b19 	vmov	d9, r0, r1
 80097b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097b8:	4620      	mov	r0, r4
 80097ba:	4629      	mov	r1, r5
 80097bc:	f7f6 fd84 	bl	80002c8 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	ec51 0b19 	vmov	r0, r1, d9
 80097c8:	f7f7 f860 	bl	800088c <__aeabi_ddiv>
 80097cc:	4632      	mov	r2, r6
 80097ce:	4604      	mov	r4, r0
 80097d0:	460d      	mov	r5, r1
 80097d2:	463b      	mov	r3, r7
 80097d4:	4640      	mov	r0, r8
 80097d6:	4649      	mov	r1, r9
 80097d8:	f7f6 ff2e 	bl	8000638 <__aeabi_dmul>
 80097dc:	4632      	mov	r2, r6
 80097de:	463b      	mov	r3, r7
 80097e0:	f7f6 fd74 	bl	80002cc <__adddf3>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4620      	mov	r0, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 fd6c 	bl	80002c8 <__aeabi_dsub>
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	f7f6 fd68 	bl	80002c8 <__aeabi_dsub>
 80097f8:	460b      	mov	r3, r1
 80097fa:	4602      	mov	r2, r0
 80097fc:	493a      	ldr	r1, [pc, #232]	; (80098e8 <__ieee754_pow+0xa48>)
 80097fe:	2000      	movs	r0, #0
 8009800:	f7f6 fd62 	bl	80002c8 <__aeabi_dsub>
 8009804:	ec41 0b10 	vmov	d0, r0, r1
 8009808:	ee10 3a90 	vmov	r3, s1
 800980c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009814:	da2b      	bge.n	800986e <__ieee754_pow+0x9ce>
 8009816:	4650      	mov	r0, sl
 8009818:	f000 f966 	bl	8009ae8 <scalbn>
 800981c:	ec51 0b10 	vmov	r0, r1, d0
 8009820:	ec53 2b18 	vmov	r2, r3, d8
 8009824:	f7ff bbed 	b.w	8009002 <__ieee754_pow+0x162>
 8009828:	4b30      	ldr	r3, [pc, #192]	; (80098ec <__ieee754_pow+0xa4c>)
 800982a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800982e:	429e      	cmp	r6, r3
 8009830:	f77f af0c 	ble.w	800964c <__ieee754_pow+0x7ac>
 8009834:	4b2e      	ldr	r3, [pc, #184]	; (80098f0 <__ieee754_pow+0xa50>)
 8009836:	440b      	add	r3, r1
 8009838:	4303      	orrs	r3, r0
 800983a:	d009      	beq.n	8009850 <__ieee754_pow+0x9b0>
 800983c:	ec51 0b18 	vmov	r0, r1, d8
 8009840:	2200      	movs	r2, #0
 8009842:	2300      	movs	r3, #0
 8009844:	f7f7 f96a 	bl	8000b1c <__aeabi_dcmplt>
 8009848:	3800      	subs	r0, #0
 800984a:	bf18      	it	ne
 800984c:	2001      	movne	r0, #1
 800984e:	e447      	b.n	80090e0 <__ieee754_pow+0x240>
 8009850:	4622      	mov	r2, r4
 8009852:	462b      	mov	r3, r5
 8009854:	f7f6 fd38 	bl	80002c8 <__aeabi_dsub>
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	f7f7 f972 	bl	8000b44 <__aeabi_dcmpge>
 8009860:	2800      	cmp	r0, #0
 8009862:	f43f aef3 	beq.w	800964c <__ieee754_pow+0x7ac>
 8009866:	e7e9      	b.n	800983c <__ieee754_pow+0x99c>
 8009868:	f04f 0a00 	mov.w	sl, #0
 800986c:	e71a      	b.n	80096a4 <__ieee754_pow+0x804>
 800986e:	ec51 0b10 	vmov	r0, r1, d0
 8009872:	4619      	mov	r1, r3
 8009874:	e7d4      	b.n	8009820 <__ieee754_pow+0x980>
 8009876:	491c      	ldr	r1, [pc, #112]	; (80098e8 <__ieee754_pow+0xa48>)
 8009878:	2000      	movs	r0, #0
 800987a:	f7ff bb30 	b.w	8008ede <__ieee754_pow+0x3e>
 800987e:	2000      	movs	r0, #0
 8009880:	2100      	movs	r1, #0
 8009882:	f7ff bb2c 	b.w	8008ede <__ieee754_pow+0x3e>
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	f7ff bb28 	b.w	8008ede <__ieee754_pow+0x3e>
 800988e:	9204      	str	r2, [sp, #16]
 8009890:	f7ff bb7a 	b.w	8008f88 <__ieee754_pow+0xe8>
 8009894:	2300      	movs	r3, #0
 8009896:	f7ff bb64 	b.w	8008f62 <__ieee754_pow+0xc2>
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w
 80098a0:	00000000 	.word	0x00000000
 80098a4:	3fe62e43 	.word	0x3fe62e43
 80098a8:	fefa39ef 	.word	0xfefa39ef
 80098ac:	3fe62e42 	.word	0x3fe62e42
 80098b0:	0ca86c39 	.word	0x0ca86c39
 80098b4:	be205c61 	.word	0xbe205c61
 80098b8:	72bea4d0 	.word	0x72bea4d0
 80098bc:	3e663769 	.word	0x3e663769
 80098c0:	c5d26bf1 	.word	0xc5d26bf1
 80098c4:	3ebbbd41 	.word	0x3ebbbd41
 80098c8:	af25de2c 	.word	0xaf25de2c
 80098cc:	3f11566a 	.word	0x3f11566a
 80098d0:	16bebd93 	.word	0x16bebd93
 80098d4:	3f66c16c 	.word	0x3f66c16c
 80098d8:	5555553e 	.word	0x5555553e
 80098dc:	3fc55555 	.word	0x3fc55555
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	000fffff 	.word	0x000fffff
 80098e8:	3ff00000 	.word	0x3ff00000
 80098ec:	4090cbff 	.word	0x4090cbff
 80098f0:	3f6f3400 	.word	0x3f6f3400
 80098f4:	652b82fe 	.word	0x652b82fe
 80098f8:	3c971547 	.word	0x3c971547

080098fc <__ieee754_sqrt>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	ec55 4b10 	vmov	r4, r5, d0
 8009904:	4e55      	ldr	r6, [pc, #340]	; (8009a5c <__ieee754_sqrt+0x160>)
 8009906:	43ae      	bics	r6, r5
 8009908:	ee10 0a10 	vmov	r0, s0
 800990c:	ee10 3a10 	vmov	r3, s0
 8009910:	462a      	mov	r2, r5
 8009912:	4629      	mov	r1, r5
 8009914:	d110      	bne.n	8009938 <__ieee754_sqrt+0x3c>
 8009916:	ee10 2a10 	vmov	r2, s0
 800991a:	462b      	mov	r3, r5
 800991c:	f7f6 fe8c 	bl	8000638 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	f7f6 fcd0 	bl	80002cc <__adddf3>
 800992c:	4604      	mov	r4, r0
 800992e:	460d      	mov	r5, r1
 8009930:	ec45 4b10 	vmov	d0, r4, r5
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	2d00      	cmp	r5, #0
 800993a:	dc10      	bgt.n	800995e <__ieee754_sqrt+0x62>
 800993c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009940:	4330      	orrs	r0, r6
 8009942:	d0f5      	beq.n	8009930 <__ieee754_sqrt+0x34>
 8009944:	b15d      	cbz	r5, 800995e <__ieee754_sqrt+0x62>
 8009946:	ee10 2a10 	vmov	r2, s0
 800994a:	462b      	mov	r3, r5
 800994c:	ee10 0a10 	vmov	r0, s0
 8009950:	f7f6 fcba 	bl	80002c8 <__aeabi_dsub>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	f7f6 ff98 	bl	800088c <__aeabi_ddiv>
 800995c:	e7e6      	b.n	800992c <__ieee754_sqrt+0x30>
 800995e:	1512      	asrs	r2, r2, #20
 8009960:	d074      	beq.n	8009a4c <__ieee754_sqrt+0x150>
 8009962:	07d4      	lsls	r4, r2, #31
 8009964:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009968:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800996c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009970:	bf5e      	ittt	pl
 8009972:	0fda      	lsrpl	r2, r3, #31
 8009974:	005b      	lslpl	r3, r3, #1
 8009976:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800997a:	2400      	movs	r4, #0
 800997c:	0fda      	lsrs	r2, r3, #31
 800997e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009982:	107f      	asrs	r7, r7, #1
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	2516      	movs	r5, #22
 8009988:	4620      	mov	r0, r4
 800998a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800998e:	1886      	adds	r6, r0, r2
 8009990:	428e      	cmp	r6, r1
 8009992:	bfde      	ittt	le
 8009994:	1b89      	suble	r1, r1, r6
 8009996:	18b0      	addle	r0, r6, r2
 8009998:	18a4      	addle	r4, r4, r2
 800999a:	0049      	lsls	r1, r1, #1
 800999c:	3d01      	subs	r5, #1
 800999e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80099a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80099a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099aa:	d1f0      	bne.n	800998e <__ieee754_sqrt+0x92>
 80099ac:	462a      	mov	r2, r5
 80099ae:	f04f 0e20 	mov.w	lr, #32
 80099b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80099b6:	4281      	cmp	r1, r0
 80099b8:	eb06 0c05 	add.w	ip, r6, r5
 80099bc:	dc02      	bgt.n	80099c4 <__ieee754_sqrt+0xc8>
 80099be:	d113      	bne.n	80099e8 <__ieee754_sqrt+0xec>
 80099c0:	459c      	cmp	ip, r3
 80099c2:	d811      	bhi.n	80099e8 <__ieee754_sqrt+0xec>
 80099c4:	f1bc 0f00 	cmp.w	ip, #0
 80099c8:	eb0c 0506 	add.w	r5, ip, r6
 80099cc:	da43      	bge.n	8009a56 <__ieee754_sqrt+0x15a>
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	db41      	blt.n	8009a56 <__ieee754_sqrt+0x15a>
 80099d2:	f100 0801 	add.w	r8, r0, #1
 80099d6:	1a09      	subs	r1, r1, r0
 80099d8:	459c      	cmp	ip, r3
 80099da:	bf88      	it	hi
 80099dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80099e0:	eba3 030c 	sub.w	r3, r3, ip
 80099e4:	4432      	add	r2, r6
 80099e6:	4640      	mov	r0, r8
 80099e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80099ec:	f1be 0e01 	subs.w	lr, lr, #1
 80099f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80099f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80099fc:	d1db      	bne.n	80099b6 <__ieee754_sqrt+0xba>
 80099fe:	430b      	orrs	r3, r1
 8009a00:	d006      	beq.n	8009a10 <__ieee754_sqrt+0x114>
 8009a02:	1c50      	adds	r0, r2, #1
 8009a04:	bf13      	iteet	ne
 8009a06:	3201      	addne	r2, #1
 8009a08:	3401      	addeq	r4, #1
 8009a0a:	4672      	moveq	r2, lr
 8009a0c:	f022 0201 	bicne.w	r2, r2, #1
 8009a10:	1063      	asrs	r3, r4, #1
 8009a12:	0852      	lsrs	r2, r2, #1
 8009a14:	07e1      	lsls	r1, r4, #31
 8009a16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a1e:	bf48      	it	mi
 8009a20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a28:	4614      	mov	r4, r2
 8009a2a:	e781      	b.n	8009930 <__ieee754_sqrt+0x34>
 8009a2c:	0ad9      	lsrs	r1, r3, #11
 8009a2e:	3815      	subs	r0, #21
 8009a30:	055b      	lsls	r3, r3, #21
 8009a32:	2900      	cmp	r1, #0
 8009a34:	d0fa      	beq.n	8009a2c <__ieee754_sqrt+0x130>
 8009a36:	02cd      	lsls	r5, r1, #11
 8009a38:	d50a      	bpl.n	8009a50 <__ieee754_sqrt+0x154>
 8009a3a:	f1c2 0420 	rsb	r4, r2, #32
 8009a3e:	fa23 f404 	lsr.w	r4, r3, r4
 8009a42:	1e55      	subs	r5, r2, #1
 8009a44:	4093      	lsls	r3, r2
 8009a46:	4321      	orrs	r1, r4
 8009a48:	1b42      	subs	r2, r0, r5
 8009a4a:	e78a      	b.n	8009962 <__ieee754_sqrt+0x66>
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	e7f0      	b.n	8009a32 <__ieee754_sqrt+0x136>
 8009a50:	0049      	lsls	r1, r1, #1
 8009a52:	3201      	adds	r2, #1
 8009a54:	e7ef      	b.n	8009a36 <__ieee754_sqrt+0x13a>
 8009a56:	4680      	mov	r8, r0
 8009a58:	e7bd      	b.n	80099d6 <__ieee754_sqrt+0xda>
 8009a5a:	bf00      	nop
 8009a5c:	7ff00000 	.word	0x7ff00000

08009a60 <with_errno>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	460d      	mov	r5, r1
 8009a66:	4616      	mov	r6, r2
 8009a68:	f7fc fbd4 	bl	8006214 <__errno>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	6006      	str	r6, [r0, #0]
 8009a70:	4620      	mov	r0, r4
 8009a72:	bd70      	pop	{r4, r5, r6, pc}

08009a74 <xflow>:
 8009a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a76:	4614      	mov	r4, r2
 8009a78:	461d      	mov	r5, r3
 8009a7a:	b108      	cbz	r0, 8009a80 <xflow+0xc>
 8009a7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	e9cd 2300 	strd	r2, r3, [sp]
 8009a84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	f7f6 fdd4 	bl	8000638 <__aeabi_dmul>
 8009a90:	2222      	movs	r2, #34	; 0x22
 8009a92:	b003      	add	sp, #12
 8009a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a98:	f7ff bfe2 	b.w	8009a60 <with_errno>

08009a9c <__math_uflow>:
 8009a9c:	b508      	push	{r3, lr}
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009aa4:	f7ff ffe6 	bl	8009a74 <xflow>
 8009aa8:	ec41 0b10 	vmov	d0, r0, r1
 8009aac:	bd08      	pop	{r3, pc}

08009aae <__math_oflow>:
 8009aae:	b508      	push	{r3, lr}
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009ab6:	f7ff ffdd 	bl	8009a74 <xflow>
 8009aba:	ec41 0b10 	vmov	d0, r0, r1
 8009abe:	bd08      	pop	{r3, pc}

08009ac0 <fabs>:
 8009ac0:	ec51 0b10 	vmov	r0, r1, d0
 8009ac4:	ee10 2a10 	vmov	r2, s0
 8009ac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009acc:	ec43 2b10 	vmov	d0, r2, r3
 8009ad0:	4770      	bx	lr

08009ad2 <finite>:
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	ed8d 0b00 	vstr	d0, [sp]
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009ade:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009ae2:	0fc0      	lsrs	r0, r0, #31
 8009ae4:	b002      	add	sp, #8
 8009ae6:	4770      	bx	lr

08009ae8 <scalbn>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	ec55 4b10 	vmov	r4, r5, d0
 8009aee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009af2:	4606      	mov	r6, r0
 8009af4:	462b      	mov	r3, r5
 8009af6:	b99a      	cbnz	r2, 8009b20 <scalbn+0x38>
 8009af8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009afc:	4323      	orrs	r3, r4
 8009afe:	d036      	beq.n	8009b6e <scalbn+0x86>
 8009b00:	4b39      	ldr	r3, [pc, #228]	; (8009be8 <scalbn+0x100>)
 8009b02:	4629      	mov	r1, r5
 8009b04:	ee10 0a10 	vmov	r0, s0
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f7f6 fd95 	bl	8000638 <__aeabi_dmul>
 8009b0e:	4b37      	ldr	r3, [pc, #220]	; (8009bec <scalbn+0x104>)
 8009b10:	429e      	cmp	r6, r3
 8009b12:	4604      	mov	r4, r0
 8009b14:	460d      	mov	r5, r1
 8009b16:	da10      	bge.n	8009b3a <scalbn+0x52>
 8009b18:	a32b      	add	r3, pc, #172	; (adr r3, 8009bc8 <scalbn+0xe0>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	e03a      	b.n	8009b96 <scalbn+0xae>
 8009b20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009b24:	428a      	cmp	r2, r1
 8009b26:	d10c      	bne.n	8009b42 <scalbn+0x5a>
 8009b28:	ee10 2a10 	vmov	r2, s0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 fbcc 	bl	80002cc <__adddf3>
 8009b34:	4604      	mov	r4, r0
 8009b36:	460d      	mov	r5, r1
 8009b38:	e019      	b.n	8009b6e <scalbn+0x86>
 8009b3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b3e:	460b      	mov	r3, r1
 8009b40:	3a36      	subs	r2, #54	; 0x36
 8009b42:	4432      	add	r2, r6
 8009b44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009b48:	428a      	cmp	r2, r1
 8009b4a:	dd08      	ble.n	8009b5e <scalbn+0x76>
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	a120      	add	r1, pc, #128	; (adr r1, 8009bd0 <scalbn+0xe8>)
 8009b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b54:	da1c      	bge.n	8009b90 <scalbn+0xa8>
 8009b56:	a120      	add	r1, pc, #128	; (adr r1, 8009bd8 <scalbn+0xf0>)
 8009b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b5c:	e018      	b.n	8009b90 <scalbn+0xa8>
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	dd08      	ble.n	8009b74 <scalbn+0x8c>
 8009b62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b6e:	ec45 4b10 	vmov	d0, r4, r5
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009b78:	da19      	bge.n	8009bae <scalbn+0xc6>
 8009b7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009b84:	dd0a      	ble.n	8009b9c <scalbn+0xb4>
 8009b86:	a112      	add	r1, pc, #72	; (adr r1, 8009bd0 <scalbn+0xe8>)
 8009b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e2      	bne.n	8009b56 <scalbn+0x6e>
 8009b90:	a30f      	add	r3, pc, #60	; (adr r3, 8009bd0 <scalbn+0xe8>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fd4f 	bl	8000638 <__aeabi_dmul>
 8009b9a:	e7cb      	b.n	8009b34 <scalbn+0x4c>
 8009b9c:	a10a      	add	r1, pc, #40	; (adr r1, 8009bc8 <scalbn+0xe0>)
 8009b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0b8      	beq.n	8009b18 <scalbn+0x30>
 8009ba6:	a10e      	add	r1, pc, #56	; (adr r1, 8009be0 <scalbn+0xf8>)
 8009ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bac:	e7b4      	b.n	8009b18 <scalbn+0x30>
 8009bae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bb2:	3236      	adds	r2, #54	; 0x36
 8009bb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <scalbn+0x108>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	e7e8      	b.n	8009b96 <scalbn+0xae>
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	c2f8f359 	.word	0xc2f8f359
 8009bcc:	01a56e1f 	.word	0x01a56e1f
 8009bd0:	8800759c 	.word	0x8800759c
 8009bd4:	7e37e43c 	.word	0x7e37e43c
 8009bd8:	8800759c 	.word	0x8800759c
 8009bdc:	fe37e43c 	.word	0xfe37e43c
 8009be0:	c2f8f359 	.word	0xc2f8f359
 8009be4:	81a56e1f 	.word	0x81a56e1f
 8009be8:	43500000 	.word	0x43500000
 8009bec:	ffff3cb0 	.word	0xffff3cb0
 8009bf0:	3c900000 	.word	0x3c900000

08009bf4 <_init>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr

08009c00 <_fini>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr
